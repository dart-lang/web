{
  "__meta__": {
    "source": "[MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web)",
    "license": "[CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/)"
  },
  "ANGLE_instanced_arrays": {
    "docs": "The **`ANGLE_instanced_arrays`** extension is part of the WebGL API and allows to draw the same object, or groups of similar objects multiple times, if they share the same vertex data, primitive count and type.\n\nWebGL extensions are available using the `WebGLRenderingContext.getExtension()` method. For more information, see also Using Extensions in the WebGL tutorial.\n\n**Note:** This extension is only available to WebGL1 contexts. In WebGL2, the functionality of this extension is available on the WebGL2 context by default and the constants and methods are available without the \"`ANGLE`\" suffix.\nDespite the name \"ANGLE\", this extension works on any device if the hardware supports it and not just on Windows when using the ANGLE library. \"ANGLE\" just indicates that this extension has been written by the ANGLE library authors.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ANGLE_instanced_arrays."
  },
  "AesCbcParams": {
    "docs": "The **`AesCbcParams`** dictionary of the Web Crypto API represents the object that should be passed as the `algorithm` parameter into `SubtleCrypto.encrypt()`, `SubtleCrypto.decrypt()`, `SubtleCrypto.wrapKey()`, or `SubtleCrypto.unwrapKey()`, when using the AES-CBC algorithm.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/AesCbcParams."
  },
  "Accelerometer": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`Accelerometer`** interface of the Sensor APIs provides on each reading the acceleration applied to the device along all three axes.\n\nTo use this sensor, the user must grant permission to the `'accelerometer'`, device sensor through the Permissions API.\n\nThis feature may be blocked by a Permissions Policy set on your server.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Accelerometer.",
    "properties": {
      "x": "Returns a double containing the acceleration of the device along the device's x axis.",
      "y": "Returns a double containing the acceleration of the device along the device's y axis.",
      "z": "Returns a double containing the acceleration of the device along the device's z axis."
    }
  },
  "AbortController": {
    "docs": "The **`AbortController`** interface represents a controller object that allows you to abort one or more Web requests as and when desired.\n\nYou can create a new `AbortController` object using the `AbortController()` constructor. Communicating with a DOM request is done using an `AbortSignal` object.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/AbortController.",
    "properties": {
      "abort": "Aborts a DOM request before it has completed. This is able to abort fetch requests, consumption of any response bodies, and streams.",
      "signal": "Returns an `AbortSignal` object instance, which can be used to communicate with, or to abort, a DOM request."
    }
  },
  "AbstractRange": {
    "docs": "The **`AbstractRange`** abstract interface is the base class upon which all DOM range types are defined. A **range** is an object that indicates the start and end points of a section of content within the document.\n\n**Note:** As an abstract interface, you will not directly instantiate an object of type `AbstractRange`. Instead, you will use the `Range` or `StaticRange` interfaces. To understand the difference between those two interfaces, and how to choose which is appropriate for your needs, consult each interface's documentation.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/AbstractRange."
  },
  "AesGcmParams": {
    "docs": "The **`AesGcmParams`** dictionary of the Web Crypto API represents the object that should be passed as the `algorithm` parameter into `SubtleCrypto.encrypt()`, `SubtleCrypto.decrypt()`, `SubtleCrypto.wrapKey()`, or `SubtleCrypto.unwrapKey()`, when using the AES-GCM algorithm.\n\nFor details of how to supply appropriate values for this parameter, see the specification for AES-GCM: [NIST SP800-38D](https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38d.pdf), in particular section 5.2.1.1 on Input Data.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/AesGcmParams."
  },
  "AmbientLightSensor": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`AmbientLightSensor`** interface of the Sensor APIs returns the current light level or illuminance of the ambient light around the hosting device.\n\nTo use this sensor, the user must grant permission to the `'ambient-light-sensor'` device sensor through the Permissions API.\n\nThis feature may be blocked by a Permissions Policy set on your server.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/AmbientLightSensor.",
    "properties": {
      "illuminance": "Returns the current light level in [lux](https://en.wikipedia.org/wiki/Lux) of the ambient light level around the hosting device."
    }
  },
  "AesCtrParams": {
    "docs": "The **`AesCtrParams`** dictionary of the Web Crypto API represents the object that should be passed as the `algorithm` parameter into `SubtleCrypto.encrypt()`, `SubtleCrypto.decrypt()`, `SubtleCrypto.wrapKey()`, or `SubtleCrypto.unwrapKey()`, when using the AES-CTR algorithm.\n\nAES is a block cipher, meaning that it splits the message into blocks and encrypts it a block at a time. In CTR mode, every time a block of the message is encrypted, an extra block of data is mixed in. This extra block is called the \"counter block\".\n\nA given counter block value must never be used more than once with the same key:\n\n- Given a message n blocks long, a different counter block must be used for every block.\n- If the same key is used to encrypt more than one message, a different counter block must be used for all blocks across all messages.\n\nTypically this is achieved by splitting the initial counter block value into two concatenated parts:\n\n- A [nonce](https://en.wikipedia.org/wiki/Cryptographic_nonce) (that is, a number that may only be used once). The nonce part of the block stays the same for every block in the message. Each time a new message is to be encrypted, a new nonce is chosen. Nonces don't have to be secret, but they must not be reused with the same key.\n- A counter. This part of the block gets incremented each time a block is encrypted.\n\nEssentially: the nonce should ensure that counter blocks are not reused from one message to the next, while the counter should ensure that counter blocks are not reused within a single message.\n\n**Note:** See [Appendix B of the NIST SP800-38A standard](https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38a.pdf#%5B%7B%22num%22%3A70%2C%22gen%22%3A0%7D%2C%7B%22name%22%3A%22Fit%22%7D%5D) for more information.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/AesCtrParams."
  },
  "AbortSignal": {
    "docs": "The **`AbortSignal`** interface represents a signal object that allows you to communicate with a DOM request (such as a fetch request) and abort it if required via an `AbortController` object.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal.",
    "properties": {
      "abort": "Returns an **`AbortSignal`** instance that is already set as aborted.",
      "aborted": "A Boolean that indicates whether the request(s) the signal is communicating with is/are aborted (`true`) or not (`false`).",
      "any": "Returns an **`AbortSignal`** that aborts when any of the given abort signals abort.",
      "reason": "A JavaScript value providing the abort reason, once the signal has aborted.",
      "throwifaborted": "Throws the signal's abort `reason` if the signal has been aborted; otherwise it does nothing.",
      "timeout": "Returns an **`AbortSignal`** instance that will automatically abort after a specified time."
    }
  },
  "AbsoluteOrientationSensor": {
    "docs": "The **`AbsoluteOrientationSensor`** interface of the Sensor APIs describes the device's physical orientation in relation to the Earth's reference coordinate system.\n\nTo use this sensor, the user must grant permission to the `'accelerometer'`, `'gyroscope'`, and `'magnetometer'` device sensors through the Permissions API.\n\nThis feature may be blocked by a Permissions Policy set on your server.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/AbsoluteOrientationSensor."
  },
  "AnimationEffect": {
    "docs": "The `AnimationEffect` interface of the Web Animations API is an interface representing animation effects.\n\n`AnimationEffect` is an abstract interface and so isn't directly instantiable. However, concrete interfaces such as `KeyframeEffect` inherit from it, and instances of these interfaces can be passed to `Animation` objects for playing, and may also be used by CSS Animations and Transitions.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffect.",
    "properties": {
      "getcomputedtiming": "Returns the calculated timing properties for this `AnimationEffect`.",
      "gettiming": "Returns the object associated with the animation containing all the animation's timing values.",
      "updatetiming": "Updates the specified timing properties of this `AnimationEffect`."
    }
  },
  "AnimationPlaybackEvent": {
    "docs": "The AnimationPlaybackEvent interface of the Web Animations API represents animation events.\n\nAs animations play, they report changes to their `playState` through animation events.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/AnimationPlaybackEvent.",
    "properties": {
      "currenttime": "The current time of the animation that generated the event.",
      "timelinetime": "The time value of the timeline of the animation that generated the event."
    }
  },
  "AnimationEvent": {
    "docs": "The **`AnimationEvent`** interface represents events providing information related to animations.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent.",
    "properties": {
      "animationname": "A string containing the value of the `animation-name` that generated the animation.",
      "elapsedtime": "A `float` giving the amount of time the animation has been running, in seconds, when this event fired, excluding any time the animation was paused. For an `animationstart` event, `elapsedTime` is `0.0` unless there was a negative value for `animation-delay`, in which case the event will be fired with `elapsedTime` containing `(-1 * delay)`.",
      "pseudoelement": "A string, starting with `'::'`, containing the name of the pseudo-element the animation runs on. If the animation doesn't run on a pseudo-element but on the element, an empty string: `''`."
    }
  },
  "AesKeyGenParams": {
    "docs": "The **`AesKeyGenParams`** dictionary of the Web Crypto API represents the object that should be passed as the `algorithm` parameter into `SubtleCrypto.generateKey()`, when generating an AES key: that is, when the algorithm is identified as any of AES-CBC, AES-CTR, AES-GCM, or AES-KW.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/AesKeyGenParams."
  },
  "AnalyserNode": {
    "docs": "The **`AnalyserNode`** interface represents a node able to provide real-time frequency and time-domain analysis information. It is an `AudioNode` that passes the audio stream unchanged from the input to the output, but allows you to take the generated data, process it, and create audio visualizations.\n\nAn `AnalyserNode` has exactly one input and one output. The node works even if the output is not connected.\n\n\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode.",
    "properties": {
      "fftsize": "An unsigned long value representing the size of the FFT ([Fast Fourier Transform](https://en.wikipedia.org/wiki/Fast_Fourier_transform)) to be used to determine the frequency domain.",
      "frequencybincount": "An unsigned long value half that of the FFT size. This generally equates to the number of data values you will have to play with for the visualization.",
      "getbytefrequencydata": "Copies the current frequency data into a `Uint8Array` (unsigned byte array) passed into it.",
      "getbytetimedomaindata": "Copies the current waveform, or time-domain, data into a `Uint8Array` (unsigned byte array) passed into it.",
      "getfloatfrequencydata": "Copies the current frequency data into a `Float32Array` array passed into it.",
      "getfloattimedomaindata": "Copies the current waveform, or time-domain, data into a `Float32Array` array passed into it.",
      "maxdecibels": "A double value representing the maximum power value in the scaling range for the FFT analysis data, for conversion to unsigned byte values â basically, this specifies the maximum value for the range of results when using `getByteFrequencyData()`.",
      "mindecibels": "A double value representing the minimum power value in the scaling range for the FFT analysis data, for conversion to unsigned byte values â basically, this specifies the minimum value for the range of results when using `getByteFrequencyData()`.",
      "smoothingtimeconstant": "A double value representing the averaging constant with the last analysis frame â basically, it makes the transition between values over time smoother."
    }
  },
  "AudioContext": {
    "docs": "The `AudioContext` interface represents an audio-processing graph built from audio modules linked together, each represented by an `AudioNode`.\n\nAn audio context controls both the creation of the nodes it contains and the execution of the audio processing, or decoding. You need to create an `AudioContext` before you do anything else, as everything happens inside a context. It's recommended to create one AudioContext and reuse it instead of initializing a new one each time, and it's OK to use a single `AudioContext` for several different audio sources and pipeline concurrently.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/AudioContext.",
    "properties": {
      "baselatency": "Returns the number of seconds of processing latency incurred by the `AudioContext` passing the audio from the `AudioDestinationNode` to the audio subsystem.",
      "close": "Closes the audio context, releasing any system audio resources that it uses.",
      "createmediaelementsource": "Creates a `MediaElementAudioSourceNode` associated with an `HTMLMediaElement`. This can be used to play and manipulate audio from `<video>` or `<audio>` elements.",
      "createmediastreamdestination": "Creates a `MediaStreamAudioDestinationNode` associated with a `MediaStream` representing an audio stream which may be stored in a local file or sent to another computer.",
      "createmediastreamsource": "Creates a `MediaStreamAudioSourceNode` associated with a `MediaStream` representing an audio stream which may come from the local computer microphone or other sources.",
      "createmediastreamtracksource": "Creates a `MediaStreamTrackAudioSourceNode` associated with a `MediaStream` representing an media stream track.",
      "getoutputtimestamp": "Returns a new `AudioTimestamp` object containing two audio timestamp values relating to the current audio context.",
      "outputlatency": "Returns an estimation of the output latency of the current audio context.",
      "resume": "Resumes the progression of time in an audio context that has previously been suspended/paused.",
      "setsinkid": "Sets the output audio device for the `AudioContext`.",
      "sinkid": "Returns the sink ID of the current output audio device.",
      "suspend": "Suspends the progression of time in the audio context, temporarily halting audio hardware access and reducing CPU/battery usage in the process."
    }
  },
  "AudioData": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`AudioData`** interface of the WebCodecs API represents an audio sample.\n\n`AudioData` is a transferable object.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/AudioData.",
    "properties": {
      "allocationsize": "Returns the number of bytes required to hold the sample as filtered by options passed into the method.",
      "clone": "Creates a new `AudioData` object with reference to the same media resource as the original.",
      "close": "Clears all states and releases the reference to the media resource.",
      "copyto": "Copies the samples from the specified plane of the `AudioData` object to the destination.",
      "duration": "Returns the duration of the audio in microseconds.",
      "format": "Returns the sample format of the audio.",
      "numberofchannels": "Returns the number of audio channels.",
      "numberofframes": "Returns the number of frames.",
      "samplerate": "Returns the sample rate of the audio in Hz.",
      "timestamp": "Returns the timestamp of the audio in microseconds."
    }
  },
  "Animation": {
    "docs": "The **`Animation`** interface of the Web Animations API represents a single animation player and provides playback controls and a timeline for an animation node or source.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Animation.",
    "properties": {
      "cancel": "Clears all `keyframeEffects` caused by this animation and aborts its playback.",
      "commitstyles": "Commits the current styling state of an animation to the element being animated, even after that animation has been removed. It will cause the current styling state to be written to the element being animated, in the form of properties inside a `style` attribute.",
      "currenttime": "The current time value of the animation in milliseconds, whether running or paused. If the animation lacks a `timeline`, is inactive or hasn't been played yet, its value is `null`.",
      "effect": "Gets and sets the `AnimationEffect` associated with this animation. This will usually be a `KeyframeEffect` object.",
      "finish": "Seeks either end of an animation, depending on whether the animation is playing or reversing.",
      "finished": "Returns the current finished Promise for this animation.",
      "id": "Gets and sets the `String` used to identify the animation.",
      "pause": "Suspends playing of an animation.",
      "pending": "Indicates whether the animation is currently waiting for an asynchronous operation such as initiating playback or pausing a running animation.",
      "persist": "Explicitly persists an animation, preventing it from being automatically removed when another animation replaces it.",
      "play": "Starts or resumes playing of an animation, or begins the animation again if it previously finished.",
      "playbackrate": "Gets or sets the playback rate of the animation.",
      "playstate": "Returns an enumerated value describing the playback state of an animation.",
      "ready": "Returns the current ready Promise for this animation.",
      "replacestate": "Indicates whether the animation is active, has been automatically removed after being replaced by another animation, or has been explicitly persisted by a call to `Animation.persist()`.",
      "reverse": "Reverses playback direction, stopping at the start of the animation. If the animation is finished or unplayed, it will play from end to beginning.",
      "starttime": "Gets or sets the scheduled time when an animation's playback should begin.",
      "timeline": "Gets or sets the `timeline` associated with this animation.",
      "updateplaybackrate": "Sets the speed of an animation after first synchronizing its playback position."
    }
  },
  "AnimationTimeline": {
    "docs": "The `AnimationTimeline` interface of the Web Animations API represents the timeline of an animation. This interface exists to define timeline features, inherited by other timeline types:\n\n- `DocumentTimeline`\n- `ScrollTimeline`\n- `ViewTimeline`\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/AnimationTimeline."
  },
  "Attr": {
    "docs": "The **`Attr`** interface represents one of an element's attributes as an object. In most situations, you will directly retrieve the attribute value as a string (e.g., `Element.getAttribute()`), but certain functions (e.g., `Element.getAttributeNode()`) or means of iterating return `Attr` instances.\n\nThe core idea of an object of type `Attr` is the association between a name and a value. An attribute may also be part of a namespace and, in this case, it also has a URI identifying the namespace, and a prefix that is an abbreviation for the namespace.\n\nThe name is deemed local when it ignores the eventual namespace prefix and deemed qualified when it includes the prefix of the namespace, if any, separated from the local name by a colon (`:`). We have three cases: an attribute outside of a namespace, an attribute inside a namespace without a prefix defined, an attribute inside a namespace with a prefix:\n\n**Note:** This interface represents only attributes present in the tree representation of the `Element`, being a SVG, an HTML or a MathML element. It doesn't represent the property of an interface associated with such element, such as `HTMLTableElement` for a `<table>` element. (See this article for more information about attributes and how they are reflected into properties.)\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Attr."
  },
  "AudioBuffer": {
    "docs": "The **`AudioBuffer`** interface represents a short audio asset residing in memory, created from an audio file using the `AudioContext.decodeAudioData()` method, or from raw data using `AudioContext.createBuffer()`. Once put into an AudioBuffer, the audio can then be played by being passed into an `AudioBufferSourceNode`.\n\nObjects of these types are designed to hold small audio snippets, typically less than 45 s. For longer sounds, objects implementing the `MediaElementAudioSourceNode` are more suitable. The buffer contains the audio signal waveform encoded as a series of amplitudes in the following format: non-interleaved IEEE754 32-bit linear PCM with a nominal range between `-1` and `+1`, that is, a 32-bit floating point buffer, with each sample between -1.0 and 1.0. If the `AudioBuffer` has multiple channels, they are stored in separate buffers.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer.",
    "properties": {
      "copyfromchannel": "Copies the samples from the specified channel of the `AudioBuffer` to the `destination` array.",
      "copytochannel": "Copies the samples to the specified channel of the `AudioBuffer`, from the `source` array.",
      "duration": "Returns a double representing the duration, in seconds, of the PCM data stored in the buffer.",
      "getchanneldata": "Returns a `Float32Array` containing the PCM data associated with the channel, defined by the `channel` parameter (with `0` representing the first channel).",
      "length": "Returns an integer representing the length, in sample-frames, of the PCM data stored in the buffer.",
      "numberofchannels": "Returns an integer representing the number of discrete audio channels described by the PCM data stored in the buffer.",
      "samplerate": "Returns a float representing the sample rate, in samples per second, of the PCM data stored in the buffer."
    }
  },
  "AudioDestinationNode": {
    "docs": "The `AudioDestinationNode` interface represents the end destination of an audio graph in a given context â usually the speakers of your device. It can also be the node that will \"record\" the audio data when used with an `OfflineAudioContext`.\n\n`AudioDestinationNode` has no output (as it is the output, no more `AudioNode` can be linked after it in the audio graph) and one input. The number of channels in the input must be between `0` and the `maxChannelCount` value or an exception is raised.\n\nThe `AudioDestinationNode` of a given `AudioContext` can be retrieved using the `AudioContext.destination` property.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/AudioDestinationNode.",
    "properties": {
      "maxchannelcount": "An `unsigned long` defining the maximum number of channels that the physical device can handle."
    }
  },
  "AudioEncoder": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`AudioEncoder`** interface of the WebCodecs API encodes `AudioData` objects.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/AudioEncoder.",
    "properties": {
      "close": "Ends all pending work and releases system resources.",
      "configure": "Enqueues a control message to configure the audio encoder for encoding chunks.",
      "encode": "Enqueues a control message to encode a given `AudioData` objects.",
      "encodequeuesize": "An integer representing the number of encode queue requests.",
      "flush": "Returns a promise that resolves once all pending messages in the queue have been completed.",
      "isconfigsupported": "Returns a promise indicating whether the provided `AudioEncoderConfig` is supported.",
      "reset": "Resets all states including configuration, control messages in the control message queue, and all pending callbacks.",
      "state": "Represents the state of the underlying codec and whether it is configured for encoding."
    }
  },
  "AudioBufferSourceNode": {
    "docs": "The **`AudioBufferSourceNode`** interface is an `AudioScheduledSourceNode` which represents an audio source consisting of in-memory audio data, stored in an `AudioBuffer`.\n\nThis interface is especially useful for playing back audio which has particularly stringent timing accuracy requirements, such as for sounds that must match a specific rhythm and can be kept in memory rather than being played from disk or the network. To play sounds which require accurate timing but must be streamed from the network or played from disk, use a `AudioWorkletNode` to implement its playback.\n\nAn `AudioBufferSourceNode` has no inputs and exactly one output, which has the same number of channels as the `AudioBuffer` indicated by its `buffer` property. If there's no buffer setâthat is, if `buffer` is `null`âthe output contains a single channel of silence (every sample is 0).\n\nAn `AudioBufferSourceNode` can only be played once; after each call to `start()`, you have to create a new node if you want to play the same sound again. Fortunately, these nodes are very inexpensive to create, and the actual `AudioBuffer`s can be reused for multiple plays of the sound. Indeed, you can use these nodes in a \"fire and forget\" manner: create the node, call `start()` to begin playing the sound, and don't even bother to hold a reference to it. It will automatically be garbage-collected at an appropriate time, which won't be until sometime after the sound has finished playing.\n\nMultiple calls to `stop()` are allowed. The most recent call replaces the previous one, if the `AudioBufferSourceNode` has not already reached the end of the buffer.\n\n\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode.",
    "properties": {
      "buffer": "An `AudioBuffer` that defines the audio asset to be played, or when set to the value `null`, defines a single channel of silence (in which every sample is 0.0).",
      "detune": "A k-rate `AudioParam` representing detuning of playback in [cents](https://en.wikipedia.org/wiki/Cent_%28music%29). This value is compounded with `playbackRate` to determine the speed at which the sound is played. Its default value is `0` (meaning no detuning), and its nominal range is -â to â.",
      "loop": "A Boolean attribute indicating if the audio asset must be replayed when the end of the `AudioBuffer` is reached. Its default value is `false`.",
      "loopend": "A floating-point number indicating the time, in seconds, at which playback of the `AudioBuffer` stops and loops back to the time indicated by `loopStart`, if `loop` is `true`. The default value is `0`.",
      "loopstart": "A floating-point value indicating the time, in seconds, at which playback of the `AudioBuffer` must begin when `loop` is `true`. Its default value is `0` (meaning that at the beginning of each loop, playback begins at the start of the audio buffer).",
      "playbackrate": "A k-rate `AudioParam` that defines the speed factor at which the audio asset will be played, where a value of 1.0 is the sound's natural sampling rate. Since no pitch correction is applied on the output, this can be used to change the pitch of the sample. This value is compounded with `detune` to determine the final playback rate."
    }
  },
  "AudioParamDescriptor": {
    "docs": "The **`AudioParamDescriptor`** dictionary of the Web Audio API specifies properties for `AudioParam` objects.\n\nIt is used to create custom `AudioParam`s on an `AudioWorkletNode`. If the underlying `AudioWorkletProcessor` has a `parameterDescriptors` static getter, then the returned array of objects based on this dictionary is used internally by `AudioWorkletNode` constructor to populate its `parameters` property accordingly.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/AudioParamDescriptor."
  },
  "AudioDecoder": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`AudioDecoder`** interface of the WebCodecs API decodes chunks of audio.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/AudioDecoder.",
    "properties": {
      "close": "Ends all pending work and releases system resources.",
      "configure": "Enqueues a control message to configure the audio decoder for decoding chunks.",
      "decode": "Enqueues a control message to decode a given chunk of audio.",
      "decodequeuesize": "An integer representing the number of decode queue requests.",
      "flush": "Returns a promise that resolves once all pending messages in the queue have been completed.",
      "isconfigsupported": "Returns a promise indicating whether the provided `AudioDecoderConfig` is supported.",
      "reset": "Resets all states including configuration, control messages in the control message queue, and all pending callbacks.",
      "state": "Represents the state of the underlying codec and whether it is configured for decoding."
    }
  },
  "AudioProcessingEvent": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe `AudioProcessingEvent` interface of the Web Audio API represents events that occur when a `ScriptProcessorNode` input buffer is ready to be processed.\n\nAn `audioprocess` event with this interface is fired on a `ScriptProcessorNode` when audio processing is required. During audio processing, the input buffer is read and processed to produce output audio data, which is then written to the output buffer.\n\n**Warning:** This feature has been deprecated and should be replaced by an `AudioWorklet`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/AudioProcessingEvent."
  },
  "AudioScheduledSourceNode": {
    "docs": "The `AudioScheduledSourceNode` interfaceâpart of the Web Audio APIâis a parent interface for several types of audio source node interfaces which share the ability to be started and stopped, optionally at specified times. Specifically, this interface defines the `start()` and `stop()` methods, as well as the `ended` event.\n\n**Note:** You can't create an `AudioScheduledSourceNode` object directly. Instead, use an interface which extends it, such as `AudioBufferSourceNode`, `OscillatorNode` or `ConstantSourceNode`.\n\nUnless stated otherwise, nodes based upon `AudioScheduledSourceNode` output silence when not playing (that is, before `start()` is called and after `stop()` is called). Silence is represented, as always, by a stream of samples with the value zero (0).\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/AudioScheduledSourceNode."
  },
  "AudioParam": {
    "docs": "The Web Audio API's `AudioParam` interface represents an audio-related parameter, usually a parameter of an `AudioNode` (such as `GainNode.gain`).\n\nAn `AudioParam` can be set to a specific value or a change in value, and can be scheduled to happen at a specific time and following a specific pattern.\n\nEach `AudioParam` has a list of events, initially empty, that define when and how values change. When this list is not empty, changes using the `AudioParam.value` attributes are ignored. This list of events allows us to schedule changes that have to happen at very precise times, using arbitrary timeline-based automation curves. The time used is the one defined in `AudioContext.currentTime`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/AudioParam.",
    "properties": {
      "cancelandholdattime": "Cancels all scheduled future changes to the `AudioParam` but holds its value at a given time until further changes are made using other methods.",
      "cancelscheduledvalues": "Cancels all scheduled future changes to the `AudioParam`.",
      "defaultvalue": "Represents the initial value of the attribute as defined by the specific `AudioNode` creating the `AudioParam`.",
      "exponentialramptovalueattime": "Schedules a gradual exponential change in the value of the `AudioParam`. The change starts at the time specified for the previous event, follows an exponential ramp to the new value given in the `value` parameter, and reaches the new value at the time given in the `endTime` parameter.",
      "linearramptovalueattime": "Schedules a gradual linear change in the value of the `AudioParam`. The change starts at the time specified for the previous event, follows a linear ramp to the new value given in the `value` parameter, and reaches the new value at the time given in the `endTime` parameter.",
      "maxvalue": "Represents the maximum possible value for the parameter's nominal (effective) range.",
      "minvalue": "Represents the minimum possible value for the parameter's nominal (effective) range.",
      "settargetattime": "Schedules the start of a change to the value of the `AudioParam`. The change starts at the time specified in `startTime` and exponentially moves towards the value given by the `target` parameter. The exponential decay rate is defined by the `timeConstant` parameter, which is a time measured in seconds.",
      "setvalueattime": "Schedules an instant change to the value of the `AudioParam` at a precise time, as measured against `AudioContext.currentTime`. The new value is given by the `value` parameter.",
      "setvaluecurveattime": "Schedules the values of the `AudioParam` to follow a set of values, defined by an array of floating-point numbers scaled to fit into the given interval, starting at a given start time and spanning a given duration of time.",
      "value": "Represents the parameter's current value as of the current time; initially set to the value of `defaultValue`."
    }
  },
  "AudioNode": {
    "docs": "The **`AudioNode`** interface is a generic interface for representing an audio processing module.\n\nExamples include:\n\n- an audio source (e.g. an HTML `<audio>` or `<video>` element, an `OscillatorNode`, etc.),\n- the audio destination,\n- intermediate processing module (e.g. a filter like `BiquadFilterNode` or `ConvolverNode`), or\n- volume control (like `GainNode`)\n\n**Note:** An `AudioNode` can be target of events, therefore it implements the `EventTarget` interface.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/AudioNode.",
    "properties": {
      "channelcount": "Represents an integer used to determine how many channels are used when up-mixing and down-mixing connections to any inputs to the node. Its usage and precise definition depend on the value of `AudioNode.channelCountMode`.",
      "channelcountmode": "Represents an enumerated value describing the way channels must be matched between the node's inputs and outputs.",
      "channelinterpretation": "Represents an enumerated value describing the meaning of the channels. This interpretation will define how audio up-mixing and down-mixing will happen.\n      The possible values are `\"speakers\"` or `\"discrete\"`.",
      "connect": "Allows us to connect the output of this node to be input into another node, either as audio data or as the value of an `AudioParam`.",
      "context": "Returns the associated `BaseAudioContext`, that is the object representing the processing graph the node is participating in.",
      "disconnect": "Allows us to disconnect the current node from another one it is already connected to.",
      "numberofinputs": "Returns the number of inputs feeding the node. Source nodes are defined as nodes having a `numberOfInputs` property with a value of `0`.",
      "numberofoutputs": "Returns the number of outputs coming out of the node. Destination nodes â like `AudioDestinationNode` â have a value of `0` for this attribute."
    }
  },
  "AudioParamMap": {
    "docs": "The **`AudioParamMap`** interface of the Web Audio API represents an iterable and read-only set of multiple audio parameters.\n\nAn `AudioParamMap` instance is a read-only `Map`-like object, in which each key is the name string for a parameter, and the corresponding value is an `AudioParam` containing the value of that parameter.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/AudioParamMap."
  },
  "AudioTrackList": {
    "docs": "The **`AudioTrackList`** interface is used to represent a list of the audio tracks contained within a given HTML media element, with each track represented by a separate `AudioTrack` object in the list.\n\nRetrieve an instance of this object with `HTMLMediaElement.audioTracks`. The individual tracks can be accessed using array syntax.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList."
  },
  "AudioListener": {
    "docs": "The `AudioListener` interface represents the position and orientation of the unique person listening to the audio scene, and is used in audio spatialization. All `PannerNode`s spatialize in relation to the `AudioListener` stored in the `BaseAudioContext.listener` attribute.\n\nIt is important to note that there is only one listener per context and that it isn't an `AudioNode`.\n\n\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/AudioListener.",
    "properties": {
      "forwardx": "Represents the horizontal position of the listener's forward direction in the same cartesian coordinate system as the position (`positionX`, `positionY`, and `positionZ`) values. The forward and up values are linearly independent of each other. The default is 0.",
      "forwardy": "Represents the vertical position of the listener's forward direction in the same cartesian coordinate system as the position (`positionX`, `positionY`, and `positionZ`) values. The forward and up values are linearly independent of each other. The default is 0.",
      "forwardz": "Represents the longitudinal (back and forth) position of the listener's forward direction in the same cartesian coordinate system as the position (`positionX`, `positionY`, and `positionZ`) values. The forward and up values are linearly independent of each other. The default is -1.",
      "positionx": "Represents the horizontal position of the listener in a right-hand cartesian coordinate system. The default is 0.",
      "positiony": "Represents the vertical position of the listener in a right-hand cartesian coordinate system. The default is 0.",
      "positionz": "Represents the longitudinal (back and forth) position of the listener in a right-hand cartesian coordinate system. The default is 0.",
      "setorientation": "Sets the orientation of the listener.",
      "setposition": "Sets the position of the listener.",
      "upx": "Represents the horizontal position of the top of the listener's head in the same cartesian coordinate system as the position (`positionX`, `positionY`, and `positionZ`) values. The forward and up values are linearly independent of each other. The default is 0.",
      "upy": "Represents the vertical position of the top of the listener's head in the same cartesian coordinate system as the position (`positionX`, `positionY`, and `positionZ`) values. The forward and up values are linearly independent of each other. The default is 1.",
      "upz": "Represents the longitudinal (back and forth) position of the top of the listener's head in the same cartesian coordinate system as the position (`positionX`, `positionY`, and `positionZ`) values. The forward and up values are linearly independent of each other. The default is 0."
    }
  },
  "AudioWorkletProcessor": {
    "docs": "The **`AudioWorkletProcessor`** interface of the Web Audio API represents an audio processing code behind a custom `AudioWorkletNode`. It lives in the `AudioWorkletGlobalScope` and runs on the Web Audio rendering thread. In turn, an `AudioWorkletNode` based on it runs on the main thread.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletProcessor."
  },
  "AudioWorkletNode": {
    "docs": "**Note:** Although the interface is available outside secure contexts, the `BaseAudioContext.audioWorklet` property is not, thus custom `AudioWorkletProcessor`s cannot be defined outside them.\n\nThe **`AudioWorkletNode`** interface of the Web Audio API represents a base class for a user-defined `AudioNode`, which can be connected to an audio routing graph along with other nodes. It has an associated `AudioWorkletProcessor`, which does the actual audio processing in a Web Audio rendering thread.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletNode.",
    "properties": {
      "parameters": "Returns an `AudioParamMap` â a collection of `AudioParam` objects. They are instantiated during the creation of the underlying `AudioWorkletProcessor`. If the `AudioWorkletProcessor` has a static `parameterDescriptors` getter, the `AudioParamDescriptor` array returned from it is used to create `AudioParam` objects on the `AudioWorkletNode`. With this mechanism it is possible to make your own `AudioParam` objects accessible from your `AudioWorkletNode`. You can then use their values in the associated `AudioWorkletProcessor`.",
      "port": "Returns a `MessagePort` used for bidirectional communication between the node and its associated `AudioWorkletProcessor`. The other end is available under the `port` property of the processor."
    }
  },
  "AudioSinkInfo": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`AudioSinkInfo`** interface of the Web Audio API represents information describing an `AudioContext`'s sink ID, retrieved via `AudioContext.sinkId`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/AudioSinkInfo."
  },
  "AudioTrack": {
    "docs": "The **`AudioTrack`** interface represents a single audio track from one of the HTML media elements, `<audio>` or `<video>`.\n\nThe most common use for accessing an `AudioTrack` object is to toggle its `enabled` property in order to mute and unmute the track.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/AudioTrack."
  },
  "AuthenticatorResponse": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`AuthenticatorResponse`** interface of the Web Authentication API is the base interface for interfaces that provide a cryptographic root of trust for a key pair. The child interfaces include information from the browser such as the challenge origin and either may be returned from `PublicKeyCredential.response`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/AuthenticatorResponse.",
    "properties": {
      "clientdatajson": "A JSON string in an `ArrayBuffer`, representing the client data that was passed to `CredentialsContainer.create()` or `CredentialsContainer.get()`."
    }
  },
  "BackgroundFetchEvent": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`BackgroundFetchEvent`** interface of the Background Fetch API is the event type for background fetch events dispatched on the `service worker global scope`.\n\nIt is the event type passed to `onbackgroundfetchabort` and `onbackgroundfetchclick`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/BackgroundFetchEvent.",
    "properties": {
      "registration": "Returns the `BackgroundFetchRegistration` that the event was initialized to."
    }
  },
  "AuthenticatorAssertionResponse": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`AuthenticatorAssertionResponse`** interface of the Web Authentication API contains a digital signature from the private key of a particular WebAuthn credential. The relying party's server can verify this signature to authenticate a user, for example when they sign in.\n\nAn `AuthenticatorAssertionResponse` object instance is available in the `response` property of a `PublicKeyCredential` object returned by a successful `navigator.credentials.get()` call.\n\nThis interface inherits from `AuthenticatorResponse`.\n\n**Note:** This interface is restricted to top-level contexts. Use from within an `<iframe>` element will not have any effect.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/AuthenticatorAssertionResponse.",
    "properties": {
      "authenticatordata": "An `ArrayBuffer` containing information from the authenticator such as the Relying Party ID Hash (rpIdHash), a signature counter, test of user presence and user verification flags, and any extensions processed by the authenticator.",
      "signature": "An assertion signature over `AuthenticatorAssertionResponse.authenticatorData` and `AuthenticatorResponse.clientDataJSON`. The assertion signature is created with the private key of the key pair that was created during the originating `navigator.credentials.create()` call and verified using the public key of that same key pair.",
      "userhandle": "An `ArrayBuffer` containing an opaque user identifier, specified as `user.id` in the options passed to the originating `navigator.credentials.create()` call."
    }
  },
  "BackgroundFetchManager": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`BackgroundFetchManager`** interface of the Background Fetch API is a map where the keys are background fetch IDs and the values are `BackgroundFetchRegistration` objects.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/BackgroundFetchManager."
  },
  "AudioWorkletGlobalScope": {
    "docs": "The **`AudioWorkletGlobalScope`** interface of the Web Audio API represents a global execution context for user-supplied code, which defines custom `AudioWorkletProcessor`-derived classes.\n\nEach `BaseAudioContext` has a single `AudioWorklet` available under the `audioWorklet` property, which runs its code in a single `AudioWorkletGlobalScope`.\n\nAs the global execution context is shared across the current `BaseAudioContext`, it's possible to define any other variables and perform any actions allowed in worklets â apart from defining `AudioWorkletProcessor` derived classes.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletGlobalScope."
  },
  "BackgroundFetchRegistration": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`BackgroundFetchRegistration`** interface of the Background Fetch API represents an individual background fetch.\n\nA `BackgroundFetchRegistration` instance is returned by the `BackgroundFetchManager.fetch()` or `BackgroundFetchManager.get()` methods, and therefore there has no constructor.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/BackgroundFetchRegistration.",
    "properties": {
      "abort": "Aborts the background fetch. Returns a `Promise` that resolves with `true` if the fetch was successfully aborted.",
      "downloaded": "A `number` containing the size in bytes that has been downloaded, initially `0`.",
      "downloadtotal": "A `number` containing the total size in bytes of this download. This is the value set when the background fetch was registered, or `0`.",
      "failurereason": "One of the following strings:\n\n| --- | --- |\n| `\"\"` | The background fetch has not completed, or was successful. |\n| `\"aborted\"` | The operation was cancelled by the user, or `abort()` was called. |\n| `\"bad-status\"` | A response had a not-ok status (a status outside the range 200-299). |\n| `\"fetch-error\"` | A fetch failed for other reasons, for example CORS, or a network failure. |\n| `\"quota-exceeded\"` | Storage quota was reached during the operation. |\n| `\"download-total-exceeded\"` | The provided `downloadTotal` was exceeded. This value was set when the background fetch was registered. |",
      "id": "A string containing the background fetch's ID.",
      "match": "Returns a single `BackgroundFetchRecord` object which is the first match for the arguments.",
      "matchall": "Returns a `Promise` that resolves with an array of `BackgroundFetchRecord` objects containing requests and responses.",
      "recordsavailable": "A `boolean` indicating whether the `recordsAvailable` flag is set.",
      "result": "Returns an empty string initially, on completion either the string `\"success\"` or `\"failure\"`.",
      "uploaded": "A `number` containing the size in bytes successfully sent, initially `0`.",
      "uploadtotal": "A `number` containing the total number of bytes to be uploaded."
    }
  },
  "BackgroundFetchRecord": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`BackgroundFetchRecord`** interface of the Background Fetch API represents an individual request and response.\n\nA `BackgroundFetchRecord` is created by the `BackgroundFetchRegistration.matchAll()` method, therefore there is no constructor for this interface.\n\nThere will be one `BackgroundFetchRecord` for each resource requested by `fetch()`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/BackgroundFetchRecord."
  },
  "AudioWorklet": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`AudioWorklet`** interface of the Web Audio API is used to supply custom audio processing scripts that execute in a separate thread to provide very low latency audio processing.\n\nThe worklet's code is run in the `AudioWorkletGlobalScope` global execution context, using a separate Web Audio thread which is shared by the worklet and other audio nodes.\n\nAccess the audio context's instance of `AudioWorklet` through the `BaseAudioContext.audioWorklet` property.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/AudioWorklet."
  },
  "AuthenticatorAttestationResponse": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`AuthenticatorAttestationResponse`** interface of the Web Authentication API is the result of a WebAuthn credential registration. It contains information about the credential that the server needs to perform WebAuthn assertions, such as its credential ID and public key.\n\nAn `AuthenticatorAttestationResponse` object instance is available in the `response` property of a `PublicKeyCredential` object returned by a successful `CredentialsContainer.create()` call.\n\nThis interface inherits from `AuthenticatorResponse`.\n\n**Note:** This interface is restricted to top-level contexts. Use of its features from within an `<iframe>` element will not have any effect.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/AuthenticatorAttestationResponse.",
    "properties": {
      "attestationobject": "An `ArrayBuffer` containing authenticator data and an attestation statement for a new key pair generated by the authenticator.",
      "getauthenticatordata": "Returns an `ArrayBuffer` containing the authenticator data contained within the `AuthenticatorAttestationResponse.attestationObject` property.",
      "getpublickey": "Returns an `ArrayBuffer` containing the DER `SubjectPublicKeyInfo` of the new credential (see [Subject Public Key Info](https://www.rfc-editor.org/rfc/rfc5280#section-4.1.2.7)), or `null` if this is not available.",
      "getpublickeyalgorithm": "Returns a number that is equal to a [COSE Algorithm Identifier](https://www.iana.org/assignments/cose/cose.xhtml#algorithms), representing the cryptographic algorithm used for the new credential.",
      "gettransports": "Returns an array of strings describing which transport methods (e.g., `usb`, `nfc`) are believed to be supported with the authenticator. The array may be empty if the information is not available."
    }
  },
  "BaseAudioContext": {
    "docs": "The `BaseAudioContext` interface of the Web Audio API acts as a base definition for online and offline audio-processing graphs, as represented by `AudioContext` and `OfflineAudioContext` respectively. You wouldn't use `BaseAudioContext` directly â you'd use its features via one of these two inheriting interfaces.\n\nA `BaseAudioContext` can be a target of events, therefore it implements the `EventTarget` interface.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext.",
    "properties": {
      "audioworklet": "Returns the `AudioWorklet` object, which can be used to create and manage `AudioNode`s in which JavaScript code implementing the `AudioWorkletProcessor` interface are run in the background to process audio data.",
      "createanalyser": "Creates an `AnalyserNode`, which can be used to expose audio time and frequency data and for example to create data visualizations.",
      "createbiquadfilter": "Creates a `BiquadFilterNode`, which represents a second order filter configurable as several different common filter types: high-pass, low-pass, band-pass, etc",
      "createbuffer": "Creates a new, empty `AudioBuffer` object, which can then be populated by data and played via an `AudioBufferSourceNode`.",
      "createbuffersource": "Creates an `AudioBufferSourceNode`, which can be used to play and manipulate audio data contained within an `AudioBuffer` object. `AudioBuffer`s are created using `AudioContext.createBuffer()` or returned by `AudioContext.decodeAudioData()` when it successfully decodes an audio track.",
      "createchannelmerger": "Creates a `ChannelMergerNode`, which is used to combine channels from multiple audio streams into a single audio stream.",
      "createchannelsplitter": "Creates a `ChannelSplitterNode`, which is used to access the individual channels of an audio stream and process them separately.",
      "createconstantsource": "Creates a `ConstantSourceNode` object, which is an audio source that continuously outputs a monaural (one-channel) sound signal whose samples all have the same value.",
      "createconvolver": "Creates a `ConvolverNode`, which can be used to apply convolution effects to your audio graph, for example a reverberation effect.",
      "createdelay": "Creates a `DelayNode`, which is used to delay the incoming audio signal by a certain amount. This node is also useful to create feedback loops in a Web Audio API graph.",
      "createdynamicscompressor": "Creates a `DynamicsCompressorNode`, which can be used to apply acoustic compression to an audio signal.",
      "creategain": "Creates a `GainNode`, which can be used to control the overall volume of the audio graph.",
      "createiirfilter": "Creates an `IIRFilterNode`, which represents a second order filter configurable as several different common filter types.",
      "createoscillator": "Creates an `OscillatorNode`, a source representing a periodic waveform. It basically generates a tone.",
      "createpanner": "Creates a `PannerNode`, which is used to spatialize an incoming audio stream in 3D space.",
      "createperiodicwave": "Creates a `PeriodicWave`, used to define a periodic waveform that can be used to determine the output of an `OscillatorNode`.",
      "createscriptprocessor": "Creates a `ScriptProcessorNode`, which can be used for direct audio processing via JavaScript.",
      "createstereopanner": "Creates a `StereoPannerNode`, which can be used to apply stereo panning to an audio source.",
      "createwaveshaper": "Creates a `WaveShaperNode`, which is used to implement non-linear distortion effects.",
      "currenttime": "Returns a double representing an ever-increasing hardware time in seconds used for scheduling. It starts at `0`.",
      "decodeaudiodata": "Asynchronously decodes audio file data contained in an `ArrayBuffer`. In this case, the `ArrayBuffer` is usually loaded from an `XMLHttpRequest`'s `response` attribute after setting the `responseType` to `arraybuffer`. This method only works on complete files, not fragments of audio files.",
      "destination": "Returns an `AudioDestinationNode` representing the final destination of all audio in the context. It can be thought of as the audio-rendering device.",
      "listener": "Returns the `AudioListener` object, used for 3D spatialization.",
      "samplerate": "Returns a float representing the sample rate (in samples per second) used by all nodes in this context. The sample-rate of an `AudioContext` cannot be changed.",
      "state": "Returns the current state of the `AudioContext`."
    }
  },
  "BeforeInstallPromptEvent": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\n**Non-standard:** This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n\nThe **`BeforeInstallPromptEvent`** is the interface of the `beforeinstallprompt` event fired at the `Window` object before a user is prompted to \"install\" a website to a home screen on mobile.\n\nThis interface inherits from the `Event` interface.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/BeforeInstallPromptEvent.",
    "properties": {
      "platforms": "Returns an array of string items containing the platforms on which the event was dispatched. This is provided for user agents that want to present a choice of versions to the user such as, for example, \"web\" or \"play\" which would allow the user to choose between a web version or an Android version.",
      "prompt": "Show a prompt asking the user if they want to install the app. This method returns a `Promise` that resolves to an object describing the user's choice when they were prompted to install the app.",
      "userchoice": "Returns a `Promise` that resolves to an object describing the user's choice when they were prompted to install the app."
    }
  },
  "BiquadFilterNode": {
    "docs": "The `BiquadFilterNode` interface represents a simple low-order filter, and is created using the `BaseAudioContext/createBiquadFilter` method. It is an `AudioNode` that can represent different kinds of filters, tone control devices, and graphic equalizers. A `BiquadFilterNode` always has exactly one input and one output.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode.",
    "properties": {
      "detune": "An a-rate `AudioParam` representing detuning of the frequency in [cents](https://en.wikipedia.org/wiki/Cent_%28music%29).",
      "frequency": "An a-rate `AudioParam`, a double representing a frequency in the current filtering algorithm measured in hertz (Hz).",
      "gain": "An a-rate `AudioParam`, a double representing the [gain](https://en.wikipedia.org/wiki/Gain) used in the current filtering algorithm.",
      "getfrequencyresponse": "From the current filter parameter settings this method calculates the frequency response for frequencies specified in the provided array of frequencies.",
      "q": "An a-rate `AudioParam`, a double representing a [Q factor](https://en.wikipedia.org/wiki/Q_factor), or quality factor.",
      "type": "A string value defining the kind of filtering algorithm the node is implementing."
    }
  },
  "BarcodeDetector": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Note:** This feature is available in Web Workers\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`BarcodeDetector`** interface of the Barcode Detection API allows detection of linear and two dimensional barcodes in images.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/BarcodeDetector.",
    "properties": {
      "barcodedetector": "Creates and returns a `BarcodeDetector` object, with optional `BarcodeDetectorOptions`."
    }
  },
  "BackgroundFetchUpdateUIEvent": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`BackgroundFetchUpdateUIEvent`** interface of the Background Fetch API is an event type for the `backgroundfetchsuccess` and `backgroundfetchfail` events, and provides a method for updating the title and icon of the app to inform a user of the success or failure of a background fetch.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/BackgroundFetchUpdateUIEvent.",
    "properties": {
      "updateui": "Updates the title and icon in the user interface to show the status of a background fetch. Resolves with a `Promise`."
    }
  },
  "BlobEvent": {
    "docs": "The **`BlobEvent`** interface of the MediaStream Recording API represents events associated with a `Blob`. These blobs are typically, but not necessarily, associated with media content.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/BlobEvent.",
    "properties": {
      "data": "A `Blob` representing the data associated with the event. The event was fired on the `EventTarget` because of something happening on that specific `Blob`.",
      "timecode": "A `DOMHighResTimeStamp` indicating the difference between the timestamp of the first chunk in data and the timestamp of the first chunk in the first BlobEvent produced by this recorder. Note that the timecode in the first produced BlobEvent does not need to be zero."
    }
  },
  "Bluetooth": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`Bluetooth`** interface of the Web Bluetooth API returns a\n  `Promise` to a `BluetoothDevice` object with the specified\n  options.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Bluetooth.",
    "properties": {
      "getavailability": "Returns a `Promise` that resolved to a boolean value indicating\n      whether the user-agent has the ability to support Bluetooth. Some user-agents let the\n      user configure an option that affects what is returned by this value. If this option\n      is set, that is the value returned by this method.",
      "getdevices": "Returns a `Promise` that resolved to an array of\n      `BluetoothDevice`s which the origin already obtained permission for via a\n      call to `Bluetooth.requestDevice()`.",
      "requestdevice": "Returns a `Promise` to a `BluetoothDevice` object with the\n      specified options."
    }
  },
  "Blob": {
    "docs": "**Note:** This feature is available in Web Workers\n\nThe **`Blob`** object represents a blob, which is a file-like object of immutable, raw data; they can be read as text or binary data, or converted into a `ReadableStream` so its methods can be used for processing the data.\n\nBlobs can represent data that isn't necessarily in a JavaScript-native format. The `File` interface is based on `Blob`, inheriting blob functionality and expanding it to support files on the user's system.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Blob.",
    "properties": {
      "arraybuffer": "Returns a promise that resolves with an `ArrayBuffer` containing the entire contents of the `Blob` as binary data.",
      "size": "The size, in bytes, of the data contained in the `Blob` object.",
      "slice": "Returns a new `Blob` object containing the data in the specified range of bytes of the blob on which it's called.",
      "stream": "Returns a `ReadableStream` that can be used to read the contents of the `Blob`.",
      "text": "Returns a promise that resolves with a string containing the entire contents of the `Blob` interpreted as UTF-8 text.",
      "type": "A string indicating the MIME type of the data contained in the `Blob`. If the type is unknown, this string is empty."
    }
  },
  "BluetoothDevice": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe BluetoothDevice interface of the Web Bluetooth API represents a Bluetooth device inside a particular script execution\n  environment.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/BluetoothDevice.",
    "properties": {
      "forget": "Provides a way for the page to revoke access to a device the user has granted access to.",
      "gatt": "A reference to the device's `BluetoothRemoteGATTServer`.",
      "id": "A string that uniquely identifies a device.",
      "name": "A string that provides a human-readable name for the device.",
      "watchadvertisements": "A `Promise` that resolves to `undefined` or is rejected with\n      an error if advertisements can't be shown for any reason."
    }
  },
  "BatteryManager": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe `BatteryManager` interface of the Battery Status API provides information about the system's battery charge level. The `navigator.getBattery()` method returns a promise that resolves with a `BatteryManager` interface.\n\nSince Chrome 103, the `BatteryManager` interface of Battery Status API only expose to secure context.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager.",
    "properties": {
      "charging": "A Boolean value indicating whether the battery is currently being charged.",
      "chargingtime": "A number representing the remaining time in seconds until the battery is fully charged, or 0 if the battery is already fully charged.",
      "dischargingtime": "A number representing the remaining time in seconds until the battery is completely discharged and the system suspends.",
      "level": "A number representing the system's battery charge level scaled to a value between 0.0 and 1.0."
    }
  },
  "BarProp": {
    "docs": "The **`BarProp`** interface of the `Document Object Model` represents the web browser user interface elements that are exposed to scripts in web pages. Each of the following interface elements are represented by a `BarProp` object.\n\n| --- | --- |\n| `Window.locationbar` | The browser location bar. |\n| `Window.menubar` | The browser menu bar. |\n| `Window.personalbar` | The browser personal bar. |\n| `Window.scrollbars` | The browser scrollbars. |\n| `Window.statusbar` | The browser status bar. |\n| `Window.toolbar` | The browser toolbar. |\n\nThe `BarProp` interface is not accessed directly, but via one of these elements.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/BarProp.",
    "properties": {
      "visible": "A `Boolean`, which is true if the bar represented by the used interface element is visible."
    }
  },
  "BeforeUnloadEvent": {
    "docs": "The **`BeforeUnloadEvent`** interface represents the event object for the `beforeunload` event, which is fired when the current window, contained document, and associated resources are about to be unloaded.\n\nSee the `beforeunload` event reference for detailed guidance on using this event.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/BeforeUnloadEvent."
  },
  "BluetoothRemoteGATTDescriptor": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe `BluetoothRemoteGATTDescriptor` interface of the Web Bluetooth API provides a GATT Descriptor,\n  which provides further information about a characteristic's value.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTDescriptor.",
    "properties": {
      "characteristic": "Returns the `BluetoothRemoteGATTCharacteristic` this descriptor belongs\n      to.",
      "readvalue": "Returns a `Promise` that resolves to\n      an `ArrayBuffer` holding a duplicate of the `value` property\n      if it is available and supported. Otherwise it throws an error.",
      "uuid": "Returns the UUID of the characteristic descriptor, for\n      example '`00002902-0000-1000-8000-00805f9b34fb`' for theClient\n      Characteristic Configuration descriptor.",
      "value": "Returns the currently cached descriptor value. This value gets updated when the\n      value of the descriptor is read.",
      "writevalue": "Sets the value property to the bytes contained in an `ArrayBuffer` and\n      returns a `Promise`."
    }
  },
  "BluetoothUUID": {
    "docs": "The **`BluetoothUUID`** interface of the `Web Bluetooth API` provides a way to look up Universally Unique Identifier (UUID) values by name in the\n  [registry](https://www.bluetooth.com/specifications/assigned-numbers/) maintained by the Bluetooth SIG.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/BluetoothUUID.",
    "properties": {
      "canonicaluuid": "Returns the 128-bit UUID when passed the 16- or 32-bit UUID alias.",
      "getcharacteristic": "Returns the 128-bit UUID representing a registered characteristic when passed a name or the 16- or 32-bit UUID alias.",
      "getdescriptor": "Returns a UUID representing a registered descriptor when passed a name or the 16- or 32-bit UUID alias.",
      "getservice": "Returns a UUID representing a registered service when passed a name or the 16- or 32-bit UUID alias."
    }
  },
  "BluetoothRemoteGATTCharacteristic": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe `BluetoothRemoteGattCharacteristic` interface of the Web Bluetooth API represents a GATT Characteristic, which is a basic data element that provides further information about a peripheral's service.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTCharacteristic.",
    "properties": {
      "getdescriptor": "Returns a `Promise` that resolves to the first `BluetoothRemoteGATTDescriptor` for a given descriptor UUID.",
      "getdescriptors": "Returns a `Promise` that resolves to an `Array` of all `BluetoothRemoteGATTDescriptor` objects for a given descriptor UUID.",
      "properties": "Returns the properties of this characteristic.",
      "readvalue": "Returns a `Promise` that resolves to an `DataView` holding a duplicate of the `value` property if it is available and supported. Otherwise it throws an error.",
      "service": "Returns the `BluetoothRemoteGATTService` this characteristic belongs to.",
      "startnotifications": "Returns a `Promise` that resolves when `navigator.bluetooth` is added to the active notification context.",
      "stopnotifications": "Returns a `Promise` that resolves when `navigator.bluetooth` is removed from the active notification context.",
      "uuid": "Returns a string containing the UUID of the characteristic, for example `'00002a37-0000-1000-8000-00805f9b34fb'` for the Heart Rate Measurement characteristic.",
      "value": "The currently cached characteristic value. This value gets updated when the value of the characteristic is read or updated via a notification or indication.",
      "writevaluevalue": "Sets the `value` property to the bytes contained in a given `ArrayBuffer`, calls [`WriteCharacteristicValue`(this=`this`, value=value, response=`\"optional\"`)](https://webbluetoothcg.github.io/web-bluetooth/#writecharacteristicvalue), and returns the resulting `Promise`.",
      "writevaluewithoutresponsevalue": "Sets the `value` property to the bytes contained in a given `ArrayBuffer`, calls [`WriteCharacteristicValue`(this=`this`, value=value, response=`\"never\"`)](https://webbluetoothcg.github.io/web-bluetooth/#writecharacteristicvalue), and returns the resulting `Promise`.",
      "writevaluewithresponsevalue": "Sets the `value` property to the bytes contained in a given `ArrayBuffer`, calls [`WriteCharacteristicValue`(this=`this`, value=value, response=`\"required\"`)](https://webbluetoothcg.github.io/web-bluetooth/#writecharacteristicvalue), and returns the resulting `Promise`."
    }
  },
  "CDATASection": {
    "docs": "The **`CDATASection`** interface represents a CDATA section\n  that can be used within XML to include extended portions of unescaped text.\n  When inside a CDATA section, the symbols `<` and `&` don't need escaping\n  as they normally do.\n\nIn XML, a CDATA section looks like:\n\n```\n<![CDATA[ â¦ ]]>\n```\n\nFor example:\n\n```\n<foo>\n  Here is a CDATA section: <![CDATA[ < > & ]]> with all kinds of unescaped text.\n</foo>\n```\n\nThe only sequence which is not allowed within a CDATA section is the closing sequence\n  of a CDATA section itself, `]]>`.\n\n**Note:** CDATA sections should not be used within HTML they are considered as comments and not displayed.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CDATASection."
  },
  "BluetoothRemoteGATTService": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe `BluetoothRemoteGATTService` interface of the Web Bluetooth API represents a\n  service provided by a GATT server, including a device, a list of referenced services,\n  and a list of the characteristics of this service.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTService.",
    "properties": {
      "device": "Returns information about a Bluetooth device through an instance of\n      `BluetoothDevice`.",
      "getcharacteristic": "Returns a `Promise` to an instance of\n      `BluetoothRemoteGATTCharacteristic` for a given universally unique identifier\n      (UUID).",
      "getcharacteristics": "Returns a `Promise` to an `Array` of\n      `BluetoothRemoteGATTCharacteristic` instances for an optional universally\n      unique identifier (UUID).",
      "isprimary": "Returns a boolean value indicating whether this is a primary or secondary\n      service.",
      "uuid": "Returns a string representing the UUID of this service."
    }
  },
  "BluetoothCharacteristicProperties": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`BluetoothCharacteristicProperties`** interface of the Web Bluetooth API provides the operations that are valid on the given `BluetoothRemoteGATTCharacteristic`.\n\nThis interface is returned by calling `BluetoothRemoteGATTCharacteristic.properties`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/BluetoothCharacteristicProperties."
  },
  "CSPViolationReportBody": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe `CSPViolationReportBody` interface contains the report data for a Content Security Policy (CSP) violation. CSP violations are thrown when the webpage attempts to load a resource that violates the CSP set by the `Content-Security-Policy` HTTP header.\n\n**Note:** this interface is similar, but not identical to, the JSON objects sent back to the `report-uri` or `report-to` policy directive of the `Content-Security-Policy` header.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSPViolationReportBody.",
    "properties": {
      "blockedurl": "A string representing the URL of the resource that was blocked because it violates the CSP.",
      "columnnumber": "The column number in the script at which the violation occurred.",
      "disposition": "Indicates how the violated policy is configured to be treated by the user agent. This will be `\"enforce\"` or `\"report\"`.",
      "documenturl": "A string representing the URL of the document or worker in which the violation was found.",
      "effectivedirective": "A string representing the directive whose enforcement uncovered the violation.",
      "linenumber": "The line number in the script at which the violation occurred.",
      "originalpolicy": "A string containing the policy whose enforcement uncovered the violation.",
      "referrer": "A string representing the URL for the referrer of the resources whose policy was violated, or `null`.",
      "sample": "A string representing a sample of the resource that caused the violation, usually the first 40 characters. This will only be populated if the resource is an inline script, event handler, or style â external resources causing a violation will not generate a sample.",
      "sourcefile": "If the violation occurred as a result of a script, this will be the URL of the script; otherwise, it will be `null`. Both `columnNumber` and `lineNumber` should have non-null values if this property is not `null`.",
      "statuscode": "A number representing the HTTP status code of the document or worker in which the violation occurred.",
      "tojson": "A serializer which returns a JSON representation of the `CSPViolationReportBody` object."
    }
  },
  "CSSAnimation": {
    "docs": "The **`CSSAnimation`** interface of the Web Animations API represents an `Animation` object.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSAnimation.",
    "properties": {
      "animationname": "Returns the animation name as a string."
    }
  },
  "CSSContainerRule": {
    "docs": "The **`CSSContainerRule`** interface represents a single CSS `@container` rule.\n\nAn object of this type can be used to get the query conditions for the `@container`, along with the container name if one is defined.\n  Note that the container name and query together define the \"condition text\", which can be obtained using `CSSConditionRule.conditionText`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSContainerRule.",
    "properties": {
      "containername": "Returns a string representing the name of an `@container`, or an empty string.",
      "containerquery": "Returns a string representing the set of features or \"container conditions\" that are evaluated to determine if the styles in the associated `@container` are applied."
    }
  },
  "BluetoothRemoteGATTServer": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`BluetoothRemoteGATTServer`** interface of the Web Bluetooth API represents a GATT\n  Server on a remote device.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTServer.",
    "properties": {
      "connect": "Causes the script execution environment to connect to `this.device`.",
      "connected": "A boolean value that returns true while this script execution environment is\n      connected to `this.device`. It can be false while the user agent is\n      physically connected.",
      "device": "A reference to the `BluetoothDevice` running the server.",
      "disconnect": "Causes the script execution environment to disconnect from `this.device`.",
      "getprimaryservice": "Returns a promise to the primary `BluetoothRemoteGATTService` offered by the\n      Bluetooth device for a specified `BluetoothServiceUUID`.",
      "getprimaryservices": "Returns a promise to a list of primary `BluetoothRemoteGATTService` objects\n      offered by the Bluetooth device for a specified `BluetoothServiceUUID`."
    }
  },
  "ByteLengthQueuingStrategy": {
    "docs": "The **`ByteLengthQueuingStrategy`** interface of the Streams API provides a built-in byte length queuing strategy that can be used when constructing streams.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ByteLengthQueuingStrategy.",
    "properties": {
      "highwatermark": "The total number of bytes that can be contained in the internal queue before backpressure is applied.",
      "size": "Returns the given chunk's `byteLength` property."
    }
  },
  "CSSFontFeatureValuesRule": {
    "docs": "The **`CSSFontFeatureValuesRule`** interface represents an `@font-feature-values` at-rule, letting developers assign for each font face a common name to specify features indices to be used in `font-variant-alternates`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSFontFeatureValuesRule.",
    "properties": {
      "fontfamily": "A string that identifies the font family this rule applies to."
    }
  },
  "CSSConditionRule": {
    "docs": "An object implementing the **`CSSConditionRule`** interface represents a single condition CSS at-rule, which consists of a condition and a statement block.\n\nThree objects derive from `CSSConditionRule`: `CSSMediaRule`, `CSSContainerRule` and `CSSSupportsRule`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSConditionRule.",
    "properties": {
      "conditiontext": "Represents the text of the condition of the rule."
    }
  },
  "BroadcastChannel": {
    "docs": "The **`BroadcastChannel`** interface represents a named channel that any browsing context of a given origin can subscribe to. It allows communication between different documents (in different windows, tabs, frames or iframes) of the same origin. Messages are broadcasted via a `message` event fired at all `BroadcastChannel` objects listening to the channel, except the object that sent the message.\n\n**Note:** This feature is available in Web Workers\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel.",
    "properties": {
      "close": "Closes the channel object, indicating it won't get any new messages, and allowing it to be, eventually, garbage collected.",
      "name": "Returns a string, the name of the channel.",
      "postmessage": "Sends the message, of any type of object, to each `BroadcastChannel` object listening to the same channel."
    }
  },
  "CSSFontPaletteValuesRule": {
    "docs": "The **`CSSFontPaletteValuesRule`** interface represents an `@font-palette-values` at-rule.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSFontPaletteValuesRule.",
    "properties": {
      "basepalette": "A string indicating the base palette associated with the rule.",
      "fontfamily": "A string indicating the font families on which the rule has to be applied.",
      "name": "A string with the name of the font palette.",
      "overridecolors": "A string indicating the colors of the base palette that are overwritten and the new colors."
    }
  },
  "CSS": {
    "docs": "The **`CSS`** interface holds useful CSS-related methods. No objects with this interface are implemented: it contains only static methods and is therefore a utilitarian interface.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSS.",
    "properties": {
      "escape": "Can be used to escape a string mostly for use as part of a CSS selector.",
      "highlights": "Provides access to the `HighlightRegistry` used to style arbitrary text ranges using the CSS Custom Highlight API.",
      "paintworklet": "Provides access to the Worklet responsible for all the classes related to painting.",
      "registerproperty": "Registers `custom properties`, allowing for property type checking, default values, and properties that do or do not inherit their value.",
      "supports": "Returns a boolean value indicating if the pair property-value, or the condition, given in parameter is supported."
    }
  },
  "CSSGroupingRule": {
    "docs": "The **`CSSGroupingRule`** interface of the CSS Object Model represents any CSS at-rule that contains other rules nested within it.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSGroupingRule.",
    "properties": {
      "cssrules": "Returns a `CSSRuleList` of the CSS rules in the media rule.",
      "deleterule": "Deletes a rule from the style sheet.",
      "insertrule": "Inserts a new style rule into the current style sheet."
    }
  },
  "CSSFontFaceRule": {
    "docs": "The **`CSSFontFaceRule`** interface represents an `@font-face` at-rule.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSFontFaceRule.",
    "properties": {
      "style": "Returns a `CSSStyleDeclaration`."
    }
  },
  "CSSCounterStyleRule": {
    "docs": "The **`CSSCounterStyleRule`** interface represents an `@counter-style` at-rule.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSCounterStyleRule.",
    "properties": {
      "additivesymbols": "A string object that contains the serialization of the `additive-symbols` descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string.",
      "fallback": "A string object that contains the serialization of the `fallback` descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string.",
      "name": "A string object that contains the serialization of the `<custom-ident>` defined as the `name` for the associated rule.",
      "negative": "A string object that contains the serialization of the `negative` descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string.",
      "pad": "A string object that contains the serialization of the `pad` descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string.",
      "prefix": "A string object that contains the serialization of the `prefix` descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string.",
      "range": "A string object that contains the serialization of the `range` descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string.",
      "speakas": "A string object that contains the serialization of the `speak-as` descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string.",
      "suffix": "A string object that contains the serialization of the `suffix` descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string.",
      "symbols": "A string object that contains the serialization of the `symbols` descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string.",
      "system": "A string object that contains the serialization of the `system` descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string."
    }
  },
  "CSSKeyframeRule": {
    "docs": "The **`CSSKeyframeRule`** interface describes an object representing a set of styles for a given keyframe. It corresponds to the contents of a single keyframe of a `@keyframes` at-rule.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSKeyframeRule.",
    "properties": {
      "keytext": "Represents the key of the keyframe, like `'10%'`, `'75%'`. The `from` keyword maps to `'0%'` and the `to` keyword maps to `'100%'`.",
      "style": "Returns a `CSSStyleDeclaration` of the CSS style associated with the keyframe."
    }
  },
  "CSSLayerBlockRule": {
    "docs": "The **`CSSLayerBlockRule`** represents a `@layer` block rule. It is a grouping at-rule meaning that it can contain other rules, and is associated to a given cascade layer, identified by its name.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSLayerBlockRule."
  },
  "CSSMathInvert": {
    "docs": "The **`CSSMathInvert`** interface of the CSS_Object_Model#css_typed_object_model represents a CSS `calc()` used as `calc(1 / <value>).` It inherits properties and methods from its parent `CSSNumericValue`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSMathInvert.",
    "properties": {
      "value": "Returns a `CSSNumericValue` object."
    }
  },
  "CSSKeyframesRule": {
    "docs": "The **`CSSKeyframesRule`** interface describes an object representing a complete set of keyframes for a CSS animation. It corresponds to the contents of a whole `@keyframes` at-rule.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSKeyframesRule.",
    "properties": {
      "appendrule": "Inserts a new keyframe rule into the current CSSKeyframesRule. The parameter is a string containing a keyframe in the same format as an entry of a `@keyframes` at-rule. If it contains more than one keyframe rule, a `DOMException` with a `SYNTAX_ERR` is thrown.",
      "cssrules": "Returns a `CSSRuleList` of the keyframes in the list.",
      "deleterule": "Deletes a keyframe rule from the current CSSKeyframesRule. The parameter is the index of the keyframe to be deleted, expressed as a string resolving as a number between `0%` and `100%`.",
      "findrule": "Returns a keyframe rule corresponding to the given key. The key is a string containing an index of the keyframe to be returned, resolving to a percentage between `0%` and `100%`. If no such keyframe exists, `findRule` returns `null`.",
      "name": "Represents the name of the keyframes, used by the `animation-name` property."
    }
  },
  "CSSImageValue": {
    "docs": "The **`CSSImageValue`** interface of the CSS Typed Object Model API represents values for properties that take an image, for example `background-image`, `list-style-image`, or `border-image-source`.\n\nThe CSSImageValue object represents an `<image>` that involves a URL, such as `url()` or `image()`, but not `linear-gradient()` or `element()`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSImageValue."
  },
  "CSSImportRule": {
    "docs": "The **`CSSImportRule`** interface represents an `@import` at-rule.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSImportRule.",
    "properties": {
      "href": "Returns the URL specified by the `@import` rule.",
      "layername": "Returns the name of the cascade layer declared in the `@import` rule, the empty string if the layer is anonymous, the or `null` if the rule doesn't declare any.",
      "media": "Returns the value of the `media` attribute of the associated stylesheet.",
      "stylesheet": "Returns the associated stylesheet.",
      "supportstext": "Returns the supports condition specified by the `@import` rule."
    }
  },
  "CSSMathNegate": {
    "docs": "The **`CSSMathNegate`** interface of the CSS_Object_Model#css_typed_object_model negates the value passed into it. It inherits properties and methods from its parent `CSSNumericValue`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSMathNegate.",
    "properties": {
      "value": "Returns a `CSSNumericValue` object."
    }
  },
  "CSSKeywordValue": {
    "docs": "The **`CSSKeywordValue`** interface of the CSS Typed Object Model API creates an object to represent CSS keywords and other identifiers.\n\nThe interface instance name is a stringifier meaning that when used anywhere a string is expected it will return the value of `CSSKeyword.value`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSKeywordValue.",
    "properties": {
      "value": "Returns or sets the value of the `CSSKeywordValue`."
    }
  },
  "CSSMathProduct": {
    "docs": "The **`CSSMathProduct`** interface of the CSS_Object_Model#css_typed_object_model represents the result obtained by calling `add()`, `sub()`, or `toSum()` on `CSSNumericValue`. It inherits properties and methods from its parent `CSSNumericValue`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSMathProduct.",
    "properties": {
      "values": "Returns a `CSSNumericArray` object which contains one or more `CSSNumericValue` objects."
    }
  },
  "CSSMathSum": {
    "docs": "The **`CSSMathSum`** interface of the CSS_Object_Model#css_typed_object_model represents the result obtained by calling `add()`, `sub()`, or `toSum()` on `CSSNumericValue`.\n\nA CSSMathSum is the object type returned when the `StylePropertyMapReadOnly.get()` method is used on a CSS property whose value is created with a `calc()` function.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSMathSum.",
    "properties": {
      "values": "Returns a `CSSNumericArray` object which contains one or more `CSSNumericValue` objects."
    }
  },
  "CSSLayerStatementRule": {
    "docs": "The **`CSSLayerStatementRule`** represents a `@layer` statement rule. Unlike `CSSLayerBlockRule`, it doesn't contain other rules and merely defines one or several layers by providing their names.\n\nThis rule allows to explicitly declare the ordering layer that is in an apparent way at the beginning of a CSS file: the layer order is defined by the order of first occurrence of each layer name. Declaring them with a statement allows the reader to understand the layer order. It also allows inline and imported layers to be interleaved, which is not possible when using the `CSSLayerBlockRule` syntax.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSLayerStatementRule."
  },
  "CSSMatrixComponent": {
    "docs": "The **`CSSMatrixComponent`** interface of the CSS_Object_Model#css_typed_object_model represents the matrix() and matrix3d() values of the individual `transform` property in CSS. It inherits properties and methods from its parent `CSSTransformValue`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSMatrixComponent."
  },
  "CSSNumericArray": {
    "docs": "The **`CSSNumericArray`** interface of the CSS_Object_Model#css_typed_object_model contains a list of `CSSNumericValue` objects.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSNumericArray.",
    "properties": {
      "length": "Returns how many `CSSNumericValue` objects are contained within the `CSSNumericArray`."
    }
  },
  "CSSMathValue": {
    "docs": "The **`CSSMathValue`** interface of the CSS_Object_Model#css_typed_object_model a base class for classes representing complex numeric values.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSMathValue.",
    "properties": {
      "operator": "Indicates the operator that the current subtype represents."
    }
  },
  "CSSMathMax": {
    "docs": "The **`CSSMathMax`** interface of the CSS_Object_Model#css_typed_object_model represents the CSS `max()` function. It inherits properties and methods from its parent `CSSNumericValue`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSMathMax.",
    "properties": {
      "values": "Returns a `CSSNumericArray` object which contains one or more `CSSNumericValue` objects."
    }
  },
  "CSSNumericValue": {
    "docs": "The **`CSSNumericValue`** interface of the CSS Typed Object Model API represents operations that all numeric values can perform.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSNumericValue.",
    "properties": {
      "add": "Adds a supplied number to the `CSSNumericValue`.",
      "div": "Divides the `CSSNumericValue` by the supplied value.",
      "equals": "True if all the values are the exact same type and value, in the same order. Otherwise, false.",
      "max": "Returns the maximum value passed",
      "min": "Returns the minimum value passed",
      "mul": "Multiplies the `CSSNumericValue` by the supplied value.",
      "parse": "Allows a `CSSNumericValue` to be constructed directly from a string containing CSS.",
      "sub": "Subtracts a supplied number from the `CSSNumericValue`.",
      "to": "Converts `value` into another one with the specified unit.",
      "tosum": "Converts an existing `CSSNumericValue` into a `CSSMathSum` object with values of a specified unit.",
      "type": "Returns the type of `CSSNumericValue`, one of `angle`, `flex`, `frequency`, `length`, `resolution`, `percent`, `percentHint`, or `time`."
    }
  },
  "CSSMathMin": {
    "docs": "The **`CSSMathMin`** interface of the CSS_Object_Model#css_typed_object_model represents the CSS `min()` function. It inherits properties and methods from its parent `CSSNumericValue`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSMathMin.",
    "properties": {
      "values": "Returns a `CSSNumericArray` object which contains one or more `CSSNumericValue` objects."
    }
  },
  "CSSPerspective": {
    "docs": "The **`CSSPerspective`** interface of the CSS_Object_Model#css_typed_object_model represents the perspective() value of the individual `transform` property in CSS. It inherits properties and methods from its parent `CSSTransformValue`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSPerspective."
  },
  "CSSPositionValue": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\n**Non-standard:** This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n\nThe **`CSSPositionValue`** interface of the CSS Typed Object Model API represents values for properties that take a position, for example `object-position`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSPositionValue.",
    "properties": {
      "x": "Returns the item's position along the web page's horizontal axis.",
      "y": "Returns the item's position along the vertical axis."
    }
  },
  "CSSPseudoElement": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`CSSPseudoElement`** interface represents a pseudo-element that may be the target of an event or animated using the Web Animations API. Instances of this interface may be obtained by calling `Element.pseudo()`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSPseudoElement.",
    "properties": {
      "element": "Returns the originating/parent `Element` of the pseudo-element.",
      "type": "Returns the pseudo-element selector as a string."
    }
  },
  "CSSMediaRule": {
    "docs": "The **`CSSMediaRule`** interface represents a single CSS `@media` rule.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSMediaRule.",
    "properties": {
      "media": "Returns a `MediaList` representing the intended destination medium for style information."
    }
  },
  "CSSRotate": {
    "docs": "The **`CSSRotate`** interface of the CSS_Object_Model#css_typed_object_model represents the rotate value of the individual `transform` property in CSS. It inherits properties and methods from its parent `CSSTransformValue`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSRotate."
  },
  "CSSPrimitiveValue": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe **`CSSPrimitiveValue`** interface derives from the `CSSValue` interface and represents the current computed value of a CSS property.\n\n**Note:** This interface was part of an attempt to create a typed CSS Object Model. This attempt has been abandoned, and most browsers do\n    not implement it.\nTo achieve your purpose, you can use:\n- the untyped CSS Object Model, widely supported, or\n- the modern CSS Typed Object Model API, less supported and considered experimental.\n\nThis interface represents a single CSS value. It may be used to determine the value of a specific style property currently set in a block or to set a specific style property explicitly within the block. An instance of this interface might be obtained from the `getPropertyCSSValue()` method of the `CSSStyleDeclaration` interface. A `CSSPrimitiveValue` object only occurs in a context of a CSS property.\n\nConversions are allowed between absolute values (from millimeters to centimeters, from degrees to radians, and so on) but not between relative values. (For example, a pixel value cannot be converted to a centimeter value.) Percentage values can't be converted since they are relative to the parent value (or another property value). There is one exception for color percentage values: since a color percentage value is relative to the range 0-255, a color percentage value can be converted to a number (see also the `RGBColor` interface).\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSPrimitiveValue.",
    "properties": {
      "getcountervalue": "This method is used to get the counter value. If this CSS value doesn't contain a counter value, a `DOMException` is raised. Modification to the corresponding style property can be achieved using the `Counter` interface.",
      "getfloatvalue": "This method is used to get a float value in a specified unit. If this CSS value doesn't contain a float value or can't be converted into the specified unit, a `DOMException` is raised.",
      "getrectvalue": "This method is used to get the Rect value. If this CSS value doesn't contain a rect value, a `DOMException` is raised. Modification to the corresponding style property can be achieved using the `Rect` interface.",
      "getrgbcolorvalue": "This method is used to get the RGB color. If this CSS value doesn't contain a RGB color value, a `DOMException` is raised. Modification to the corresponding style property can be achieved using the `RGBColor` interface.",
      "getstringvalue": "This method is used to get the string value. If the CSS value doesn't contain a string value, a `DOMException` is raised.",
      "primitivetype": "An `unsigned short` representing the type of the value. Possible values are:",
      "setfloatvalue": "A method to set the float value with a specified unit. If the property attached with this value can not accept the specified unit or the float value, the value will be unchanged and a `DOMException` will be raised.",
      "setstringvalue": "A method to set the string value with the specified unit. If the property attached to this value can't accept the specified unit or the string value, the value will be unchanged and a `DOMException` will be raised."
    }
  },
  "CSSRule": {
    "docs": "The **`CSSRule`** interface represents a single CSS rule. There are several types of rules which inherit properties from `CSSRule`.\n\n- `CSSGroupingRule`\n- `CSSStyleRule`\n- `CSSImportRule`\n- `CSSMediaRule`\n- `CSSFontFaceRule`\n- `CSSPageRule`\n- `CSSNamespaceRule`\n- `CSSKeyframesRule`\n- `CSSKeyframeRule`\n- `CSSCounterStyleRule`\n- `CSSSupportsRule`\n- `CSSFontFeatureValuesRule`\n- `CSSFontPaletteValuesRule`\n- `CSSLayerBlockRule`\n- `CSSLayerStatementRule`\n- `CSSPropertyRule`\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSRule.",
    "properties": {
      "csstext": "Represents the textual representation of the rule, e.g. \"`h1,h2 { font-size: 16pt }`\" or \"`@import 'url'`\". To access or modify parts of the rule (e.g. the value of \"font-size\" in the example) use the properties on the specialized interface for the rule's type.",
      "parentrule": "Returns the containing rule, otherwise `null`. E.g. if this rule is a style rule inside an `@media` block, the parent rule would be that `CSSMediaRule`.",
      "parentstylesheet": "Returns the `CSSStyleSheet` object for the style sheet that contains this rule",
      "type": "Returns one of the Type constants to determine which type of rule is represented."
    }
  },
  "CSSPageRule": {
    "docs": "**`CSSPageRule`** represents a single CSS `@page` rule.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSPageRule.",
    "properties": {
      "selectortext": "Represents the text of the page selector associated with the at-rule.",
      "style": "Returns the declaration block associated with the at-rule."
    }
  },
  "CSSRuleList": {
    "docs": "A `CSSRuleList` represents an ordered collection of read-only `CSSRule` objects.\n\nWhile the `CSSRuleList` object is read-only, and cannot be directly modified, it is considered a `live` object, as the content can change over time.\n\nTo edit the underlying rules returned by `CSSRule` objects, use `CSSStyleSheet.insertRule()` and `CSSStyleSheet.deleteRule()`, which are methods of `CSSStyleSheet`.\n\nThe interface has no constructor. An instance of `CSSRuleList` is returned by `CSSStyleSheet.cssRules` and `CSSKeyframesRule.cssRules`.\n\n**Note:** This interface was an [attempt to create an unmodifiable list](https://stackoverflow.com/questions/74630989/why-use-domstringlist-rather-than-an-array/74641156#74641156) and only continues to be supported to not break code that's already using it. Modern APIs use types that wrap around ECMAScript array types instead, so you can treat them like ECMAScript arrays, and at the same time impose additional semantics on their usage (such as making their items read-only).\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSRuleList.",
    "properties": {
      "item": "Gets a single `CSSRule`.",
      "length": "Returns an integer representing the number of `CSSRule` objects in the collection."
    }
  },
  "CSSNamespaceRule": {
    "docs": "The **`CSSNamespaceRule`** interface describes an object representing a single CSS `@namespace` at-rule.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSNamespaceRule.",
    "properties": {
      "namespaceuri": "Returns a string containing the text of the URI of the given namespace.",
      "prefix": "Returns a string with the name of the prefix associated to this namespace. If there is no such prefix, returns an empty string."
    }
  },
  "CSSScopeRule": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`CSSScopeRule`** interface of the CSS Object Model represents a CSS `@scope` at-rule.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSScopeRule."
  },
  "CSSStartingStyleRule": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`CSSStartingStyleRule`** interface of the CSS Object Model represents a CSS `@starting-style` at-rule.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSStartingStyleRule."
  },
  "CSSPropertyRule": {
    "docs": "The **`CSSPropertyRule`** interface of the CSS Properties and Values API represents a single CSS `@property` rule.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSPropertyRule.",
    "properties": {
      "inherits": "Returns the inherit flag of the custom property.",
      "initialvalue": "Returns the initial value of the custom property.",
      "name": "Returns the name of the custom property.",
      "syntax": "Returns the literal syntax of the custom property."
    }
  },
  "CSSStyleDeclaration": {
    "docs": "The **`CSSStyleDeclaration`** interface represents an object that is a CSS declaration block, and exposes style information and various style-related methods and properties.\n\nA `CSSStyleDeclaration` object can be exposed using three different APIs:\n\n- Via `HTMLElement.style`, which deals with the inline styles of a single element (e.g., `<div style=\"â¦\">`).\n- Via the `CSSStyleSheet` API. For example, `document.styleSheets[0].cssRules[0].style` returns a `CSSStyleDeclaration` object on the first CSS rule in the document's first stylesheet.\n- Via `Window.getComputedStyle()`, which exposes the `CSSStyleDeclaration` object as a **read-only** interface.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration.",
    "properties": {
      "cssfloat": "Special alias for the `float` CSS property.",
      "csstext": "Textual representation of the declaration block, if and only if it is exposed via `HTMLElement.style`. Setting this attribute changes the inline style. If you want a text representation of a computed declaration block, you can get it with `JSON.stringify()`.",
      "getpropertycssvalue": "**Only supported via getComputedStyle in Firefox.** Returns the property value as a `CSSPrimitiveValue` or `null` for shorthand properties.",
      "getpropertypriority": "Returns the optional priority, \"important\".",
      "getpropertyvalue": "Returns the property value given a property name.",
      "item": "Returns a CSS property name by its index, or the empty string if the index is out-of-bounds.",
      "length": "The number of properties. See the `item()` method below.",
      "parentrule": "The containing `CSSRule`.",
      "removeproperty": "Removes a property from the CSS declaration block.",
      "setproperty": "Modifies an existing CSS property or creates a new CSS property in the declaration block."
    }
  },
  "CSSSkewY": {
    "docs": "The **`CSSSkewY`** interface of the CSS_Object_Model#css_typed_object_model represents the `skewY()` value of the individual `transform` property in CSS. It inherits properties and methods from its parent `CSSTransformValue`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSSkewY."
  },
  "CSSStyleRule": {
    "docs": "The **`CSSStyleRule`** interface represents a single CSS style rule.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleRule.",
    "properties": {
      "selectortext": "Returns the textual representation of the selector for this rule, e.g. `\"h1,h2\"`.",
      "style": "Returns the `CSSStyleDeclaration` object for the rule.",
      "stylemap": "Returns a `StylePropertyMap` object which provides access to the rule's property-value pairs."
    }
  },
  "CSSSkew": {
    "docs": "The **`CSSSkew`** interface of the CSS_Object_Model#css_typed_object_model is part of the `CSSTransformValue` interface. It represents the `skew()` value of the individual `transform` property in CSS.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSSkew."
  },
  "CSSSupportsRule": {
    "docs": "The **`CSSSupportsRule`** interface represents a single CSS `@supports` at-rule.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSSupportsRule."
  },
  "CSSStyleValue": {
    "docs": "The **`CSSStyleValue`** interface of the CSS Typed Object Model API is the base class of all CSS values accessible through the Typed OM API. An instance of this class may be used anywhere a string is expected.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleValue.",
    "properties": {
      "parse": "Sets a specific CSS property to the specified values and returns the first value as a `CSSStyleValue` object.",
      "parseall": "Sets all occurrences of a specific CSS property to the specified value and returns an array of `CSSStyleValue` objects, each containing one of the supplied values."
    }
  },
  "CSSScale": {
    "docs": "The **`CSSScale`** interface of the CSS_Object_Model#css_typed_object_model represents the scale() and scale3d() values of the individual `transform` property in CSS. It inherits properties and methods from its parent `CSSTransformValue`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSScale."
  },
  "CSSSkewX": {
    "docs": "The **`CSSSkewX`** interface of the CSS_Object_Model#css_typed_object_model represents the `skewX()` value of the individual `transform` property in CSS. It inherits properties and methods from its parent `CSSTransformValue`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSSkewX."
  },
  "CSSUnitValue": {
    "docs": "The **`CSSUnitValue`** interface of the CSS_Object_Model#css_typed_object_model represents values that contain a single unit type. For example, \"42px\" would be represented by a `CSSNumericValue`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSUnitValue.",
    "properties": {
      "unit": "Returns a string indicating the type of unit.",
      "value": "Returns a double indicating the number of units."
    }
  },
  "CSSStyleSheet": {
    "docs": "The **`CSSStyleSheet`** interface represents a single CSS stylesheet, and lets you inspect and modify the list of rules contained in the stylesheet. It inherits properties and methods from its parent, `StyleSheet`.\n\nA stylesheet consists of a collection of `CSSRule` objects representing each of the rules in the stylesheet. The rules are contained in a `CSSRuleList`, which can be obtained from the stylesheet's `cssRules` property.\n\nFor example, one rule might be a `CSSStyleRule` object containing a style such as:\n\n```\nh1,\nh2 {\n  font-size: 16pt;\n}\n```\n\nAnother rule might be an at-rule such as `@import` or `@media`, and so forth.\n\nSee the Obtaining a StyleSheet section for the various ways a `CSSStyleSheet` object can be obtained. A `CSSStyleSheet` object can also be directly constructed. The constructor, and the `CSSStyleSheet.replace()`, and `CSSStyleSheet.replaceSync()` methods are newer additions to the specification, enabling Constructable Stylesheets.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet.",
    "properties": {
      "cssrules": "Returns a live `CSSRuleList` which maintains an up-to-date list of the `CSSRule` objects that comprise the stylesheet.\n\n**Note:** In some browsers, if a stylesheet is loaded from a different domain, accessing `cssRules` results in a `SecurityError`.",
      "deleterule": "Deletes the rule at the specified index into the stylesheet's rule list.",
      "insertrule": "Inserts a new rule at the specified position in the stylesheet, given the textual representation of the rule.",
      "ownerrule": "If this stylesheet is imported into the document using an `@import` rule, the `ownerRule` property returns the corresponding `CSSImportRule`; otherwise, this property's value is `null`.",
      "replace": "Asynchronously replaces the content of the stylesheet and returns a `Promise` that resolves with the updated `CSSStyleSheet`.",
      "replacesync": "Synchronously replaces the content of the stylesheet."
    }
  },
  "CSSUnparsedValue": {
    "docs": "The **`CSSUnparsedValue`** interface of the CSS_Object_Model#css_typed_object_model represents property values that reference custom properties. It consists of a list of string fragments and variable references.\n\nCustom properties are represented by `CSSUnparsedValue` and `var()` references are represented using `CSSVariableReferenceValue`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSUnparsedValue.",
    "properties": {
      "entries": "Returns an array of a given object's own enumerable property `[key, value]` pairs in the same order as that provided by a `for...in` loop (the difference being that a for-in loop enumerates properties in the prototype chain as well).",
      "foreach": "Executes a provided function once for each element of the `CSSUnparsedValue` object.",
      "keys": "Returns a new array iterator object that contains the keys for each index in the `CSSUnparsedValue` object.",
      "length": "Returns the number of items in the `CSSUnparsedValue` object.",
      "values": "Returns a new array iterator object that contains the values for each index in the `CSSUnparsedValue` object."
    }
  },
  "CSSTransformValue": {
    "docs": "The **`CSSTransformValue`** interface of the CSS_Object_Model#css_typed_object_model represents `transform-list` values as used by the CSS `transform` property.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSTransformValue.",
    "properties": {
      "is2d": "Returns a boolean indicating whether the transform is 2D or 3D.",
      "length": "Returns how many transform components are contained within the `CSSTransformValue`.",
      "tomatrix": "Returns a new `DOMMatrix` object."
    }
  },
  "CSSValueList": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe **`CSSValueList`** interface derives from the `CSSValue` interface and provides the abstraction of an ordered collection of CSS values.\n\n**Note:** This interface was part of an attempt to create a typed CSS Object Model. This attempt has been abandoned, and most browsers do\n    not implement it.\nTo achieve your purpose, you can use:\n- the untyped CSS Object Model, widely supported, or\n- the modern CSS Typed Object Model API, less supported and considered experimental.\n\nSome properties allow an empty list in their syntax. In that case, these properties take the `none` identifier. So, an empty list means that the property has the value `none`.\n\nThe items in the `CSSValueList` are accessible via an integral index, starting from 0.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSValueList.",
    "properties": {
      "item": "This method is used to retrieve a `CSSValue` by ordinal index. The order in this collection represents the order of the values in the CSS style property. If index is greater than or equal to the number of values in the list, this returns `null`.",
      "length": "An `unsigned long` representing the number of `CSSValues` in the list."
    }
  },
  "CSSVariableReferenceValue": {
    "docs": "The **`CSSVariableReferenceValue`** interface of the CSS_Object_Model#css_typed_object_model allows you to create a custom name for a built-in CSS value. This object functionality is sometimes called a \"CSS variable\" and serves the same purpose as the `var()` function. The custom name must begin with two dashes.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSVariableReferenceValue.",
    "properties": {
      "fallback": "Returns the built-in CSS value for the custom name.",
      "variable": "Returns the custom name passed to the constructor."
    }
  },
  "Cache": {
    "docs": "The **`Cache`** interface provides a persistent storage mechanism for `Request` / `Response` object pairs that are cached in long lived memory. How long a `Cache` object lives is browser dependent, but a single origin's scripts can typically rely on the presence of a previously populated `Cache` object. Note that the `Cache` interface is exposed to windowed scopes as well as workers. You don't have to use it in conjunction with service workers, even though it is defined in the service worker spec.\n\nAn origin can have multiple, named `Cache` objects. You are responsible for implementing how your script (e.g. in a `ServiceWorker`) handles `Cache` updates. Items in a `Cache` do not get updated unless explicitly requested; they don't expire unless deleted. Use `CacheStorage.open()` to open a specific named `Cache` object and then call any of the `Cache` methods to maintain the `Cache`.\n\nYou are also responsible for periodically purging cache entries. Each browser has a hard limit on the amount of cache storage that a given origin can use. `Cache` quota usage estimates are available via the `StorageManager.estimate()` method. The browser does its best to manage disk space, but it may delete the `Cache` storage for an origin. The browser will generally delete all of the data for an origin or none of the data for an origin. Make sure to version caches by name and use the caches only from the version of the script that they can safely operate on. See Deleting old caches for more information.\n\n**Note:** The key matching algorithm depends on the [VARY header](https://www.fastly.com/blog/best-practices-using-vary-header) in the value. So matching a new key requires looking at both key and value for entries in the `Cache` object.\n\n**Note:** The caching API doesn't honor HTTP caching headers.\n\n**Note:** This feature is available in Web Workers\n\n**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Cache.",
    "properties": {
      "addallrequests": "Takes an array of URLs, retrieves them, and adds the resulting response objects to the given cache.",
      "addrequest": "Takes a URL, retrieves it and adds the resulting response object to the given cache. This is functionally equivalent to calling `fetch()`, then using `put()` to add the results to the cache.",
      "deleterequest_options": "Finds the `Cache` entry whose key is the request, returning a `Promise` that resolves to `true` if a matching `Cache` entry is found and deleted. If no `Cache` entry is found, the promise resolves to `false`.",
      "keysrequest_options": "Returns a `Promise` that resolves to an array of `Cache` keys.",
      "matchallrequest_options": "Returns a `Promise` that resolves to an array of all matching responses in the `Cache` object.",
      "matchrequest_options": "Returns a `Promise` that resolves to the response associated with the first matching request in the `Cache` object.",
      "putrequest_response": "Takes both a request and its response and adds it to the given cache."
    }
  },
  "CSSTransformComponent": {
    "docs": "The **`CSSTransformComponent`** interface of the CSS_Object_Model#css_typed_object_model is part of the `CSSTransformValue` interface.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSTransformComponent.",
    "properties": {
      "is2d": "Returns a boolean indicting whether the transform is 2D or 3D.",
      "tomatrix": "Returns a new `DOMMatrix` object.",
      "tostring": "A string in the form of a CSS `Transforms function`.\n\nThis will use the value of `is2D` to return either a 2D or 3D transform. For example if the component represents `CSSRotate` and `is2D` is false then the string returned will be in the form of the CSS transformation `rotate3D()` function. If true the string returned will be in the form of the 2-dimensional `rotate3D()` function."
    }
  },
  "CSSTransition": {
    "docs": "The **`CSSTransition`** interface of the Web Animations API represents an `Animation` object used for a CSS Transition.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSTransition.",
    "properties": {
      "transitionproperty": "Returns the transition CSS property name as a string."
    }
  },
  "CacheStorage": {
    "docs": "The **`CacheStorage`** interface represents the storage for `Cache` objects.\n\nThe interface:\n\n- Provides a master directory of all the named caches that can be accessed by a `ServiceWorker` or other type of worker or `window` scope (you're not limited to only using it with service workers).\n- Maintains a mapping of string names to corresponding `Cache` objects.\n\nUse `CacheStorage.open()` to obtain a `Cache` instance.\n\nUse `CacheStorage.match()` to check if a given `Request` is a key in any of the `Cache` objects that the `CacheStorage` object tracks.\n\nYou can access `CacheStorage` through the global `caches` property.\n\n**Note:** `CacheStorage` always rejects with a `SecurityError` on untrusted origins (i.e. those that aren't using HTTPS, although this definition will likely become more complex in the future.) When testing on Firefox, you can get around this by checking the **Enable Service Workers over HTTP (when toolbox is open)** option in the Firefox Devtools options/gear menu. Furthermore, because `CacheStorage` requires file-system access, it may be unavailable in private mode in Firefox.\n\n**Note:** `CacheStorage.match()` is a convenience method. Equivalent functionality to match a cache entry can be implemented by returning an array of cache names from `CacheStorage.keys()`, opening each cache with `CacheStorage.open()`, and matching the one you want with `Cache.match()`.\n\n**Note:** This feature is available in Web Workers\n\n**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage.",
    "properties": {
      "delete": "Finds the `Cache` object matching the `cacheName`, and if found, deletes the `Cache` object and returns a `Promise` that resolves to `true`. If no `Cache` object is found, it resolves to `false`.",
      "has": "Returns a `Promise` that resolves to `true` if a `Cache` object matching the `cacheName` exists.",
      "keys": "Returns a `Promise` that will resolve with an array containing strings corresponding to all of the named `Cache` objects tracked by the `CacheStorage`. Use this method to iterate over a list of all the `Cache` objects.",
      "match": "Checks if a given `Request` is a key in any of the `Cache` objects that the `CacheStorage` object tracks, and returns a `Promise` that resolves to that match.",
      "open": "Returns a `Promise` that resolves to the `Cache` object matching the `cacheName` (a new cache is created if it doesn't already exist.)"
    }
  },
  "CSSTranslate": {
    "docs": "The **`CSSTranslate`** interface of the CSS_Object_Model#css_typed_object_model represents the translate() value of the individual `transform` property in CSS. It inherits properties and methods from its parent `CSSTransformValue`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSTranslate."
  },
  "CanvasPattern": {
    "docs": "The **`CanvasPattern`** interface represents an [opaque object](https://en.wikipedia.org/wiki/Opaque_data_type) describing a pattern, based on an image, a canvas, or a video, created by the `CanvasRenderingContext2D.createPattern()` method.\n\nIt can be used as a `fillStyle` or `strokeStyle`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CanvasPattern.",
    "properties": {
      "settransform": "Applies a `DOMMatrix` representing a linear transform to the pattern."
    }
  },
  "CSSValue": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe **`CSSValue`** interface represents the current computed value of a CSS property.\n\n**Note:** This interface was part of an attempt to create a typed CSS Object Model. This attempt has been abandoned, and most browsers do\n    not implement it.\nTo achieve your purpose, you can use:\n- the untyped CSS Object Model, widely supported, or\n- the modern CSS Typed Object Model API, less supported and considered experimental.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CSSValue.",
    "properties": {
      "csstext": "A string representing the current value.",
      "cssvaluetype": "An `unsigned short` representing a code defining the type of the value. Possible values are:"
    }
  },
  "CaptureController": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`CaptureController`** interface provides methods that can be used to further manipulate a capture session separate from its initiation via `MediaDevices.getDisplayMedia()`.\n\nA `CaptureController` object is associated with a capture session by passing it into a `getDisplayMedia()` call as the value of the options object's `controller` property.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CaptureController."
  },
  "ChannelMergerNode": {
    "docs": "The `ChannelMergerNode` interface, often used in conjunction with its opposite, `ChannelSplitterNode`, reunites different mono inputs into a single output. Each input is used to fill a channel of the output. This is useful for accessing each channels separately, e.g. for performing channel mixing where gain must be separately controlled on each channel.\n\n\n\nIf `ChannelMergerNode` has one single output, but as many inputs as there are channels to merge; the number of inputs is defined as a parameter of its constructor and the call to `AudioContext.createChannelMerger()`. In the case that no value is given, it will default to `6`.\n\nUsing a `ChannelMergerNode`, it is possible to create outputs with more channels than the rendering hardware is able to process. In that case, when the signal is sent to the `AudioContext.listener` object, supernumerary channels will be ignored.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ChannelMergerNode."
  },
  "CanvasRenderingContext2D": {
    "docs": "The **`CanvasRenderingContext2D`** interface, part of the Canvas API, provides the 2D rendering context for the drawing surface of a `<canvas>` element.\n  It is used for drawing shapes, text, images, and other objects.\n\nThe interface's properties and methods are described in the reference section of this page.\n  The Canvas tutorial has more explanation, examples, and resources, as well.\n\nFor `OffscreenCanvas`, there is an equivalent interface that provides the rendering context.\n  The offscreen rendering context inherits most of the same properties and methods as the `CanvasRenderingContext2D` and is described in more detail in the `OffscreenCanvasRenderingContext2D` reference page.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D.",
    "properties": {
      "arc": "Adds a circular arc to the current path.",
      "arcto": "Adds an arc to the current path with the given control points and radius, connected to the previous point by a straight line.",
      "beginpath": "Starts a new path by emptying the list of sub-paths. Call this method when you want to create a new path.",
      "beziercurveto": "Adds a cubic BÃ©zier curve to the current path.",
      "canvas": "A read-only back-reference to the `HTMLCanvasElement`. Might be `null` if it is not associated with a `<canvas>` element.",
      "clearrect": "Sets all pixels in the rectangle defined by starting point (x, y) and size (width, height) to transparent black, erasing any previously drawn content.",
      "clip": "Creates a clipping path from the current sub-paths. Everything drawn after `clip()` is called appears inside the clipping path only. For an example, see Clipping paths in the Canvas tutorial.",
      "closepath": "Causes the point of the pen to move back to the start of the current sub-path. It tries to draw a straight line from the current point to the start. If the shape has already been closed or has only one point, this function does nothing.",
      "createconicgradient": "Creates a conic gradient around a point given by coordinates represented by the parameters.",
      "createimagedata": "Creates a new, blank `ImageData` object with the specified dimensions. All of the pixels in the new object are transparent black.",
      "createlineargradient": "Creates a linear gradient along the line given by the coordinates represented by the parameters.",
      "createpattern": "Creates a pattern using the specified image. It repeats the source in the directions specified by the repetition argument. This method returns a `CanvasPattern`.",
      "createradialgradient": "Creates a radial gradient given by the coordinates of the two circles represented by the parameters.",
      "direction": "Directionality. Possible values: `ltr`, `rtl`, `inherit` (default).",
      "drawfocusifneeded": "If a given element is focused, this method draws a focus ring around the current path.",
      "drawimage": "Draws the specified image. This method is available in multiple formats, providing a great deal of flexibility in its use.",
      "ellipse": "Adds an elliptical arc to the current path.",
      "fill": "Fills the current sub-paths with the current fill style.",
      "fillrect": "Draws a filled rectangle at (x, y) position whose size is determined by width and height.",
      "fillstyle": "Color or style to use inside shapes. Default `#000` (black).",
      "filltext": "Draws (fills) a given text at the given (x, y) position.",
      "filter": "Applies a CSS or SVG filter to the canvas, e.g., to change its brightness or blurriness.",
      "font": "Font setting. Default value `\"10px sans-serif\"`.",
      "fontkerning": "Font kerning. Possible values: `auto` (default), `normal`, `none`.",
      "fontstretch": "Font stretch. Possible values: `ultra-condensed`, `extra-condensed`, `condensed`, `semi-condensed`, `normal` (default), `semi-expanded`, `expanded`, `extra-expanded`, `ultra-expanded`.",
      "fontvariantcaps": "Font variant caps. Possible values: `normal` (default), `small-caps`, `all-small-caps`, `petite-caps`, `all-petite-caps`, `unicase`, `titling-caps`.",
      "getcontextattributes": "Returns an object containing the context attributes used by the browser. Context attributes can be requested when using `HTMLCanvasElement.getContext()` to create the 2D context.",
      "getimagedata": "Returns an `ImageData` object representing the underlying pixel data for the area of the canvas denoted by the rectangle which starts at (sx, sy) and has an sw width and sh height.",
      "getlinedash": "Returns the current line dash pattern array containing an even number of non-negative numbers.",
      "gettransform": "Retrieves the current transformation matrix being applied to the context.",
      "globalalpha": "Alpha value that is applied to shapes and images before they are composited onto the canvas. Default `1.0` (opaque).",
      "globalcompositeoperation": "With `globalAlpha` applied this sets how shapes and images are drawn onto the existing bitmap.",
      "imagesmoothingenabled": "Image smoothing mode; if disabled, images will not be smoothed if scaled.",
      "imagesmoothingquality": "Allows you to set the quality of image smoothing.",
      "iscontextlost": "Returns `true` if the rendering context was lost.",
      "iscontextlost_2": "Returns `true` if the rendering context was lost.",
      "ispointinpath": "Reports whether or not the specified point is contained in the current path.",
      "ispointinstroke": "Reports whether or not the specified point is inside the area contained by the stroking of a path.",
      "letterspacing": "Letter spacing. Default: `0px`.",
      "linecap": "Type of endings on the end of lines. Possible values: `butt` (default), `round`, `square`.",
      "linedashoffset": "Specifies where to start a dash array on a line.",
      "linejoin": "Defines the type of corners where two lines meet. Possible values: `round`, `bevel`, `miter` (default).",
      "lineto": "Connects the last point in the current sub-path to the specified (x, y) coordinates with a straight line.",
      "linewidth": "Width of lines. Default `1.0`.",
      "measuretext": "Returns a `TextMetrics` object.",
      "miterlimit": "Miter limit ratio. Default `10`.",
      "moveto": "Moves the starting point of a new sub-path to the (x, y) coordinates.",
      "putimagedata": "Paints data from the given `ImageData` object onto the bitmap. If a dirty rectangle is provided, only the pixels from that rectangle are painted.",
      "quadraticcurveto": "Adds a quadratic BÃ©zier curve to the current path.",
      "rect": "Creates a path for a rectangle at position (x, y) with a size that is determined by width and height.",
      "reset": "Resets the rendering context, including the backing buffer, the drawing state stack, path, and styles.",
      "resettransform": "Resets the current transform by the identity matrix.",
      "restore": "Restores the drawing style state to the last element on the 'state stack' saved by `save()`.",
      "rotate": "Adds a rotation to the transformation matrix. The angle argument represents a clockwise rotation angle and is expressed in radians.",
      "roundrect": "Creates a path for a rounded rectangle with a specified position, width, height, and corner radii.",
      "save": "Saves the current drawing style state using a stack so you can revert any change you make to it using `restore()`.",
      "scale": "Adds a scaling transformation to the canvas units by x horizontally and by y vertically.",
      "scrollpathintoview": "Scrolls the current path or a given path into the view.",
      "setlinedash": "Sets the current line dash pattern.",
      "settransform": "Resets the current transform to the identity matrix, and then invokes the `transform()` method with the same arguments.",
      "shadowblur": "Specifies the blurring effect. Default: `0`.",
      "shadowcolor": "Color of the shadow. Default: fully-transparent black.",
      "shadowoffsetx": "Horizontal distance the shadow will be offset. Default: `0`.",
      "shadowoffsety": "Vertical distance the shadow will be offset. Default: `0`.",
      "stroke": "Strokes the current sub-paths with the current stroke style.",
      "strokerect": "Paints a rectangle which has a starting point at (x, y) and has a w width and an h height onto the canvas, using the current stroke style.",
      "strokestyle": "Color or style to use for the lines around shapes. Default `#000` (black).",
      "stroketext": "Draws (strokes) a given text at the given (x, y) position.",
      "textalign": "Text alignment setting. Possible values: `start` (default), `end`, `left`, `right`, `center`.",
      "textbaseline": "Baseline alignment setting. Possible values: `top`, `hanging`, `middle`, `alphabetic` (default), `ideographic`, `bottom`.",
      "textrendering": "Text rendering. Possible values: `auto` (default), `optimizeSpeed`, `optimizeLegibility`, `geometricPrecision`.",
      "transform": "Multiplies the current transformation matrix with the matrix described by its arguments.",
      "translate": "Adds a translation transformation by moving the canvas and its origin x horizontally and y vertically on the grid.",
      "wordspacing": "Word spacing. Default value: `0px`"
    }
  },
  "CanMakePaymentEvent": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`CanMakePaymentEvent`** interface of the Payment Handler API is the event object for the `canmakepayment` event, fired on a payment app's service worker to check whether it is ready to handle a payment. Specifically, it is fired when the merchant website calls `new PaymentRequest()`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CanMakePaymentEvent."
  },
  "CanvasGradient": {
    "docs": "The **`CanvasGradient`** interface represents an [opaque object](https://en.wikipedia.org/wiki/Opaque_data_type) describing a gradient. It is returned by the methods `CanvasRenderingContext2D.createLinearGradient()`, `CanvasRenderingContext2D.createConicGradient()` or `CanvasRenderingContext2D.createRadialGradient()`.\n\nIt can be used as a `fillStyle` or `strokeStyle`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CanvasGradient.",
    "properties": {
      "addcolorstop": "Adds a new stop, defined by an `offset` and a `color`, to the gradient."
    }
  },
  "CanvasCaptureMediaStreamTrack": {
    "docs": "The **`CanvasCaptureMediaStreamTrack`** interface of the Media Capture and Streams API represents the video track contained in a `MediaStream` being generated from a `<canvas>` following a call to `HTMLCanvasElement.captureStream()`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CanvasCaptureMediaStreamTrack.",
    "properties": {
      "canvas": "Returns the `HTMLCanvasElement` object whose surface is captured in real-time.",
      "requestframe": "Manually forces a frame to be captured and sent to the stream. This lets applications that wish to specify the frame capture times directly do so, if they specified a `frameRate` of 0 when calling `captureStream()`."
    }
  },
  "ChannelSplitterNode": {
    "docs": "The `ChannelSplitterNode` interface, often used in conjunction with its opposite, `ChannelMergerNode`, separates the different channels of an audio source into a set of mono outputs. This is useful for accessing each channel separately, e.g. for performing channel mixing where gain must be separately controlled on each channel.\n\n\n\nIf your `ChannelSplitterNode` always has one single input, the amount of outputs is defined by a parameter on its constructor and the call to `AudioContext.createChannelSplitter()`. In the case that no value is given, it will default to `6`. If there are fewer channels in the input than there are outputs, supernumerary outputs are silent.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ChannelSplitterNode."
  },
  "Client": {
    "docs": "The `Client` interface represents an executable context such as a `Worker`, or a `SharedWorker`. `Window` clients are represented by the more-specific `WindowClient`. You can get `Client`/`WindowClient` objects from methods such as `Clients.matchAll()` and `Clients.get()`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Client.",
    "properties": {
      "frametype": "The client's frame type as a string. It can be `\"auxiliary\"`, `\"top-level\"`, `\"nested\"`, or `\"none\"`.",
      "id": "The universally unique identifier of the client as a string.",
      "postmessage": "Sends a message to the client.",
      "type": "The client's type as a string. It can be `\"window\"`, `\"worker\"`, or `\"sharedworker\"`.",
      "url": "The URL of the client as a string."
    }
  },
  "Clients": {
    "docs": "The `Clients` interface provides access to `Client` objects. Access it via ``self`.clients` within a service worker.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Clients.",
    "properties": {
      "claim": "Allows an active service worker to set itself as the `controller` for all clients within its `scope`.",
      "get": "Returns a `Promise` for a `Client` matching a given `id`.",
      "matchall": "Returns a `Promise` for an array of `Client` objects. An options argument allows you to control the types of clients returned.",
      "openwindow": "Opens a new browser window for a given URL and returns a `Promise` for the new `WindowClient`."
    }
  },
  "ClipboardEvent": {
    "docs": "The **`ClipboardEvent`** interface represents events providing information related to modification of the clipboard, that is `cut`, `copy`, and `paste` events.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ClipboardEvent.",
    "properties": {
      "clipboarddata": "A `DataTransfer` object containing the data affected by the user-initiated `cut`, `copy`, or `paste` operation, along with its MIME type."
    }
  },
  "Clipboard": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`Clipboard`** interface implements the Clipboard API, providingâif the user grants permissionâboth read and write access to the contents of the system clipboard. The Clipboard API can be used to implement cut, copy, and paste features within a web application.\n\nThe system clipboard is exposed through the global `Navigator.clipboard` property.\n\nCalls to the methods of the `Clipboard` object will not succeed if the user hasn't granted the needed permissions using the Permissions API and the `'clipboard-read'` or `'clipboard-write'` permission as appropriate.\n\n**Note:** In reality, at this time browser requirements for access to the clipboard vary significantly. Please see the section Clipboard availability for details.\n\nAll of the Clipboard API methods operate asynchronously; they return a `Promise` which is resolved once the clipboard access has been completed. The promise is rejected if clipboard access is denied.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Clipboard."
  },
  "Comment": {
    "docs": "The **`Comment`** interface represents textual notations within markup; although it is generally not visually shown, such comments are available to be read in the source view.\n\nComments are represented in HTML and XML as content between '`<!--`' and '`-->`'. In XML, like inside SVG or MathML markup, the character sequence '`--`' cannot be used within a comment.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Comment."
  },
  "CloseEvent": {
    "docs": "A `CloseEvent` is sent to clients using WebSockets when the connection is closed. This is delivered to the listener indicated by the `WebSocket` object's `onclose` attribute.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent.",
    "properties": {
      "code": "Returns an `unsigned short` containing the close code sent by the server.",
      "reason": "Returns a string indicating the reason the server closed the connection. This is specific to the particular server and sub-protocol.",
      "wasclean": "Returns a boolean value that Indicates whether or not the connection was cleanly closed."
    }
  },
  "CompressionStream": {
    "docs": "The **`CompressionStream`** interface of the Compression Streams API is an API for compressing a stream of data.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CompressionStream.",
    "properties": {
      "readable": "Returns the `ReadableStream` instance controlled by this object.",
      "writable": "Returns the `WritableStream` instance controlled by this object."
    }
  },
  "CaretPosition": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe `CaretPosition` interface represents the caret position, an indicator for the text insertion point. You can get a `CaretPosition` using the `Document.caretPositionFromPoint()` method.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CaretPosition.",
    "properties": {
      "getclientrect": "Returns the client rectangle for the caret range.",
      "offset": "Returns a `long` representing the character offset in the caret position node.",
      "offsetnode": "Returns a `Node` containing the found node at the caret's position."
    }
  },
  "ConstantSourceNode": {
    "docs": "The `ConstantSourceNode` interfaceâpart of the Web Audio APIârepresents an audio source (based upon `AudioScheduledSourceNode`) whose output is single unchanging value. This makes it useful for cases in which you need a constant value coming in from an audio source. In addition, it can be used like a constructible `AudioParam` by automating the value of its `offset` or by connecting another node to it; see Controlling multiple parameters with ConstantSourceNode.\n\nA `ConstantSourceNode` has no inputs and exactly one monaural (one-channel) output. The output's value is always the same as the value of the `offset` parameter.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ConstantSourceNode."
  },
  "CompositionEvent": {
    "docs": "The DOM **`CompositionEvent`** represents events that occur due to the user indirectly entering text.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent.",
    "properties": {
      "data": "Returns the characters generated by the input method that raised the event; its varies depending on the type of event that generated the `CompositionEvent` object.",
      "initcompositionevent": "Initializes the attributes of a `CompositionEvent` object.",
      "locale": "Returns the locale of current input method (for example, the keyboard layout locale if the composition is associated with IME)."
    }
  },
  "ContactAddress": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`ContactAddress`** interface of the Contact Picker API represents a physical address. Instances of this interface are retrieved from the `address` property of the objects returned by `ContactsManager.getProperties()`.\n\nIt may be useful to refer to the Universal Postal Union website's [Addressing S42 standard](https://www.upu.int/en/Postal-Solutions/Programmes-Services/Addressing-Solutions#addressing-s42-standard) materials, which provide information about international standards for postal addresses.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ContactAddress."
  },
  "CharacterData": {
    "docs": "The **`CharacterData`** abstract interface represents a `Node` object that contains characters. This is an abstract interface, meaning there aren't any objects of type `CharacterData`: it is implemented by other interfaces like `Text`, `Comment`, `CDATASection`, or `ProcessingInstruction`, which aren't abstract.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CharacterData.",
    "properties": {
      "after": "Inserts a set of `Node` objects or strings in the children list of the\n      `CharacterData`'s parent, just after the `CharacterData` object.",
      "appenddata": "Appends the given string to the `CharacterData.data` string; when this method returns, `data` contains the concatenated string.",
      "before": "Inserts a set of `Node` objects or strings in the children list of the\n      `CharacterData`'s parent, just before the `CharacterData` object.",
      "data": "A string representing the textual data contained in this object.",
      "deletedata": "Removes the specified amount of characters, starting at the specified offset, from the `CharacterData.data` string; when this method returns, `data` contains the shortened string.",
      "insertdata": "Inserts the specified characters, at the specified offset, in the `CharacterData.data` string; when this method returns, `data` contains the modified string.",
      "length": "Returns a number representing the size of the string contained in the object.",
      "nextelementsibling": "Returns the first `Element` that follows this node, and is a sibling.",
      "previouselementsibling": "Returns the first `Element` that precedes this node, and is a sibling.",
      "remove": "Removes the object from its parent children list.",
      "replacedata": "Replaces the specified amount of characters, starting at the specified offset, with the specified string; when this method returns, `data` contains the modified string.",
      "replacewith": "Replaces the characters in the children list of its parent with a set of `Node` objects or strings.",
      "substringdata": "Returns a string containing the part of `CharacterData.data` of the specified length and starting at the specified offset."
    }
  },
  "ContentIndex": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`ContentIndex`** interface of the Content Index API allows developers to register their offline enabled content with the browser.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ContentIndex.",
    "properties": {
      "add": "Registers an item with the content index.",
      "delete": "Unregisters an item from the currently indexed content.",
      "getall": "Returns a `Promise` that resolves with an iterable list of content index entries."
    }
  },
  "ContentVisibilityAutoStateChangeEvent": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`ContentVisibilityAutoStateChangeEvent`** interface is the event object for the `contentvisibilityautostatechange` event, which fires on any element with `content-visibility: auto` set on it when it starts or stops being relevant to the user and skipping its contents.\n\nWhile the element is not relevant (between the start and end events), the user agent skips an element's rendering, including layout and painting.\n  This can significantly improve page rendering speed.\n  The `contentvisibilityautostatechange` event provides a way for an app's code to also start or stop rendering processes (e.g. drawing on a `<canvas>`) when they are not needed, thereby conserving processing power.\n\nNote that even when hidden from view, element contents will remain semantically relevant (e.g. to assistive technology users), so this signal should not be used to skip significant semantic DOM updates.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ContentVisibilityAutoStateChangeEvent."
  },
  "ClipboardItem": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`ClipboardItem`** interface of the `Clipboard API` represents a single item format, used when reading or writing data via the `Clipboard API`. That is `clipboard.read()` and `clipboard.write()` respectively.\n\nThe benefit of having the **`ClipboardItem`** interface to represent data, is that it enables developers to cope with the varying scope of file types and data easily.\n\nAccess to the contents of the clipboard is gated behind the Permissions API: The `clipboard-write` permission is granted automatically to pages when they are in the active tab. The `clipboard-read` permission must be requested, which you can do by trying to read data from the clipboard.\n\n**Note:** To work with text see the `Clipboard.readText()` and `Clipboard.writeText()` methods of the `Clipboard` interface.\n\n**Note:** You can only pass in one clipboard item at a time.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ClipboardItem."
  },
  "ConvolverNode": {
    "docs": "The `ConvolverNode` interface is an `AudioNode` that performs a Linear Convolution on a given `AudioBuffer`, often used to achieve a reverb effect. A `ConvolverNode` always has exactly one input and one output.\n\n**Note:** For more information on the theory behind Linear Convolution, see the [Convolution article on Wikipedia](https://en.wikipedia.org/wiki/Convolution).\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ConvolverNode.",
    "properties": {
      "buffer": "A mono, stereo, or 4-channel `AudioBuffer` containing the (possibly multichannel) impulse response used by the `ConvolverNode` to create the reverb effect.",
      "normalize": "A boolean that controls whether the impulse response from the buffer will be scaled by an equal-power normalization when the `buffer` attribute is set, or not."
    }
  },
  "CookieStoreManager": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`CookieStoreManager`** interface of the Cookie Store API allows service workers to subscribe to cookie change events. Call `subscribe()` on a particular service worker registration to receive change events.\n\nA `CookieStoreManager` has an associated `ServiceWorkerRegistration`. Each service worker registration has a cookie change subscription list, which is a list of cookie change subscriptions each containing a name and URL. The methods in this interface allow the service worker to add and remove subscriptions from this list, and to get a list of all subscriptions.\n\nTo get a `CookieStoreManager`, call `ServiceWorkerRegistration.cookies`.\n\n**Note:** This feature is available in Web Workers\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CookieStoreManager.",
    "properties": {
      "getsubscriptions": "Returns a `Promise` which resolves to a list of the cookie change subscriptions for this service worker registration.",
      "subscribe": "Subscribes to changes to cookies. It returns a `Promise` which resolves when the subscription is successful.",
      "unsubscribe": "Unsubscribes the registered service worker from changes to cookies. It returns a `Promise` which resolves when the operation is successful."
    }
  },
  "CountQueuingStrategy": {
    "docs": "The **`CountQueuingStrategy`** interface of the Streams API provides a built-in chunk counting queuing strategy that can be used when constructing streams.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CountQueuingStrategy.",
    "properties": {
      "highwatermark": "The total number of chunks that can be contained in the internal queue before backpressure is applied.",
      "size": "Always returns `1`."
    }
  },
  "Credential": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`Credential`** interface of the Credential Management API provides information about an entity (usually a user) normally as a prerequisite to a trust decision.\n\n`Credential` objects may be of four different types:\n\n- `FederatedCredential`\n- `IdentityCredential`\n- `PasswordCredential`\n- `PublicKeyCredential`\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Credential.",
    "properties": {
      "id": "Returns a string containing the credential's identifier. This might be any one of a GUID, username, or email address.",
      "type": "Returns a string containing the credential's type. Valid values are `password`, `federated` and `public-key`. (For `PasswordCredential`, `FederatedCredential` and `PublicKeyCredential`)"
    }
  },
  "ContactsManager": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`ContactsManager`** interface of the `Contact Picker API` allows users to select entries from their contact list and share limited details of the selected entries with a website or application.\n\nThe `ContactsManager` is available through the global `navigator.contacts` property.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ContactsManager."
  },
  "CredentialsContainer": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`CredentialsContainer`** interface of the Credential Management API exposes methods to request credentials and notify the user agent when events such as successful sign in or sign out happen. This interface is accessible from `Navigator.credentials`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CredentialsContainer.",
    "properties": {
      "create": "Returns a `Promise` that resolves with a new `Credential` instance based on the provided options, or `null` if no `Credential` object can be created. In exceptional circumstances, the `Promise` may reject.",
      "get": "Returns a `Promise` that resolves with the `Credential` instance that matches the provided parameters.",
      "preventsilentaccess": "Sets a flag that specifies whether automatic log in is allowed for future visits to the current origin, then returns an empty `Promise`. For example, you might call this, after a user signs out of a website to ensure that they aren't automatically signed in on the next site visit. Earlier versions of the spec called this method `requireUserMediation()`. See Browser compatibility for support details.",
      "store": "Stores a set of credentials for a user, inside a provided `Credential` instance and returns that instance in a `Promise`."
    }
  },
  "Crypto": {
    "docs": "The **`Crypto`** interface represents basic cryptography features available in the current context.\n  It allows access to a cryptographically strong random number generator and to cryptographic primitives.\n\n**Note:** This feature is available in Web Workers\n\nThe Web Crypto API is accessed through the global `crypto` property, which is a `Crypto` object.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Crypto.",
    "properties": {
      "getrandomvalues": "Fills the passed `TypedArray` with cryptographically sound random values.",
      "randomuuid": "Returns a randomly generated, 36 character long v4 UUID.",
      "subtle": "Returns a `SubtleCrypto` object providing access to common cryptographic primitives, like hashing, signing, encryption, or decryption."
    }
  },
  "ContentIndexEvent": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`ContentIndexEvent`** interface of the content index defines the object used to represent the `contentdelete` event.\n\nThis event is sent to the global scope of a `ServiceWorker`. It contains the id of the indexed content to be removed.\n\nThe `contentdelete` event is only fired when the deletion happens due to interaction with the browser's built-in user interface. It is not fired when the `ContentIndex.delete` method is called.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ContentIndexEvent."
  },
  "CryptoKey": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`CryptoKey`** interface of the Web Crypto API represents a cryptographic key obtained from one of the `SubtleCrypto` methods `generateKey()`, `deriveKey()`, `importKey()`, or `unwrapKey()`.\n\nFor security reasons, the `CryptoKey` interface can only be used in a secure context.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey.",
    "properties": {
      "algorithm": "An object describing the algorithm for which this key can be used and any associated extra parameters.",
      "extractable": "A boolean value indicating whether or not the key may be extracted using `SubtleCrypto.exportKey()` or `SubtleCrypto.wrapKey()`.",
      "type": "The type of key the object represents. It may take one of the following values: `\"secret\"`, `\"private\"` or `\"public\"`.",
      "usages": "An `Array` of strings, indicating what can be done with the key. Possible values for array elements are `\"encrypt\"`, `\"decrypt\"`, `\"sign\"`, `\"verify\"`, `\"deriveKey\"`, `\"deriveBits\"`, `\"wrapKey\"`, and `\"unwrapKey\"`."
    }
  },
  "CookieChangeEvent": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`CookieChangeEvent`** interface of the Cookie Store API is the event type of the `change` event fired at a `CookieStore` when any cookie changes occur. A cookie change consists of a cookie and a type (either \"changed\" or \"deleted\").\n\nCookie changes that will cause the `CookieChangeEvent` to be dispatched are:\n\n- A cookie is newly created and not immediately removed. In this case `type` is \"changed\".\n- A cookie is newly created and immediately removed. In this case `type` is \"deleted\".\n- A cookie is removed. In this case `type` is \"deleted\".\n\n**Note:** A cookie that is replaced due to the insertion of another cookie with the same name, domain, and path, is ignored and does not trigger a change event.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CookieChangeEvent.",
    "properties": {
      "changed": "Returns an array containing one or more changed cookies.",
      "deleted": "Returns an array containing one or more deleted cookies."
    }
  },
  "CustomElementRegistry": {
    "docs": "The **`CustomElementRegistry`** interface provides methods for registering custom elements and querying registered elements. To get an instance of it, use the `window.customElements` property.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry.",
    "properties": {
      "define": "Defines a new custom element.",
      "get": "Returns the constructor for the named custom element, or `undefined` if the custom element is not defined.",
      "getname": "Returns the name for the already-defined custom element, or `null` if the custom element is not defined.",
      "upgrade": "Upgrades a custom element directly, even before it is connected to its shadow root.",
      "whendefined": "Returns an empty `Promise` that resolves when a custom element becomes defined with the given name. If such a custom element is already defined, the returned promise is immediately fulfilled."
    }
  },
  "CookieStore": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`CookieStore`** interface of the 'Cookie Store API' provides methods for getting and setting cookies asynchronously from either a page or a service worker.\n\nThe `CookieStore` is accessed via attributes in the global scope in a `Window` or `ServiceWorkerGlobalScope` context. Therefore there is no constructor.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CookieStore.",
    "properties": {
      "delete": "The `delete()` method deletes a cookie with the given name or options object, it returns a `Promise` that resolves when the deletion completes.",
      "get": "The `get()` method gets a single cookie with the given name or options object, it returns a `Promise` that resolves with details of a single cookie.",
      "getall": "The `getAll()` method gets all matching cookies, it returns a `Promise` that resolves with a list of cookies.",
      "set": "The `set()` method sets a cookie with the given name and value or options object, it returns a `Promise` that resolves when the cookie is set."
    }
  },
  "CustomStateSet": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`CustomStateSet`** interface of the Document Object Model stores a list of states for an autonomous custom element, and allows states to be added and removed from the set.\n\nThe interface can be used to expose the internal states of a custom element, allowing them to be used in CSS selectors by code that uses the element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CustomStateSet.",
    "properties": {
      "add": "Adds a value to the set, first checking that the value is a `<dashed-ident>`.",
      "clear": "Removes all elements from the `CustomStateSet` object.",
      "delete": "Removes one value from the `CustomStateSet` object.",
      "entries": "Returns a new iterator with the values for each element in the `CustomStateSet` in insertion order.",
      "foreach": "Executes a provided function for each value in the `CustomStateSet` object.",
      "has": "Returns a `Boolean` asserting whether an element is present with the given value.",
      "keys": "An alias for `CustomStateSet.values()`.",
      "size": "Returns the number of values in the `CustomStateSet`.",
      "values": "Returns a new iterator object that yields the values for each element in the `CustomStateSet` object in insertion order."
    }
  },
  "DOMException": {
    "docs": "The **`DOMException`** interface represents an abnormal event (called an **exception**) that occurs as a result of calling a method or accessing a property of a web API. This is how error conditions are described in web APIs.\n\nEach exception has a **name**, which is a short \"PascalCase\"-style string identifying the error or abnormal condition.\n\n`DOMException` is a Serializable object, so it can be cloned with `structuredClone()` or copied between Workers using `postMessage()`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/DOMException.",
    "properties": {
      "code": "Returns one of the legacy error code constants, or `0` if none match.",
      "message": "Returns a string representing a message or description associated with the given error name.",
      "name": "Returns a string that contains one of the strings associated with an error name."
    }
  },
  "CryptoKeyPair": {
    "docs": "The **`CryptoKeyPair`** dictionary of the Web Crypto API represents a key pair for an asymmetric cryptography algorithm, also known as a public-key algorithm.\n\nA `CryptoKeyPair` object can be obtained using `SubtleCrypto.generateKey()`, when the selected algorithm is one of the asymmetric algorithms: RSASSA-PKCS1-v1_5, RSA-PSS, RSA-OAEP, ECDSA, or ECDH.\n\nIt contains two properties, which are both `CryptoKey` objects: a `privateKey` property containing the private key and a `publicKey` property containing the public key.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CryptoKeyPair.",
    "properties": {
      "privatekey": "A `CryptoKey` object representing the private key. For encryption and decryption algorithms, this key is used to decrypt. For signing and verification algorithms it is used to sign.",
      "publickey": "A `CryptoKey` object representing the public key. For encryption and decryption algorithms, this key is used to encrypt. For signing and verification algorithms it is used to verify signatures."
    }
  },
  "CustomEvent": {
    "docs": "The **`CustomEvent`** interface represents events initialized by an application for any purpose.\n\n**Note:** If used to attempt to communicate between a web extension content script and a web page script, a non-string `detail` property throws with \"Permission denied to access property\" in Firefox. To avoid this issue clone the object. See Share objects with page scripts for more information.\n\n**Note:** This feature is available in Web Workers\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent.",
    "properties": {
      "detail": "Returns any data passed when initializing the event.",
      "initcustomevent": "Initializes a `CustomEvent` object. If the event has already been dispatched, this method does nothing."
    }
  },
  "DOMImplementation": {
    "docs": "The **`DOMImplementation`** interface represents an object providing methods which are not dependent on any particular document. Such an object is returned by the `Document.implementation` property.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation.",
    "properties": {
      "createdocument": "Creates and returns an `XMLDocument`.",
      "createdocumenttype": "Creates and returns a `DocumentType`.",
      "createhtmldocument": "Creates and returns an HTML `Document`.",
      "hasfeature": "Returns a boolean value indicating if a given feature is supported or not. This function is unreliable and kept for compatibility purpose alone: except for SVG-related queries, it always returns `true`. Old browsers are very inconsistent in their behavior."
    }
  },
  "DOMMatrixReadOnly": {
    "docs": "The **`DOMMatrixReadOnly`** interface represents a read-only 4Ã4 matrix, suitable for 2D and 3D operations. The `DOMMatrix` interface â which is based upon `DOMMatrixReadOnly`âadds [mutability](https://en.wikipedia.org/wiki/Immutable_object), allowing you to alter the matrix after creating it.\n\nThis interface should be available inside web workers, though some implementations doesn't allow it yet.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly.",
    "properties": {
      "flipx": "Returns a new `DOMMatrix` created by flipping the source matrix around its X-axis. This is equivalent to multiplying the matrix by `DOMMatrix(-1, 0, 0, 1, 0, 0)`. The original matrix is not modified.",
      "flipy": "Returns a new `DOMMatrix` created by flipping the source matrix around its Y-axis. This is equivalent to multiplying the matrix by `DOMMatrix(1, 0, 0, -1, 0, 0)`. The original matrix is not modified.",
      "inverse": "Returns a new `DOMMatrix` created by inverting the source matrix. If the matrix cannot be inverted, the new matrix's components are all set to `NaN` and its `is2D` property is set to `false`. The original matrix is not altered.",
      "multiply": "Returns a new `DOMMatrix` created by computing the dot product of the source matrix and the specified matrix: `AâB`. If no matrix is specified as the multiplier, the matrix is multiplied by a matrix in which every element is `0` except the bottom-right corner and the element immediately above and to its left: `m33` and `m34`. These have the default value of `1`. The original matrix is not modified.",
      "rotate": "Returns a new `DOMMatrix` created by rotating the source matrix around each of its axes by the specified number of degrees. The original matrix is not altered.",
      "rotateaxisangle": "Returns a new `DOMMatrix` created by rotating the source matrix by the given angle around the specified vector. The original matrix is not modified.",
      "rotatefromvector": "Returns a new `DOMMatrix` created by rotating the source matrix by the angle between the specified vector and `(1, 0)`. The original matrix is not modified.",
      "scale": "Returns a new `DOMMatrix` created by scaling the source matrix by the amount specified for each axis, centered on the given origin. By default, the X and Z axes are scaled by `1` and the Y axis has no default scaling value. The default origin is `(0, 0, 0)`. The original matrix is not modified.",
      "scale3d": "Returns a new `DOMMatrix` created by scaling the source 3D matrix by the given factor along all its axes, centered on the specified origin point. The default origin is `(0, 0, 0)`. The original matrix is not modified.",
      "scalenonuniform": "Returns a new `DOMMatrix` created by applying the specified scaling on the X, Y, and Z axes, centered at the given origin. By default, the Y and Z axes' scaling factors are both `1`, but the scaling factor for X must be specified. The default origin is `(0, 0, 0)`. The original matrix is not changed.",
      "skewx": "Returns a new `DOMMatrix` created by applying the specified skew transformation to the source matrix along its X-axis. The original matrix is not modified.",
      "skewy": "Returns a new `DOMMatrix` created by applying the specified skew transformation to the source matrix along its Y-axis. The original matrix is not modified.",
      "tofloat32array": "Returns a new `Float32Array` containing all 16 elements (`m11`, `m12`, `m13`, `m14`, `m21`, `m22`, `m23`, `m24`, `m31`, `m32`, `m33`, `m34`, `m41`, `m42`, `m43`, `m44`) which comprise the matrix. The elements are stored into the array as single-precision floating-point numbers in column-major (colexographical access, or \"colex\") order. (In other words, down the first column from top to bottom, then the second column, and so forth.)",
      "tofloat64array": "Returns a new `Float64Array` containing all 16 elements (`m11`, `m12`, `m13`, `m14`, `m21`, `m22`, `m23`, `m24`, `m31`, `m32`, `m33`, `m34`, `m41`, `m42`, `m43`, `m44`) which comprise the matrix. The elements are stored into the array as double-precision floating-point numbers in column-major (colexographical access, or \"colex\") order. (In other words, down the first column from top to bottom, then the second column, and so forth.)",
      "tojson": "Returns a JSON representation of the `DOMMatrixReadOnly` object.",
      "tostring": "Creates and returns a string object which contains a string representation of the matrix in CSS matrix syntax, using the appropriate CSS matrix notation. See the `matrix()` CSS function for details on this syntax.\n\nFor a 2D matrix, the elements `a` through `f` are listed, for a total of six values and the form `matrix(a, b, c, d, e, f)`.\n\nFor a 3D matrix, the returned string contains all 16 elements and takes the form `matrix3d(m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44)`. See the CSS `matrix3d()` function for details on the 3D notation's syntax.\n\nThrows an `InvalidStateError` exception if any of the elements in the matrix are non-finite (even if, in the case of a 2D matrix, the non-finite values are in elements not used by the 2D matrix representation).",
      "transformpoint": "Transforms the specified point using the matrix, returning a new `DOMPoint` object containing the transformed point. Neither the matrix nor the original point are altered.",
      "translate": "Returns a new `DOMMatrix` containing a matrix calculated by translating the source matrix using the specified vector. By default, the vector is `(0, 0, 0)`. The original matrix is not changed."
    }
  },
  "DOMMatrix": {
    "docs": "The **`DOMMatrix`** interface represents 4Ã4 matrices, suitable for 2D and 3D operations including rotation and translation. It is a mutable version of the `DOMMatrixReadOnly` interface.\n\n**`WebKitCSSMatrix`** and **`SVGMatrix`** are aliases to **`DOMMatrix`**.\n\nThis interface should be available inside web workers, though some implementations don't allow it yet.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix.",
    "properties": {
      "invertself": "Modifies the matrix by inverting it. If the matrix can't be inverted, its components are all set to `NaN`, and `is2D` returns `false`.",
      "multiplyself": "Modifies the matrix by post-multiplying it with the specified `DOMMatrix`. This is equivalent to the dot product `AâB`, where matrix `A` is the source matrix and `B` is the matrix given as an input to the method. Returns itself.",
      "premultiplyself": "Modifies the matrix by pre-multiplying it with the specified `DOMMatrix`. This is equivalent to the dot product `BâA`, where matrix `A` is the source matrix and `B` is the matrix given as an input to the method. Returns itself.",
      "rotateaxisangleself": "Modifies the matrix by rotating it by the specified angle around the given vector. Returns itself.",
      "rotatefromvectorself": "Modifies the matrix by rotating it by the angle between the specified vector and `(1, 0)`. Returns itself.",
      "rotateself": "Modifies the matrix by rotating itself around each axis by the specified number of degrees. Returns itself.",
      "scale3dself": "Modifies the matrix by applying the specified scaling factor to all three axes, centered on the given origin. Returns itself.",
      "scalenonuniformself": "Modifies the matrix by applying the specified scaling on the X, Y, and Z axes, centered at the given origin. By default, the Y and Z axes' scaling factors are both `1`, but the scaling factor for X must be specified. The default origin is `(0, 0, 0)`. Returns itself.",
      "scaleself": "Modifies the matrix by applying the specified scaling factors, with the center located at the specified origin. Also returns itself. By default, the scaling factor is `1` for all three axes, and the origin is `(0, 0, 0)`. Returns itself.",
      "setmatrixvalue": "Replaces the contents of the matrix with the matrix described by the specified transform or transforms. Returns itself.",
      "skewxself": "Modifies the matrix by applying the specified skew transformation along the X-axis. Returns itself.",
      "skewyself": "Modifies the matrix by applying the specified skew transformation along the Y-axis. Returns itself.",
      "translateself": "Modifies the matrix by applying the specified vector. The default vector is `[0, 0, 0]`. Returns itself."
    }
  },
  "DOMError": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe **`DOMError`** interface describes an error object that contains an error name.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/DOMError.",
    "properties": {
      "message": "Returns a string representing a message or description associated with the given error type name.",
      "name": "Returns a string representing one of the error type names (see below)."
    }
  },
  "DOMQuad": {
    "docs": "A `DOMQuad` is a collection of four `DOMPoint`s defining the corners of an arbitrary quadrilateral. Returning `DOMQuad`s lets `getBoxQuads()` return accurate information even when arbitrary 2D or 3D transforms are present. It has a handy `bounds` attribute returning a `DOMRectReadOnly` for those cases where you just want an axis-aligned bounding rectangle.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/DOMQuad.",
    "properties": {
      "fromquad": "Returns a new `DOMQuad` object based on the passed set of coordinates.",
      "fromrect": "Returns a new `DOMQuad` object based on the passed set of coordinates.",
      "getbounds": "Returns a `DOMRect` object with the coordinates and dimensions of the `DOMQuad` object.",
      "tojson": "Returns a JSON representation of the `DOMQuad` object."
    }
  },
  "DOMHighResTimeStamp": {
    "docs": "The **`DOMHighResTimeStamp`** type is a `double` and is used to store a time value in milliseconds.\n\nThis type can be used to describe a discrete point in time or a time interval (the difference in time between two discrete points in time). The starting time can be either a specific time determined by the script for a site or app, or the time origin.\n\nThe time, given in milliseconds, should be accurate to 5 Âµs (microseconds), with the fractional part of the number indicating fractions of a millisecond. However, if the browser is unable to provide a time value accurate to 5 Âµs (due, for example, to hardware or software constraints), the browser can represent the value as a time in milliseconds accurate to a millisecond. Also note the section below on reduced time precision controlled by browser preferences to avoid timing attacks and fingerprinting.\n\nFurther, if the device or operating system the user agent is running on doesn't have a clock accurate to the microsecond level, they may only be accurate to the millisecond.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp."
  },
  "DOMPointReadOnly": {
    "docs": "The **`DOMPointReadOnly`** interface specifies the coordinate and perspective fields used by `DOMPoint` to define a 2D or 3D point in a coordinate system.\n\n**Note:** This feature is available in Web Workers\n\nThere are two ways to create a new `DOMPointReadOnly` instance. First, you can use its constructor, passing in the values of the parameters for each dimension and, optionally, the perspective:\n\n```\n/* 2D */\nconst point2D = new DOMPointReadOnly(50, 50);\n\n/* 3D */\nconst point3D = new DOMPointReadOnly(50, 50, 25);\n\n/* 3D with perspective */\nconst point3DPerspective = new DOMPointReadOnly(100, 100, 100, 1.0);\n```\n\nThe other option is to use the static `DOMPointReadOnly.fromPoint()` method:\n\n```\nconst point = DOMPointReadOnly.fromPoint({ x: 100, y: 100, z: 50, w: 1.0 });\n```\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly.",
    "properties": {
      "frompoint": "A static method that creates a new `DOMPointReadOnly` object given the coordinates provided in the specified object.",
      "w": "The point's perspective value, `w`.",
      "x": "The point's horizontal coordinate, `x`.",
      "y": "The point's vertical coordinate, `y`.",
      "z": "The point's depth coordinate, `z`."
    }
  },
  "DOMRectReadOnly": {
    "docs": "The **`DOMRectReadOnly`** interface specifies the standard properties (also used by `DOMRect`) to define a rectangle whose properties are immutable.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly.",
    "properties": {
      "bottom": "Returns the bottom coordinate value of the `DOMRectReadOnly` (usually the same as `y + height`).",
      "fromrect": "Creates a new `DOMRectReadOnly` object with a given location and dimensions.",
      "height": "Returns the height of the `DOMRectReadOnly`.",
      "left": "Returns the left coordinate value of the `DOMRectReadOnly` (usually the same as `x`).",
      "right": "Returns the right coordinate value of the `DOMRectReadOnly` (usually the same as `x + width`).",
      "top": "Returns the top coordinate value of the `DOMRectReadOnly` (usually the same as `y`).",
      "width": "Returns the width of the `DOMRectReadOnly`.",
      "x": "Returns the x coordinate of the `DOMRectReadOnly`'s origin.",
      "y": "Returns the y coordinate of the `DOMRectReadOnly`'s origin."
    }
  },
  "DOMStringList": {
    "docs": "The **`DOMString`** interface is a legacy type returned by some APIs and represents a non-modifiable list of strings (`DOMString`). Modern APIs use `Array` objects (in WebIDL: `sequence<DOMString>`) instead.\n\nThis interface is used in IndexedDB and in the `Location` API:\n\n- `IDBDatabase.objectStoreNames`\n- `IDBObjectStore.indexNames`\n- `Location.ancestorOrigins`\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/DOMStringList.",
    "properties": {
      "contains": "Returns a boolean indicating whether the given string is in the list.",
      "item": "Returns a string from the list with the given index.",
      "length": "Returns the size of the list."
    }
  },
  "DOMPoint": {
    "docs": "A **`DOMPoint`** object represents a 2D or 3D point in a coordinate system; it includes values for the coordinates in up to three dimensions, as well as an optional perspective value. `DOMPoint` is based on `DOMPointReadOnly` but allows its properties' values to be changed.\n\nIn general, a positive `x` component represents a position to the right of the origin, a positive `y` component is downward from the origin, and a positive `z` component extends outward from the screen (in other words, toward the user).\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/DOMPoint.",
    "properties": {
      "frompoint": "Creates a new mutable `DOMPoint` object given an existing point (or an object containing matching properties) which provides the values for its properties.",
      "w": "The perspective value of the `DOMPoint`.",
      "x": "The `x` coordinate of the `DOMPoint`.",
      "y": "The `y` coordinate of the `DOMPoint`.",
      "z": "The `z` coordinate of the `DOMPoint`."
    }
  },
  "DOMParser": {
    "docs": "The **`DOMParser`** interface provides\n  the ability to parse XML or HTML source code from a\n  string into a DOM `Document`.\n\nYou can perform the opposite operationâconverting a DOM tree into XML or HTML\n  sourceâusing the `XMLSerializer` interface.\n\nIn the case of an HTML document, you can also replace portions of the DOM with new DOM\n  trees built from HTML by setting the value of the `Element.innerHTML` and\n  `outerHTML` properties. These properties can also be\n  read to fetch HTML fragments corresponding to the corresponding DOM subtree.\n\nNote that `XMLHttpRequest` can parse XML and HTML directly\n  from a URL-addressable resource, returning a `Document` in its\n  `response` property.\n\n**Note:** Be aware that block-level elements\n    like `<p>` will be automatically closed if another\n    block-level element is nested inside and therefore parsed before the closing `</p>` tag.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/DOMParser.",
    "properties": {
      "parsefromstring": "Parses a string using either the HTML parser or the XML parser, returning an `HTMLDocument` or `XMLDocument`."
    }
  },
  "DOMRect": {
    "docs": "A **`DOMRect`** describes the size and position of a rectangle.\n\nThe type of box represented by the `DOMRect` is specified by the method or property that returned it. For example, `Range.getBoundingClientRect()` specifies the rectangle that bounds the content of the range using such objects.\n\nIt inherits from its parent, `DOMRectReadOnly`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/DOMRect.",
    "properties": {
      "fromrect": "Creates a new `DOMRect` object with a given location and dimensions."
    }
  },
  "DataTransfer": {
    "docs": "The **`DataTransfer`** object is used to hold the data that is being dragged during a drag and drop operation. It may hold one or more data items, each of one or more data types. For more information about drag and drop, see HTML Drag and Drop API.\n\nThis object is available from the `dataTransfer` property of all `drag events`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer.",
    "properties": {
      "cleardata": "Remove the data associated with a given type. The type argument is optional. If the type is empty or not specified, the data associated with all types is removed. If data for the specified type does not exist, or the data transfer contains no data, this method will have no effect.",
      "dropeffect": "Gets the type of drag-and-drop operation currently selected or sets the operation to a new type. The value must be `none`, `copy`, `link` or `move`.",
      "effectallowed": "Provides all of the types of operations that are possible. Must be one of `none`, `copy`, `copyLink`, `copyMove`, `link`, `linkMove`, `move`, `all` or `uninitialized`.",
      "files": "Contains a list of all the local files available on the data transfer. If the drag operation doesn't involve dragging files, this property is an empty list.",
      "getdata": "Retrieves the data for a given type, or an empty string if data for that type does not exist or the data transfer contains no data.",
      "items": "Gives a `DataTransferItemList` object which is a list of all of the drag data.",
      "setdata": "Set the data for a given type. If data for the type does not exist, it is added at the end, such that the last item in the types list will be the new format. If data for the type already exists, the existing data is replaced in the same position.",
      "setdragimage": "Set the image to be used for dragging if a custom one is desired.",
      "types": "An array of strings giving the formats that were set in the `dragstart` event."
    }
  },
  "DataTransferItem": {
    "docs": "The **`DataTransferItem`** object represents one drag data item. During a drag operation, each `drag event` has a `dataTransfer` property which contains a `list` of drag data items. Each item in the list is a `DataTransferItem` object.\n\nThis interface has no constructor.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem.",
    "properties": {
      "getasfile": "Returns the `File` object associated with the drag data item (or null if the drag item is not a file).",
      "getasfilesystemhandle": "Returns a `FileSystemFileHandle` if the dragged item is a file, or a `FileSystemDirectoryHandle` if the dragged item is a directory.",
      "getasstring": "Invokes the specified callback with the drag data item string as its argument.",
      "kind": "The kind of drag data item, `string` or `file`.",
      "type": "The drag data item's type, typically a MIME type.",
      "webkitgetasentry": "Returns an object based on `FileSystemEntry` representing the selected file's entry in its file system. This will generally be either a `FileSystemFileEntry` or `FileSystemDirectoryEntry` object."
    }
  },
  "DataTransferItemList": {
    "docs": "The **`DataTransferItemList`** object is a list of `DataTransferItem` objects representing items being dragged. During a drag operation, each `DragEvent` has a `dataTransfer` property and that property is a `DataTransferItemList`.\n\nThe individual items can be accessed using the bracket notation `[]`.\n\nThis interface has no constructor.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItemList.",
    "properties": {
      "add": "Adds an item (either a `File` object or a string) to the drag item list and returns a `DataTransferItem` object for the new item.",
      "clear": "Removes all of the drag items from the list.",
      "length": "An `unsigned long` that is the number of drag items in the list.",
      "operator": "Getter that returns a `DataTransferItem` at the given index.",
      "remove": "Removes the drag item from the list at the given index."
    }
  },
  "DedicatedWorkerGlobalScope": {
    "docs": "The **`DedicatedWorkerGlobalScope`** object (the `Worker` global scope) is accessible through the `self` keyword. Some additional global functions, namespaces objects, and constructors, not typically associated with the worker global scope, but available on it, are listed in the JavaScript Reference. See also: Functions available to workers.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope.",
    "properties": {
      "cancelanimationframe": "Cancels an animation frame request previously scheduled through a call to `requestAnimationFrame()`.",
      "close": "Discards any tasks queued in the `WorkerGlobalScope`'s event loop, effectively closing this particular scope.",
      "name": "The name that the `Worker` was (optionally) given when it was created using the `Worker()` constructor. This is mainly useful for debugging purposes.",
      "postmessage": "Sends a message â which can consist of `any` JavaScript object â to the parent document that first spawned the worker.",
      "requestanimationframe": "Perform an animation frame request and call a user-supplied callback function before the next repaint."
    }
  },
  "DOMTokenList": {
    "docs": "The **`DOMTokenList`** interface represents a set of space-separated tokens. Such a set is returned by `Element.classList` or `HTMLLinkElement.relList`, and many others.\n\nA `DOMTokenList` is indexed beginning with `0` as with JavaScript `Array` objects. `DOMTokenList` is always case-sensitive.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList.",
    "properties": {
      "add": "Adds the specified tokens to the list.",
      "contains": "Returns `true` if the list contains the given token, otherwise `false`.",
      "entries": "Returns an iterator, allowing you to go through all key/value pairs contained in this object.",
      "foreach": "Executes a provided callback function once for each `DOMTokenList` element.",
      "item": "Returns the item in the list by its index, or `null` if the index is greater than or equal to the list's `length`.",
      "keys": "Returns an iterator, allowing you to go through all keys of the key/value pairs contained in this object.",
      "length": "An `integer` representing the number of objects stored in the object.",
      "remove": "Removes the specified tokens from the list.",
      "replace": "Replaces the token with another one.",
      "supports": "Returns `true` if the given token is in the associated attribute's supported tokens.",
      "toggle": "Removes the token from the list if it exists, or adds it to the list if it doesn't. Returns a boolean indicating whether the token is in the list after the operation.",
      "value": "A stringifier property that returns the value of the list as a string.",
      "values": "Returns an iterator, allowing you to go through all values of the key/value pairs contained in this object."
    }
  },
  "DelayNode": {
    "docs": "The **`DelayNode`** interface represents a [delay-line](https://en.wikipedia.org/wiki/Digital_delay_line); an `AudioNode` audio-processing module that causes a delay between the arrival of an input data and its propagation to the output.\n\nA `DelayNode` always has exactly one input and one output, both with the same amount of channels.\n\n\n\nWhen creating a graph that has a cycle, it is mandatory to have at least one `DelayNode` in the cycle, or the nodes taking part in the cycle will be muted.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/DelayNode.",
    "properties": {
      "delaytime": "An a-rate `AudioParam` representing the amount of delay to apply, specified in seconds."
    }
  },
  "DeprecationReportBody": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe `DeprecationReportBody` interface of the Reporting API represents the body of a deprecation report.\n\nA deprecation report is generated when a deprecated feature (for example a deprecated API method) is used on a document being observed by a `ReportingObserver`. In addition to the support of this API, receiving useful deprecation warnings relies on browser vendors adding these warnings for deprecated features.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/DeprecationReportBody.",
    "properties": {
      "anticipatedremoval": "A `Date` object (rendered as a string) representing the date when the feature is expected to be removed from the current browser. If the date is not known, this property will return `null`.",
      "columnnumber": "A number representing the column in the source file in which the deprecated feature was used, if known, or `null` otherwise.",
      "id": "A string representing the feature or API that is deprecated, for example `NavigatorGetUserMedia`. This can be used to group reports by deprecated feature.",
      "linenumber": "A number representing the line in the source file in which the deprecated feature was used, if known, or `null` otherwise.",
      "message": "A string containing a human-readable description of the deprecation, including information such as what newer feature has superseded it, if any. This typically matches the message a browser will display in its DevTools console when a deprecated feature is used, if one is available.",
      "sourcefile": "A string containing the path to the source file where the deprecated feature was used, if known, or `null` otherwise.",
      "tojson": "A serializer which returns a JSON representation of the `InterventionReportBody` object."
    }
  },
  "DeviceMotionEventAcceleration": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`DeviceMotionEventAcceleration`** interface of the Device Orientation Events provides information about the amount of acceleration the device is experiencing along all three axes.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEventAcceleration.",
    "properties": {
      "x": "The amount of acceleration along the X axis.",
      "y": "The amount of acceleration along the Y axis.",
      "z": "The amount of acceleration along the Z axis."
    }
  },
  "DeviceMotionEventRotationRate": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nA **`DeviceMotionEventRotationRate`** interface of the Device Orientation Events provides information about the rate at which the device is rotating around all three axes.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEventRotationRate.",
    "properties": {
      "alpha": "The amount of rotation around the Z axis, in degrees per second.",
      "beta": "The amount of rotation around the X axis, in degrees per second.",
      "gamma": "The amount of rotation around the Y axis, in degrees per second."
    }
  },
  "DirectoryEntrySync": {
    "docs": "**Non-standard:** This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n\n**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe `DirectoryEntrySync` interface represents a directory in a file system. It includes methods for creating, reading, looking up, and recursively removing files in a directory.\n\n**Warning:** This interface is deprecated and is no more on the standard track.\n    Do not use it anymore. Use the File and Directory Entries API instead.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/DirectoryEntrySync."
  },
  "DOMStringMap": {
    "docs": "The **`DOMStringMap`** interface is used for the `HTMLElement.dataset` attribute, to represent data for custom attributes added to elements.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/DOMStringMap."
  },
  "Document": {
    "docs": "The **`Document`** interface represents any web page loaded in the browser and serves as an entry point into the web page's content, which is the DOM tree.\n\nThe DOM tree includes elements such as `<body>` and `<table>`, among many others. It provides functionality globally to the document, like how to obtain the page's URL and create new elements in the document.\n\nThe `Document` interface describes the common properties and methods for any kind of document. Depending on the document's type (e.g. HTML, XML, SVG, â¦), a larger API is available: HTML documents, served with the `\"text/html\"` content type, also implement the `HTMLDocument` interface, whereas XML and SVG documents implement the `XMLDocument` interface.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Document.",
    "properties": {
      "activeelement": "Returns the `Element` that currently has focus.",
      "adoptedstylesheets": "Add an array of constructed stylesheets to be used by the document.\n      These stylesheets may also be shared with shadow DOM subtrees of the same document.",
      "adoptnode": "Adopt node from an external document.",
      "alinkcolor": "Returns or sets the color of active links in the document body.",
      "all": "Provides access to all elements in the document â it returns an `HTMLAllCollection` rooted at the document node. This is a legacy, non-standard property and should not be used.",
      "anchors": "Returns a list of all of the anchors in the document.",
      "append": "Inserts a set of `Node` objects or string objects after the last child of the document.",
      "applets": "Returns an empty `HTMLCollection`. Legacy property that used to return the list of applets within a document.",
      "bgcolor": "Gets/sets the background color of the current document.",
      "body": "Returns the `<body>` or `<frameset>` node of the current document.",
      "captureevents": "See `Window.captureEvents`.",
      "caretpositionfrompoint": "Returns a `CaretPosition` object containing the DOM node containing the caret, and caret's character offset within that node.",
      "caretrangefrompoint": "Gets a `Range` object for the document fragment under the specified coordinates.",
      "characterset": "Returns the character set being used by the document.",
      "charset": "Alias of `Document.characterSet`. Use this property instead.",
      "childelementcount": "Returns the number of child elements of the current document.",
      "children": "Returns the child elements of the current document.",
      "clear": "This method does nothing.",
      "close": "Closes a document stream for writing.",
      "compatmode": "Indicates whether the document is rendered in quirks or strict mode.",
      "contenttype": "Returns the Content-Type from the MIME Header of the current document.",
      "cookie": "Returns a semicolon-separated list of the cookies for that document or sets a single cookie.",
      "createattribute": "Creates a new `Attr` object and returns it.",
      "createattributens": "Creates a new attribute node in a given namespace and returns it.",
      "createcdatasection": "Creates a new CDATA node and returns it.",
      "createcomment": "Creates a new comment node and returns it.",
      "createdocumentfragment": "Creates a new document fragment.",
      "createelement": "Creates a new element with the given tag name.",
      "createelementns": "Creates a new element with the given tag name and namespace URI.",
      "createevent": "Creates an event object.",
      "createexpression": "Compiles an `XPathExpression` which can then be used for (repeated) evaluations.",
      "createnodeiterator": "Creates a `NodeIterator` object.",
      "creatensresolver": "Creates an `XPathNSResolver` object.",
      "createprocessinginstruction": "Creates a new `ProcessingInstruction` object.",
      "createrange": "Creates a `Range` object.",
      "createtextnode": "Creates a text node.",
      "createtouch": "Creates a `Touch` object.",
      "createtouchlist": "Creates a `TouchList` object.",
      "createtreewalker": "Creates a `TreeWalker` object.",
      "currentscript": "Returns the `<script>` element whose script is currently being processed and [isn't a JavaScript module](https://github.com/whatwg/html/issues/997).",
      "defaultview": "Returns a reference to the window object.",
      "designmode": "Gets/sets the ability to edit the whole document.",
      "dir": "Gets/sets directionality (rtl/ltr) of the document.",
      "doctype": "Returns the Document Type Definition (DTD) of the current document.",
      "documentelement": "Returns the `Element` that is a direct child of the document. For HTML documents, this is normally the `HTMLHtmlElement` object representing the document's `<html>` element.",
      "documenturi": "Returns the document location as a string.",
      "domain": "Gets/sets the domain of the current document.",
      "elementfrompoint": "Returns the topmost element at the specified coordinates.",
      "elementsfrompoint": "Returns an array of all elements at the specified coordinates.",
      "embeds": "Returns an `HTMLCollection` of the embedded `<embed>` elements in the document.",
      "enablestylesheetsforset": "Enables the style sheets for the specified style sheet set.",
      "evaluate": "Evaluates an XPath expression.",
      "execcommand": "On an editable document, executes a formatting command.",
      "exitfullscreen": "Stops document's fullscreen element from being displayed fullscreen.",
      "exitpictureinpicture": "Remove the video from the floating picture-in-picture window back to its original container.",
      "exitpointerlock": "Release the pointer lock.",
      "featurepolicy": "Returns the `FeaturePolicy` interface with the feature policies applied to the document.",
      "fgcolor": "Gets/sets the foreground color, or text color, of the current document.",
      "firstelementchild": "Returns the first child element of the current document.",
      "fonts": "Returns the `FontFaceSet` interface of the current document.",
      "forms": "Returns an `HTMLCollection` of the `<form>` elements in the document.",
      "fragmentdirective": "Returns the `FragmentDirective` for the current document.",
      "fullscreen": "Returns `true` when the document is in fullscreen mode.",
      "fullscreenelement": "The element that's currently in full screen mode for this document.",
      "fullscreenenabled": "Indicates whether fullscreen mode is available.",
      "getanimations": "Returns an array of all `Animation` objects currently in effect, whose target elements are descendants of the `document`.",
      "getboxquads": "Returns a list of `DOMQuad` objects representing the CSS fragments of the node.",
      "getelementbyid": "Returns an object reference to the identified element.",
      "getelementsbyclassname": "Returns a list of elements with the given class name.",
      "getelementsbyname": "Returns a list of elements with the given name.",
      "getelementsbytagname": "Returns a list of elements with the given tag name.",
      "getelementsbytagnamens": "Returns a list of elements with the given tag name and namespace.",
      "getselection": "Returns a `Selection` object representing the range of text selected by the user, or the current position of the caret.",
      "hasfocus": "Returns `true` if the focus is currently located anywhere inside the specified document.",
      "hasstorageaccess": "Returns a `Promise` that resolves with a boolean value indicating whether the document has access to unpartitioned cookies.",
      "head": "Returns the `<head>` element of the current document.",
      "hidden": "Returns a Boolean value indicating if the page is considered hidden or not.",
      "images": "Returns an `HTMLCollection` of the images in the document.",
      "implementation": "Returns the DOM implementation associated with the current document.",
      "importnode": "Returns a clone of a node from an external document.",
      "inputencoding": "Alias of `Document.characterSet`. Use this property instead.",
      "lastelementchild": "Returns the last child element of the current document.",
      "lastmodified": "Returns the date on which the document was last modified.",
      "laststylesheetset": "Returns the name of the style sheet set that was last enabled. Has the value `null` until the style sheet is changed by setting the value of `selectedStyleSheetSet`.",
      "linkcolor": "Gets/sets the color of hyperlinks in the document.",
      "links": "Returns an `HTMLCollection` of the hyperlinks in the document.",
      "location": "Returns the URI of the current document.",
      "mozsetimageelement": "Allows you to change the element being used as the background image for a specified element ID.",
      "open": "Opens a document stream for writing.",
      "pictureinpictureelement": "Returns the `Element` currently being presented in picture-in-picture mode in this document.",
      "pictureinpictureenabled": "Returns true if the picture-in-picture feature is enabled.",
      "plugins": "Returns an `HTMLCollection` of the available plugins.",
      "pointerlockelement": "Returns the element set as the target for mouse events while the pointer is locked. `null` if lock is pending, pointer is unlocked, or if the target is in another document.",
      "preferredstylesheetset": "Returns the preferred style sheet set as specified by the page author.",
      "prepend": "Inserts a set of `Node` objects or string objects before the first child of the document.",
      "prerendering": "Returns a boolean that indicates whether the document is currently in the process of prerendering, as initiated via the Speculation Rules API.",
      "querycommandenabled": "Returns true if the formatting command can be executed on the current range.",
      "querycommandindeterm": "Returns true if the formatting command is in an indeterminate state on the current range.",
      "querycommandstate": "Returns true if the formatting command has been executed on the current range.",
      "querycommandsupported": "Returns true if the formatting command is supported on the current range.",
      "querycommandvalue": "Returns the current value of the current range for a formatting command.",
      "queryselector": "Returns the first Element node within the document, in document order, that matches the specified selectors.",
      "queryselectorall": "Returns a list of all the Element nodes within the document that match the specified selectors.",
      "readystate": "Returns loading status of the document.",
      "referrer": "Returns the URI of the page that linked to this page.",
      "releasecapture": "Releases the current mouse capture if it's on an element in this document.",
      "releaseevents": "See `Window.releaseEvents()`.",
      "replacechildren": "Replaces the existing children of a document with a specified new set of children.",
      "requeststorageaccess": "Allows a document loaded in a third-party context (i.e. embedded in an `<iframe>`) to request access to unpartitioned cookies, in cases where user agents by default block access to unpartitioned cookies by sites loaded in a third-party context to improve privacy.",
      "requeststorageaccessfor": "Allows top-level sites to request third-party cookie access on behalf of embedded content originating from another site in the same related website set.",
      "rootelement": "Like `Document.documentElement`, but only for `<svg>` root elements. Use this property instead.",
      "scripts": "Returns an `HTMLCollection` of the `<script>` elements in the document.",
      "scrollingelement": "Returns a reference to the `Element` that scrolls the document.",
      "selectedstylesheetset": "Returns which style sheet set is currently in use.",
      "startviewtransition": "Starts a new view transition and returns a `ViewTransition` object to represent it.",
      "stylesheets": "Returns a `StyleSheetList` of `CSSStyleSheet` objects for stylesheets explicitly linked into, or embedded in a document.",
      "stylesheetsets": "Returns a list of the style sheet sets available on the document.",
      "timeline": "Returns timeline as a special instance of `DocumentTimeline` that is automatically created on page load.",
      "title": "Sets or gets the title of the current document.",
      "url": "Returns the document location as a string.",
      "visibilitystate": "Returns a `string` denoting the visibility state of the document. Possible values are `visible`, `hidden`, `prerender`, and `unloaded`.",
      "vlinkcolor": "Gets/sets the color of visited hyperlinks.",
      "write": "Writes text in a document.",
      "writeln": "Writes a line of text in a document.",
      "xmlencoding": "Returns the encoding as determined by the XML declaration.",
      "xmlstandalone": "Returns `true` if the XML declaration specifies the document to be standalone (e.g., An external part of the DTD affects the document's content), else `false`.",
      "xmlversion": "Returns the version number as specified in the XML declaration or `\"1.0\"` if the declaration is absent."
    }
  },
  "DecompressionStream": {
    "docs": "The **`DecompressionStream`** interface of the Compression Streams API is an API for decompressing a stream of data.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/DecompressionStream.",
    "properties": {
      "readable": "Returns the `ReadableStream` instance controlled by this object.",
      "writable": "Returns the `WritableStream` instance controlled by this object."
    }
  },
  "DocumentPictureInPicture": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\n**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`DocumentPictureInPicture`** interface of the Document Picture-in-Picture API is the entry point for creating and handling document picture-in-picture windows.\n\nIt is accessed via the `Window.documentPictureInPicture` property.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/DocumentPictureInPicture."
  },
  "DocumentPictureInPictureEvent": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`DocumentPictureInPictureEvent`** interface of the Document Picture-in-Picture API is the event object for the `enter` event, which fires when the Picture-in-Picture window is opened.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/DocumentPictureInPictureEvent."
  },
  "DocumentFragment": {
    "docs": "The **`DocumentFragment`** interface represents a minimal document object that has no parent.\n\nIt is used as a lightweight version of `Document` that stores a segment of a document structure comprised of nodes just like a standard document. The key difference is due to the fact that the document fragment isn't part of the active document tree structure. Changes made to the fragment don't affect the document.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment.",
    "properties": {
      "append": "Inserts a set of `Node` objects or string objects after the last child of the document fragment.",
      "childelementcount": "Returns the amount of child `elements` the `DocumentFragment` has.",
      "children": "Returns a live `HTMLCollection` containing all objects of type `Element` that are children of the `DocumentFragment` object.",
      "firstelementchild": "Returns the `Element` that is the first child of the `DocumentFragment` object, or `null` if there is none.",
      "getelementbyid": "Returns the first `Element` node within the `DocumentFragment`, in document order, that matches the specified ID. Functionally equivalent to `Document.getElementById()`.",
      "lastelementchild": "Returns the `Element` that is the last child of the `DocumentFragment` object, or `null` if there is none.",
      "prepend": "Inserts a set of `Node` objects or string objects before the first child of the document fragment.",
      "queryselector": "Returns the first `Element` node within the `DocumentFragment`, in document order, that matches the specified selectors.",
      "queryselectorall": "Returns a `NodeList` of all the `Element` nodes within the `DocumentFragment` that match the specified selectors.",
      "replacechildren": "Replaces the existing children of a `DocumentFragment` with a specified new set of children."
    }
  },
  "DocumentTimeline": {
    "docs": "The **`DocumentTimeline`** interface of the Web Animations API represents animation timelines, including the default document timeline (accessed via `Document.timeline`).\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/DocumentTimeline."
  },
  "DirectoryReaderSync": {
    "docs": "**Non-standard:** This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n\n**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe `DirectoryReaderSync` interface lets you read the entries in a directory.\n\n**Warning:** This interface is deprecated and is no more on the standard track.\n    Do not use it anymore. Use the File and Directory Entries API instead.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/DirectoryReaderSync."
  },
  "DeviceOrientationEvent": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`DeviceOrientationEvent`** interface of the Device Orientation Events provides web developers with information from the physical orientation of the device running the web page.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/DeviceOrientationEvent.",
    "properties": {
      "absolute": "A boolean that indicates whether or not the device is providing orientation data absolutely.",
      "alpha": "A number representing the motion of the device around the z axis, express in degrees with values ranging from 0 (inclusive) to 360 (exclusive).",
      "beta": "A number representing the motion of the device around the x axis, express in degrees with values ranging from -180 (inclusive) to 180 (exclusive). This represents a front to back motion of the device.",
      "deviceorientationevent": "Creates a new `DeviceOrientationEvent`.",
      "gamma": "A number representing the motion of the device around the y axis, express in degrees with values ranging from -90 (inclusive) to 90 (exclusive). This represents a left to right motion of the device.",
      "webkitcompassaccuracy": "The accuracy of the compass means that the deviation is positive or negative. It's usually 10.",
      "webkitcompassheading": "A number represents the difference between the motion of the device around the z axis of the world system and the direction of the north, express in degrees with values ranging from 0 to 360."
    }
  },
  "DragEvent": {
    "docs": "The **`DragEvent`** interface is a `DOM event` that represents a drag and drop interaction. The user initiates a drag by placing a pointer device (such as a mouse) on the touch surface and then dragging the pointer to a new location (such as another DOM element). Applications are free to interpret a drag and drop interaction in an application-specific way.\n\nThis interface inherits properties from `MouseEvent` and `Event`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/DragEvent.",
    "properties": {
      "datatransfer": "The data that is transferred during a drag and drop interaction."
    }
  },
  "DeviceMotionEvent": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`DeviceMotionEvent`** interface of the Device Orientation Events provides web developers with information about the speed of changes for the device's position and orientation.\n\n**Warning:** Currently, Firefox and Chrome do not handle the coordinates the same way. Take care about this while using them.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEvent.",
    "properties": {
      "acceleration": "An object giving the acceleration of the device on the three axis X, Y and Z. Acceleration is expressed in [m/sÂ²](https://en.wikipedia.org/wiki/Meter_per_second_squared).",
      "accelerationincludinggravity": "An object giving the acceleration of the device on the three axis X, Y and Z with the effect of gravity. Acceleration is expressed in [m/sÂ²](https://en.wikipedia.org/wiki/Meter_per_second_squared).",
      "interval": "A number representing the interval of time, in milliseconds, at which data is obtained from the device.",
      "rotationrate": "An object giving the rate of change of the device's orientation on the three orientation axis alpha, beta and gamma. Rotation rate is expressed in degrees per seconds."
    }
  },
  "EcKeyGenParams": {
    "docs": "The **`EcKeyGenParams`** dictionary of the Web Crypto API represents the object that should be passed as the `algorithm` parameter into `SubtleCrypto.generateKey()`, when generating any elliptic-curve-based key pair: that is, when the algorithm is identified as either of ECDSA or ECDH.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/EcKeyGenParams."
  },
  "EcKeyImportParams": {
    "docs": "The **`EcKeyImportParams`** dictionary of the Web Crypto API represents the object that should be passed as the `algorithm` parameter into `SubtleCrypto.importKey()` or `SubtleCrypto.unwrapKey()`, when generating any elliptic-curve-based key pair: that is, when the algorithm is identified as either of ECDSA or ECDH.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/EcKeyImportParams."
  },
  "DynamicsCompressorNode": {
    "docs": "The `DynamicsCompressorNode` interface provides a compression effect, which lowers the volume of the loudest parts of the signal in order to help prevent clipping and distortion that can occur when multiple sounds are played and multiplexed together at once. This is often used in musical production and game audio. `DynamicsCompressorNode` is an `AudioNode` that has exactly one input and one output.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode.",
    "properties": {
      "attack": "A k-rate `AudioParam` representing the amount of time, in seconds, required to reduce the gain by 10 dB.",
      "knee": "A k-rate `AudioParam` containing a decibel value representing the range above the threshold where the curve smoothly transitions to the compressed portion.",
      "ratio": "A k-rate `AudioParam` representing the amount of change, in dB, needed in the input for a 1 dB change in the output.",
      "reduction": "A `float` representing the amount of gain reduction currently applied by the compressor to the signal.",
      "release": "A k-rate `AudioParam` representing the amount of time, in seconds, required to increase the gain by 10 dB.",
      "threshold": "A k-rate `AudioParam` representing the decibel value above which the compression will start taking effect."
    }
  },
  "EcdsaParams": {
    "docs": "The **`EcdsaParams`** dictionary of the Web Crypto API represents the object that should be passed as the `algorithm` parameter into `SubtleCrypto.sign()` or `SubtleCrypto.verify()` when using the ECDSA algorithm.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/EcdsaParams."
  },
  "Element": {
    "docs": "**`Element`** is the most general base class from which all element objects (i.e. objects that represent elements) in a `Document` inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from `Element`.\n\nFor example, the `HTMLElement` interface is the base interface for HTML elements. Similarly, the `SVGElement` interface is the basis for all SVG elements, and the `MathMLElement` interface is the base interface for MathML elements. Most functionality is specified further down the class hierarchy.\n\nLanguages outside the realm of the Web platform, like XUL through the `XULElement` interface, also implement `Element`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Element.",
    "properties": {
      "after": "Inserts a set of `Node` objects or strings in the children list of the `Element`'s parent, just after the `Element`.",
      "animate": "A shortcut method to create and run an animation on an element. Returns the created Animation object instance.",
      "append": "Inserts a set of `Node` objects or strings after the last child of the element.",
      "ariaatomic": "A string reflecting the `aria-atomic` attribute, which indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the `aria-relevant` attribute.",
      "ariaautocomplete": "A string reflecting the `aria-autocomplete` attribute, which indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made.",
      "ariabusy": "A string reflecting the `aria-busy` attribute, which indicates whether an element is being modified, as assistive technologies may want to wait until the modifications are complete before exposing them to the user.",
      "ariachecked": "A string reflecting the `aria-checked` attribute, which indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets that have a checked state.",
      "ariacolcount": "A string reflecting the `aria-colcount` attribute, which defines the number of columns in a table, grid, or treegrid.",
      "ariacolindex": "A string reflecting the `aria-colindex` attribute, which defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.",
      "ariacolindextext": "A string reflecting the `aria-colindextext` attribute, which defines a human readable text alternative of aria-colindex.",
      "ariacolspan": "A string reflecting the `aria-colspan` attribute, which defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.",
      "ariacurrent": "A string reflecting the `aria-current` attribute, which indicates the element that represents the current item within a container or set of related elements.",
      "ariadescription": "A string reflecting the `aria-description` attribute, which defines a string value that describes or annotates the current element.",
      "ariadisabled": "A string reflecting the `aria-disabled` attribute, which indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.",
      "ariaexpanded": "A string reflecting the `aria-expanded` attribute, which indicates whether a grouping element owned or controlled by this element is expanded or collapsed.",
      "ariahaspopup": "A string reflecting the `aria-haspopup` attribute, which indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",
      "ariahidden": "A string reflecting the `aria-hidden` attribute, which indicates whether the element is exposed to an accessibility API.",
      "ariakeyshortcuts": "A string reflecting the `aria-keyshortcuts` attribute, which indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.",
      "arialabel": "A string reflecting the `aria-label` attribute, which defines a string value that labels the current element.",
      "arialevel": "A string reflecting the `aria-level` attribute, which defines the hierarchical level of an element within a structure.",
      "arialive": "A string reflecting the `aria-live` attribute, which indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.",
      "ariamodal": "A string reflecting the `aria-modal` attribute, which indicates whether an element is modal when displayed.",
      "ariamultiline": "A string reflecting the `aria-multiline` attribute, which indicates whether a text box accepts multiple lines of input or only a single line.",
      "ariamultiselectable": "A string reflecting the `aria-multiselectable` attribute, which indicates that the user may select more than one item from the current selectable descendants.",
      "ariaorientation": "A string reflecting the `aria-orientation` attribute, which indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.",
      "ariaplaceholder": "A string reflecting the `aria-placeholder` attribute, which defines a short hint intended to aid the user with data entry when the control has no value.",
      "ariaposinset": "A string reflecting the `aria-posinset` attribute, which defines an element's number or position in the current set of listitems or treeitems.",
      "ariapressed": "A string reflecting the `aria-pressed` attribute, which indicates the current \"pressed\" state of toggle buttons.",
      "ariareadonly": "A string reflecting the `aria-readonly` attribute, which indicates that the element is not editable, but is otherwise operable.",
      "ariarelevant": "A string reflecting the `aria-relevant` attribute, which indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. This is used to describe what changes in an `aria-live` region are relevant and should be announced.",
      "ariarequired": "A string reflecting the `aria-required` attribute, which indicates that user input is required on the element before a form may be submitted.",
      "ariaroledescription": "A string reflecting the `aria-roledescription` attribute, which defines a human-readable, author-localized description for the role of an element.",
      "ariarowcount": "A string reflecting the `aria-rowcount` attribute, which defines the total number of rows in a table, grid, or treegrid.",
      "ariarowindex": "A string reflecting the `aria-rowindex` attribute, which defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.",
      "ariarowindextext": "A string reflecting the `aria-rowindextext` attribute, which defines a human readable text alternative of aria-rowindex.",
      "ariarowspan": "A string reflecting the `aria-rowspan` attribute, which defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.",
      "ariaselected": "A string reflecting the `aria-selected` attribute, which indicates the current \"selected\" state of elements that have a selected state.",
      "ariasetsize": "A string reflecting the `aria-setsize` attribute, which defines the number of items in the current set of listitems or treeitems.",
      "ariasort": "A string reflecting the `aria-sort` attribute, which indicates if items in a table or grid are sorted in ascending or descending order.",
      "ariavaluemax": "A string reflecting the `aria-valueMax` attribute, which defines the maximum allowed value for a range widget.",
      "ariavaluemin": "A string reflecting the `aria-valueMin` attribute, which defines the minimum allowed value for a range widget.",
      "ariavaluenow": "A string reflecting the `aria-valueNow` attribute, which defines the current value for a range widget.",
      "ariavaluetext": "A string reflecting the `aria-valuetext` attribute, which defines the human-readable text alternative of aria-valuenow for a range widget.",
      "assignedslot": "Returns a `HTMLSlotElement` representing the `<slot>` the node is inserted in.",
      "attachshadow": "Attaches a shadow DOM tree to the specified element and returns a reference to its `ShadowRoot`.",
      "attributes": "Returns a `NamedNodeMap` object containing the assigned attributes of the corresponding HTML element.",
      "before": "Inserts a set of `Node` objects or strings in the children list of the `Element`'s parent, just before the `Element`.",
      "childelementcount": "Returns the number of child elements of this element.",
      "children": "Returns the child elements of this element.",
      "classlist": "Returns a `DOMTokenList` containing the list of class attributes.",
      "classname": "A string representing the class of the element.",
      "clientheight": "Returns a number representing the inner height of the element.",
      "clientleft": "Returns a number representing the width of the left border of the element.",
      "clienttop": "Returns a number representing the width of the top border of the element.",
      "clientwidth": "Returns a number representing the inner width of the element.",
      "closest": "Returns the `Element` which is the closest ancestor of the current element (or the current element itself) which matches the selectors given in parameter.",
      "computedstylemap": "Returns a `StylePropertyMapReadOnly` interface which provides a read-only representation of a CSS declaration block that is an alternative to `CSSStyleDeclaration`.",
      "elementtiming": "A string reflecting the `elementtiming` attribute which marks an element for observation in the `PerformanceElementTiming` API.",
      "firstelementchild": "Returns the first child element of this element.",
      "getanimations": "Returns an array of Animation objects currently active on the element.",
      "getattribute": "Retrieves the value of the named attribute from the current node and returns it as a string.",
      "getattributenames": "Returns an array of attribute names from the current element.",
      "getattributenode": "Retrieves the node representation of the named attribute from the current node and returns it as an `Attr`.",
      "getattributenodens": "Retrieves the node representation of the attribute with the specified name and namespace, from the current node and returns it as an `Attr`.",
      "getattributens": "Retrieves the value of the attribute with the specified namespace and name from the current node and returns it as a string.",
      "getboundingclientrect": "Returns the size of an element and its position relative to the viewport.",
      "getboxquads": "Returns a list of `DOMQuad` objects representing the CSS fragments of the node.",
      "getclientrects": "Returns a collection of rectangles that indicate the bounding rectangles for each line of text in a client.",
      "getelementsbyclassname": "Returns a live `HTMLCollection` that contains all descendants of the current element that possess the list of classes given in the parameter.",
      "getelementsbytagname": "Returns a live `HTMLCollection` containing all descendant elements, of a particular tag name, from the current element.",
      "getelementsbytagnamens": "Returns a live `HTMLCollection` containing all descendant elements, of a particular tag name and namespace, from the current element.",
      "hasattribute": "Returns a boolean value indicating if the element has the specified attribute or not.",
      "hasattributens": "Returns a boolean value indicating if the element has the specified attribute, in the specified namespace, or not.",
      "hasattributes": "Returns a boolean value indicating if the element has one or more HTML attributes present.",
      "haspointercapture": "Indicates whether the element on which it is invoked has pointer capture for the pointer identified by the given pointer ID.",
      "id": "A string representing the id of the element.",
      "innerhtml": "A string representing the markup of the element's content.",
      "insertadjacentelement": "Inserts a given element node at a given position relative to the element it is invoked upon.",
      "insertadjacenthtml": "Parses the text as HTML or XML and inserts the resulting nodes into the tree in the position given.",
      "insertadjacenttext": "Inserts a given text node at a given position relative to the element it is invoked upon.",
      "lastelementchild": "Returns the last child element of this element.",
      "localname": "A string representing the local part of the qualified name of the element.",
      "matches": "Returns a boolean value indicating whether or not the element would be selected by the specified selector string.",
      "namespaceuri": "The namespace URI of the element, or `null` if it is no namespace.\n\n**Note:** In Firefox 3.5 and earlier, HTML elements are in no namespace. In later versions, HTML elements are in the [`http://www.w3.org/1999/xhtml`](https://www.w3.org/1999/xhtml/) namespace in both HTML and XML trees.",
      "nextelementsibling": "An `Element`, the element immediately following the given one in the tree, or `null` if there's no sibling node.",
      "outerhtml": "A string representing the markup of the element including its content. When used as a setter, replaces the element with nodes parsed from the given string.",
      "part": "Represents the part identifier(s) of the element (i.e. set using the `part` attribute), returned as a `DOMTokenList`.",
      "prefix": "A string representing the namespace prefix of the element, or `null` if no prefix is specified.",
      "prepend": "Inserts a set of `Node` objects or strings before the first child of the element.",
      "previouselementsibling": "An `Element`, the element immediately preceding the given one in the tree, or `null` if there is no sibling element.",
      "queryselector": "Returns the first `Node` which matches the specified selector string relative to the element.",
      "queryselectorall": "Returns a `NodeList` of nodes which match the specified selector string relative to the element.",
      "releasepointercapture": "Releases (stops) pointer capture that was previously set for a specific `pointer event`.",
      "remove": "Removes the element from the children list of its parent.",
      "removeattribute": "Removes the named attribute from the current node.",
      "removeattributenode": "Removes the node representation of the named attribute from the current node.",
      "removeattributens": "Removes the attribute with the specified name and namespace, from the current node.",
      "replacechildren": "Replaces the existing children of a `Node` with a specified new set of children.",
      "replacewith": "Replaces the element in the children list of its parent with a set of `Node` objects or strings.",
      "requestfullscreen": "Asynchronously asks the browser to make the element fullscreen.",
      "requestpointerlock": "Allows to asynchronously ask for the pointer to be locked on the given element.",
      "scroll": "Scrolls to a particular set of coordinates inside a given element.",
      "scrollby": "Scrolls an element by the given amount.",
      "scrollheight": "Returns a number representing the scroll view height of an element.",
      "scrollintoview": "Scrolls the page until the element gets into the view.",
      "scrollintoviewifneeded": "Scrolls the current element into the visible area of the browser window if it's not already within the visible area of the browser window. **Use the standard `Element.scrollIntoView()` instead.**",
      "scrollleft": "A number representing the left scroll offset of the element.",
      "scrollleftmax": "Returns a number representing the maximum left scroll offset possible for the element.",
      "scrollto": "Scrolls to a particular set of coordinates inside a given element.",
      "scrolltop": "A number representing number of pixels the top of the element is scrolled vertically.",
      "scrolltopmax": "Returns a number representing the maximum top scroll offset possible for the element.",
      "scrollwidth": "Returns a number representing the scroll view width of the element.",
      "setattribute": "Sets the value of a named attribute of the current node.",
      "setattributenode": "Sets the node representation of the named attribute from the current node.",
      "setattributenodens": "Sets the node representation of the attribute with the specified name and namespace, from the current node.",
      "setattributens": "Sets the value of the attribute with the specified name and namespace, from the current node.",
      "setcapture": "Sets up mouse event capture, redirecting all mouse events to this element.",
      "sethtml": "Parses and sanitizes a string of HTML and inserts into the DOM as a subtree of the element.",
      "setpointercapture": "Designates a specific element as the capture target of future pointer events.",
      "shadowroot": "Returns the open shadow root that is hosted by the element, or null if no open shadow root is present.",
      "slot": "Returns the name of the shadow DOM slot the element is inserted in.",
      "tagname": "Returns a string with the name of the tag for the given element.",
      "toggleattribute": "Toggles a boolean attribute, removing it if it is present and adding it if it is not present, on the specified element."
    }
  },
  "EncodedVideoChunk": {
    "docs": "The **`EncodedVideoChunk`** interface of the WebCodecs API represents a chunk of encoded video data.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/EncodedVideoChunk.",
    "properties": {
      "bytelength": "Returns an integer representing the length of the video in bytes.",
      "copyto": "Copies the encoded video data.",
      "duration": "Returns an integer representing the duration of the video in microseconds.",
      "timestamp": "Returns an integer representing the timestamp of the video in microseconds.",
      "type": "Returns a string indicating whether this chunk of data is a key chunk."
    }
  },
  "ErrorEvent": {
    "docs": "The **`ErrorEvent`** interface represents events providing information related to errors in scripts or in files.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent.",
    "properties": {
      "colno": "An `integer` containing the column number of the script file on which the error occurred.",
      "error": "A JavaScript `Object` that is concerned by the event.",
      "filename": "A string containing the name of the script file in which the error occurred.",
      "lineno": "An `integer` containing the line number of the script file on which the error occurred.",
      "message": "A string containing a human-readable error message describing the problem. Lacking a `crossorigin` setting reduces error logging."
    }
  },
  "Event": {
    "docs": "The **`Event`** interface represents an event which takes place in the DOM.\n\nAn event can be triggered by the user action e.g. clicking the mouse button or tapping keyboard, or generated by APIs to represent the progress of an asynchronous task. It can also be triggered programmatically, such as by calling the `HTMLElement.click()` method of an element, or by defining the event, then sending it to a specified target using `EventTarget.dispatchEvent()`.\n\nThere are many types of events, some of which use other interfaces based on the main `Event` interface. `Event` itself contains the properties and methods which are common to all events.\n\nMany DOM elements can be set up to accept (or \"listen\" for) these events, and execute code in response to process (or \"handle\") them. Event-handlers are usually connected (or \"attached\") to various HTML elements (such as `<button>`, `<div>`, `<span>`, etc.) using `EventTarget.addEventListener()`, and this generally replaces using the old HTML event handler attributes. Further, when properly added, such handlers can also be disconnected if needed using `removeEventListener()`.\n\n**Note:** One element can have several such handlers, even for the exact same eventâparticularly if separate, independent code modules attach them, each for its own independent purposes. (For example, a webpage with an advertising-module and statistics-module both monitoring video-watching.)\n\nWhen there are many nested elements, each with its own handler(s), event processing can become very complicatedâespecially where a parent element receives the very same event as its child elements because \"spatially\" they overlap so the event technically occurs in both, and the processing order of such events depends on the Event bubbling and capture settings of each handler triggered.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Event.",
    "properties": {
      "bubbles": "A boolean value indicating whether or not the event bubbles up through the DOM.",
      "cancelable": "A boolean value indicating whether the event is cancelable.",
      "cancelbubble": "A historical alias to `Event.stopPropagation()` that should be used instead. Setting its value to `true` before returning from an event handler prevents propagation of the event.",
      "composed": "A boolean indicating whether or not the event can bubble across the boundary between the shadow DOM and the regular DOM.",
      "composedpath": "Returns the event's path (an array of objects on which listeners will be invoked). This does not include nodes in shadow trees if the shadow root was created with its `ShadowRoot.mode` closed.",
      "currenttarget": "A reference to the currently registered target for the event. This is the object to which the event is currently slated to be sent. It's possible this has been changed along the way through retargeting.",
      "defaultprevented": "Indicates whether or not the call to `event.preventDefault()` canceled the event.",
      "eventphase": "Indicates which phase of the event flow is being processed. It is one of the following numbers: `NONE`, `CAPTURING_PHASE`, `AT_TARGET`, `BUBBLING_PHASE`.",
      "explicitoriginaltarget": "The explicit original target of the event.",
      "initevent": "Initializes the value of an Event created. If the event has already been dispatched, this method does nothing. Use the constructor (`Event()` instead).",
      "istrusted": "Indicates whether or not the event was initiated by the browser (after a user click, for instance) or by a script (using an event creation method, for example).",
      "originaltarget": "The original target of the event, before any retargetings.",
      "preventdefault": "Cancels the event (if it is cancelable).",
      "returnvalue": "A historical property still supported in order to ensure existing sites continue to work. Use `Event.preventDefault()` and `Event.defaultPrevented` instead.",
      "scoped": "A boolean value indicating whether the given event will bubble across through the shadow root into the standard DOM. Use `composed` instead.",
      "stopimmediatepropagation": "For this particular event, prevent all other listeners from being called. This includes listeners attached to the same element as well as those attached to elements that will be traversed later (during the capture phase, for instance).",
      "stoppropagation": "Stops the propagation of events further along in the DOM.",
      "target": "A reference to the object to which the event was originally dispatched.",
      "timestamp": "The time at which the event was created (in milliseconds). By specification, this value is time since epochâbut in reality, browsers' definitions vary. In addition, work is underway to change this to be a `DOMHighResTimeStamp` instead.",
      "type": "The name identifying the type of the event."
    }
  },
  "DocumentType": {
    "docs": "The **`DocumentType`** interface represents a `Node` containing a doctype.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/DocumentType.",
    "properties": {
      "after": "Inserts a set of `Node` or string objects in the children list of the\n      object's parent, just after this node.",
      "before": "Inserts a set of `Node` or string objects in the children list of the\n      object's parent, just before this node.",
      "name": "The type of the document. It is always `\"html\"` for HTML documents, but will vary for XML documents.",
      "publicid": "A string with an identifier of the type of document. Always empty (`\"\"`) for HTML, it will be, for example, `\"-//W3C//DTD SVG 1.1//EN\"` for SVG documents.",
      "remove": "Removes this object from its parent children list.",
      "replacewith": "Replaces the document type with a set of given nodes.",
      "systemid": "A string containing the URL to the associated DTD. Always empty (`\"\"`) for HTML, it will be, for example, `\"http://www.w3.org/2000/svg\"` for SVG documents."
    }
  },
  "EventSource": {
    "docs": "The **`EventSource`** interface is web content's interface to server-sent events.\n\nAn `EventSource` instance opens a persistent connection to an HTTP server, which sends events in `text/event-stream` format. The connection remains open until closed by calling `EventSource.close()`.\n\nOnce the connection is opened, incoming messages from the server are delivered to your code in the form of events. If there is an event field in the incoming message, the triggered event is the same as the event field value. If no event field is present, then a generic `message` event is fired.\n\nUnlike WebSockets, server-sent events are unidirectional; that is, data messages are delivered in one direction, from the server to the client (such as a user's web browser). That makes them an excellent choice when there's no need to send data from the client to the server in message form. For example, `EventSource` is a useful approach for handling things like social media status updates, news feeds, or delivering data into a client-side storage mechanism like IndexedDB or web storage.\n\n**Warning:** When **not used over HTTP/2**, SSE suffers from a limitation to the maximum number of open connections, which can be specially painful when opening various tabs as the limit is per browser and set to a very low number (6). The issue has been marked as \"Won't fix\" in [Chrome](https://crbug.com/275955) and [Firefox](https://bugzil.la/906896). This limit is per browser + domain, so that means that you can open 6 SSE connections across all of the tabs to `www.example1.com` and another 6 SSE connections to `www.example2.com`. (from [Stackoverflow](https://stackoverflow.com/questions/5195452/websockets-vs-server-sent-events-eventsource/5326159)). When using HTTP/2, the maximum number of simultaneous HTTP streams is negotiated between the server and the client (defaults to 100).\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/EventSource.",
    "properties": {
      "close": "Closes the connection, if any, and sets the `readyState` attribute to `CLOSED`. If the connection is already closed, the method does nothing.",
      "readystate": "A number representing the state of the connection. Possible values are `CONNECTING` (`0`), `OPEN` (`1`), or `CLOSED` (`2`).",
      "url": "A string representing the URL of the source.",
      "withcredentials": "A boolean value indicating whether the `EventSource` object was instantiated with cross-origin (CORS) credentials set (`true`), or not (`false`, the default)."
    }
  },
  "EventTarget": {
    "docs": "The **`EventTarget`** interface is implemented by objects that can receive events and may have listeners for them.\n  In other words, any target of events implements the three methods associated with this interface.\n\n`Element`, and its children, as well as `Document` and `Window`, are the most common event targets,\n  but other objects can be event targets, too.\n  For example `IDBRequest`, `AudioNode`, and `AudioContext` are also event targets.\n\nMany event targets (including elements, documents, and windows) also support setting event handlers via `onevent` properties and attributes.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/EventTarget.",
    "properties": {
      "addeventlistener": "Registers an event handler of a specific event type on the `EventTarget`.",
      "dispatchevent": "Dispatches an event to this `EventTarget`.",
      "removeeventlistener": "Removes an event listener from the `EventTarget`."
    }
  },
  "EventCounts": {
    "docs": "The **`EventCounts`** interface of the Performance API provides the number of events that have been dispatched for each event type.\n\nAn `EventCounts` instance is a read-only `Map`-like object, in which each key is the name string for an event type, and the corresponding value is an integer indicating the number of events that have been dispatched for that event type.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/EventCounts."
  },
  "ExtendableCookieChangeEvent": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`ExtendableCookieChangeEvent`** interface of the Cookie Store API is the event type passed to `cookiechange` event fired at the `ServiceWorkerGlobalScope` when any cookie changes occur which match the service worker's cookie change subscription list. A cookie change event consists of a cookie and a type. (either \"changed\" or \"deleted\")\n\nCookie changes that cause the `ExtendableCookieChangeEvent` to be dispatched are:\n\n- A cookie is newly created and not immediately removed. In this case `type` is \"changed\".\n- A cookie is newly created and immediately removed. In this case `type` is \"deleted\"\n- A cookie is removed. In this case `type` is \"deleted\".\n\n**Note:** A cookie that is replaced due to the insertion of another cookie with the same name, domain, and path, is ignored and does not trigger a change event.\n\n**Note:** This feature is available in Web Workers\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ExtendableCookieChangeEvent.",
    "properties": {
      "changed": "Returns an array containing the changed cookies.",
      "deleted": "Returns an array containing the deleted cookies."
    }
  },
  "EcdhKeyDeriveParams": {
    "docs": "The **`EcdhKeyDeriveParams`** dictionary of the Web Crypto API represents the object that should be passed as the `algorithm` parameter into `SubtleCrypto.deriveKey()`, when using the ECDH algorithm.\n\nECDH enables two people who each have a key pair consisting of a public and a private key to derive a shared secret. They exchange public keys and use the combination of their private key and the other entity's public key to derive a secret key that they â and no one else â share.\n\nThe parameters for ECDH `deriveKey()` therefore include the other entity's public key, which is combined with this entity's private key to derive the shared secret.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/EcdhKeyDeriveParams."
  },
  "EncodedAudioChunk": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`EncodedAudioChunk`** interface of the WebCodecs API represents a chunk of encoded audio data.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/EncodedAudioChunk.",
    "properties": {
      "bytelength": "Returns an integer representing the length of the audio in bytes.",
      "copyto": "Copies the encoded audio data.",
      "duration": "Returns an integer representing the duration of the audio in microseconds.",
      "timestamp": "Returns an integer representing the timestamp of the audio in microseconds.",
      "type": "Returns a string indicating whether this chunk of data is a key chunk."
    }
  },
  "ExtendableMessageEvent": {
    "docs": "The **`ExtendableMessageEvent`** interface of the Service Worker API represents the event object of a `message` event fired on a service worker (when a message is received on the `ServiceWorkerGlobalScope` from another context) â extends the lifetime of such events.\n\nThis interface inherits from the `ExtendableEvent` interface.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ExtendableMessageEvent.",
    "properties": {
      "data": "Returns the event's data. It can be any data type. If dispatched in `messageerror` event, the property will be `null`.",
      "lasteventid": "Represents, in server-sent events, the last event ID of the event source.",
      "origin": "Returns the origin of the `Client` that sent the message.",
      "ports": "Returns the array containing the `MessagePort` objects representing the ports of the associated message channel.",
      "source": "Returns a reference to the `Client` object that sent the message."
    }
  },
  "FeaturePolicy": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe `FeaturePolicy` interface represents the set of Permissions Policies applied to the current execution context.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/FeaturePolicy.",
    "properties": {
      "allowedfeatures": "Returns a list of names of all features supported by the User Agent and allowed by the Permissions Policy. Note that features appearing on this list might still be behind a user permission.",
      "allowsfeature": "Returns a Boolean that indicates whether or not a particular feature is enabled in the specified context.",
      "features": "Returns a list of names of all features supported by the User Agent. Features whose names appear on the list might not be allowed by the Permissions Policy of the current execution context and/or might be restricted by user-granted permissions.",
      "getallowlistforfeature": "Returns the allow for the specified feature."
    }
  },
  "ElementInternals": {
    "docs": "The **`ElementInternals`** interface of the Document Object Model gives web developers a way to allow custom elements to fully participate in HTML forms. It provides utilities for working with these elements in the same way you would work with any standard HTML form element, and also exposes the [Accessibility Object Model](https://wicg.github.io/aom/explainer.html) to the element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ElementInternals.",
    "properties": {
      "ariaatomic": "A string reflecting the `aria-atomic` attribute, which indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the `aria-relevant` attribute.",
      "ariaautocomplete": "A string reflecting the `aria-autocomplete` attribute, which indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made.",
      "ariabusy": "A string reflecting the `aria-busy` attribute, which indicates whether an element is being modified, as assistive technologies may want to wait until the modifications are complete before exposing them to the user.",
      "ariachecked": "A string reflecting the `aria-checked` attribute, which indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets that have a checked state.",
      "ariacolcount": "A string reflecting the `aria-colcount` attribute, which defines the number of columns in a table, grid, or treegrid.",
      "ariacolindex": "A string reflecting the `aria-colindex` attribute, which defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.",
      "ariacolindextext": "A string reflecting the `aria-colindextext` attribute, which defines a human readable text alternative of aria-colindex.",
      "ariacolspan": "A string reflecting the `aria-colspan` attribute, which defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.",
      "ariacurrent": "A string reflecting the `aria-current` attribute, which indicates the element that represents the current item within a container or set of related elements.",
      "ariadescription": "A string reflecting the `aria-description` attribute, which defines a string value that describes or annotates the current ElementInternals.",
      "ariadisabled": "A string reflecting the `aria-disabled` attribute, which indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.",
      "ariaexpanded": "A string reflecting the `aria-expanded` attribute, which indicates whether a grouping element owned or controlled by this element is expanded or collapsed.",
      "ariahaspopup": "A string reflecting the `aria-haspopup` attribute, which indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an ElementInternals.",
      "ariahidden": "A string reflecting the `aria-hidden` attribute, which indicates whether the element is exposed to an accessibility API.",
      "ariakeyshortcuts": "A string reflecting the `aria-keyshortcuts` attribute, which indicates keyboard shortcuts that an author has implemented to activate or give focus to an ElementInternals.",
      "arialabel": "A string reflecting the `aria-label` attribute, which defines a string value that labels the current ElementInternals.",
      "arialevel": "A string reflecting the `aria-level` attribute, which defines the hierarchical level of an element within a structure.",
      "arialive": "A string reflecting the `aria-live` attribute, which indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.",
      "ariamodal": "A string reflecting the `aria-modal` attribute, which indicates whether an element is modal when displayed.",
      "ariamultiline": "A string reflecting the `aria-multiline` attribute, which indicates whether a text box accepts multiple lines of input or only a single line.",
      "ariamultiselectable": "A string reflecting the `aria-multiselectable` attribute, which indicates that the user may select more than one item from the current selectable descendants.",
      "ariaorientation": "A string reflecting the `aria-orientation` attribute, which indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.",
      "ariaplaceholder": "A string reflecting the `aria-placeholder` attribute, which defines a short hint intended to aid the user with data entry when the control has no value.",
      "ariaposinset": "A string reflecting the `aria-posinset` attribute, which defines an element's number or position in the current set of listitems or treeitems.",
      "ariapressed": "A string reflecting the `aria-pressed` attribute, which indicates the current \"pressed\" state of toggle buttons.",
      "ariareadonly": "A string reflecting the `aria-readonly` attribute, which indicates that the element is not editable, but is otherwise operable.",
      "ariarelevant": "A string reflecting the `aria-relevant` attribute, which indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. This is used to describe what changes in an `aria-live` region are relevant and should be announced.",
      "ariarequired": "A string reflecting the `aria-required` attribute, which indicates that user input is required on the element before a form may be submitted.",
      "ariaroledescription": "A string reflecting the `aria-roledescription` attribute, which defines a human-readable, author-localized description for the role of an Element.",
      "ariarowcount": "A string reflecting the `aria-rowcount` attribute, which defines the total number of rows in a table, grid, or treegrid.",
      "ariarowindex": "A string reflecting the `aria-rowindex` attribute, which defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.",
      "ariarowindextext": "A string reflecting the `aria-rowindextext` attribute, which defines a human readable text alternative of aria-rowindex.",
      "ariarowspan": "A string reflecting the `aria-rowspan` attribute, which defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.",
      "ariaselected": "A string reflecting the `aria-selected` attribute, which indicates the current \"selected\" state of elements that have a selected state.",
      "ariasetsize": "A string reflecting the `aria-setsize` attribute, which defines the number of items in the current set of listitems or treeitems.",
      "ariasort": "A string reflecting the `aria-sort` attribute, which indicates if items in a table or grid are sorted in ascending or descending order.",
      "ariavaluemax": "A string reflecting the `aria-valueMax` attribute, which defines the maximum allowed value for a range widget.",
      "ariavaluemin": "A string reflecting the `aria-valueMin` attribute, which defines the minimum allowed value for a range widget.",
      "ariavaluenow": "A string reflecting the `aria-valueNow` attribute, which defines the current value for a range widget.",
      "ariavaluetext": "A string reflecting the `aria-valuetext` attribute, which defines the human-readable text alternative of aria-valuenow for a range widget.",
      "checkvalidity": "Checks if an element meets any constraint validation rules applied to it.",
      "form": "Returns the `HTMLFormElement` associated with this element.",
      "labels": "Returns a `NodeList` of all of the label elements associated with this element.",
      "reportvalidity": "Checks if an element meets any constraint validation rules applied to it, and also sends a validation message to the user agent.",
      "role": "A string which contains an ARIA role. A full list of ARIA roles can be found on the ARIA techniques page.",
      "setformvalue": "Sets the element's submission value and state, communicating these to the user agent.",
      "setvalidity": "Sets the validity of the element.",
      "shadowroot": "Returns the `ShadowRoot` object associated with this element.",
      "states": "Returns the `CustomStateSet` associated with this element.",
      "validationmessage": "A string containing the validation message of this element.",
      "validity": "Returns a `ValidityState` object which represents the different validity states the element can be in, with respect to constraint validation.",
      "willvalidate": "A boolean value which returns true if the element is a submittable element that is a candidate for\n      constraint validation."
    }
  },
  "FetchEvent": {
    "docs": "This is the event type for `fetch` events dispatched on the service worker global scope. It contains information about the fetch, including the request and how the receiver will treat the response. It provides the `event.respondWith()` method, which allows us to provide a response to this fetch.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent.",
    "properties": {
      "clientid": "The `id` of the same-origin `client` that initiated the fetch.",
      "handled": "A promise that is pending while the event has not been handled, and fulfilled once it has.",
      "preloadresponse": "A `Promise` for a `Response`, or `undefined` if this fetch is not a navigation, or navigation preload is not enabled.",
      "replacesclientid": "The `id` of the `client` that is being replaced during a page navigation.",
      "request": "The `Request` the browser intends to make.",
      "respondwith": "Prevent the browser's default fetch handling, and provide (a promise for) a response yourself.",
      "resultingclientid": "The `id` of the `client` that replaces the previous client during a page navigation."
    }
  },
  "File": {
    "docs": "**Note:** This feature is available in Web Workers\n\nThe **`File`** interface provides information about files and allows JavaScript in a web page to access their content.\n\n`File` objects are generally retrieved from a `FileList` object returned as a result of a user selecting files using the `<input>` element, or from a drag and drop operation's `DataTransfer` object.\n\nA `File` object is a specific kind of `Blob`, and can be used in any context that a Blob can. In particular, `FileReader`, `URL.createObjectURL()`, `createImageBitmap()`, the `body` option to `fetch()`, and `XMLHttpRequest.send()` accept both `Blob`s and `File`s.\n\nSee Using files from web applications for more information and examples.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/File.",
    "properties": {
      "lastmodified": "Returns the last modified time of the file, in millisecond since the UNIX epoch (January 1st, 1970 at Midnight).",
      "lastmodifieddate": "Returns the last modified `Date` of the file referenced by the `File` object.",
      "name": "Returns the name of the file referenced by the `File` object.",
      "webkitrelativepath": "Returns the path the URL of the `File` is relative to."
    }
  },
  "EyeDropper": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`EyeDropper`** interface represents an instance of an eyedropper tool that can be opened and used by the user to select colors from the screen.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/EyeDropper.",
    "properties": {
      "open": "Returns a promise that resolves to an object that gives access to the selected color."
    }
  },
  "FileReaderSync": {
    "docs": "The **`FileReaderSync`** interface allows to read `File` or `Blob` objects synchronously. This interface is only available in workers as it enables synchronous I/O that could potentially block.\n\n**Note:** This feature is available in Web Workers\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/FileReaderSync.",
    "properties": {
      "readasarraybuffer": "This method converts a specified `Blob` or a `File` into an `ArrayBuffer` representing the input data as a binary string.",
      "readasbinarystring": "This method converts a specified `Blob` or a `File` into a string representing the input data as a binary string. This method is deprecated, consider using `readAsArrayBuffer()` instead.",
      "readasdataurl": "This method converts a specified `Blob` or a `File` into a string representing the input data as a data URL.",
      "readastext": "This method converts a specified `Blob` or a `File` into a string representing the input data as a text string. The optional **`encoding`** parameter indicates the encoding to be used (e.g., iso-8859-1 or UTF-8). If not present, the method will apply a detection algorithm for it."
    }
  },
  "FileSystem": {
    "docs": "The File and Directory Entries API interface **`FileSystem`** is used to represent a file system. These objects can be obtained from the `filesystem` property on any file system entry. Some browsers offer additional APIs to create and manage file systems, such as Chrome's `requestFileSystem()` method.\n\nThis interface will not grant you access to the users' filesystem. Instead, you will have a \"virtual drive\" within the browser sandbox if you want to gain access to the users' file system, you need to invoke the user, for example by installing a Chrome extension. The relevant Chrome API can be found [here](https://developer.chrome.com/docs/extensions/reference/fileSystem/).\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/FileSystem.",
    "properties": {
      "name": "A string representing the file system's name. This name is unique among the entire list of exposed file systems.",
      "root": "A `FileSystemDirectoryEntry` object which represents the file system's root directory. Through this object, you can gain access to all files and directories in the file system."
    }
  },
  "ExtendableEvent": {
    "docs": "The **`ExtendableEvent`** interface extends the lifetime of the `install` and `activate` events dispatched on the global scope as part of the service worker lifecycle. This ensures that any functional events (like `FetchEvent`) are not dispatched until it upgrades database schemas and deletes the outdated cache entries.\n\nIf `waitUntil()` is called outside of the `ExtendableEvent` handler, the browser should throw an `InvalidStateError`; note also that multiple calls will stack up, and the resulting promises will be added to the list of [extend lifetime promises](https://w3c.github.io/ServiceWorker/#extendableevent-extend-lifetime-promises).\n\n**Note:** The behavior described in the above paragraph was fixed in Firefox 43 (see [Firefox bug 1180274](https://bugzil.la/1180274).)\n\nThis interface inherits from the `Event` interface.\n\n**Note:** This interface is only available when the global scope is a `ServiceWorkerGlobalScope`. It is not available when it is a `Window`, or the scope of another kind of worker.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ExtendableEvent.",
    "properties": {
      "waituntil": "Extends the lifetime of the event. It is intended to be called in the `install` event handler for the `installing` worker and on the `activate` event handler for the `active` worker."
    }
  },
  "FileEntrySync": {
    "docs": "**Non-standard:** This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n\n**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe `FileEntrySync` interface represents a file in a file system. It lets you write content to a file.\n\n**Warning:** This interface is deprecated and is no more on the standard track.\n    Do not use it anymore. Use the File and Directory Entries API instead.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/FileEntrySync."
  },
  "FileSystemDirectoryEntry": {
    "docs": "The **`FileSystemDirectoryEntry`** interface of the File and Directory Entries API represents a directory in a file system. It provides methods which make it possible to access and manipulate the files in a directory, as well as to access the entries within the directory.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryEntry."
  },
  "FederatedCredential": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`FederatedCredential`** interface of the Credential Management API provides information about credentials from a federated identity provider. A federated identity provider is an entity that a website trusts to correctly authenticate a user, and that provides an API for that purpose. [OpenID Connect](https://openid.net/developers/specs/) is an example of a federated identity provider framework.\n\n**Note:** The Federated Credential Management API (FedCM) provides a more complete solution for handling identity federation in the browser, and uses the `IdentityCredential` type.\n\nIn browsers that support it, an instance of this interface may be passed in the `credential` member of the `init` object for global `fetch()`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/FederatedCredential.",
    "properties": {
      "protocol": "Returns a string containing a credential's federated identity protocol.",
      "provider": "Returns a string containing a credential's federated identity provider."
    }
  },
  "FileList": {
    "docs": "**Note:** This feature is available in Web Workers\n\nThe **`FileList`** interface represents an object of this type returned by the `files` property of the HTML `<input>` element; this lets you access the list of files selected with the `<input type=\"file\">` element. It's also used for a list of files dropped into web content when using the drag and drop API; see the `DataTransfer` object for details on this usage.\n\nAll `<input>` element nodes have a `files` attribute of type `FileList` on them which allows access to the items in this list. For example, if the HTML includes the following file input:\n\n```\n<input id=\"fileItem\" type=\"file\" />\n```\n\nThe following line of code fetches the first file in the node's file list as a `File` object:\n\n```\nconst file = document.getElementById(\"fileItem\").files[0];\n```\n\n**Note:** This interface was an [attempt to create an unmodifiable list](https://stackoverflow.com/questions/74630989/why-use-domstringlist-rather-than-an-array/74641156#74641156) and only continues to be supported to not break code that's already using it. Modern APIs use types that wrap around ECMAScript array types instead, so you can treat them like ECMAScript arrays, and at the same time impose additional semantics on their usage (such as making their items read-only).\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/FileList."
  },
  "FileSystemDirectoryHandle": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`FileSystemDirectoryHandle`** interface of the File System API provides a handle to a file system directory.\n\nThe interface can be accessed via the `window.showDirectoryPicker()`, `StorageManager.getDirectory()`, `DataTransferItem.getAsFileSystemHandle()`, and `FileSystemDirectoryHandle.getDirectoryHandle()` methods.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryHandle.",
    "properties": {
      "entries": "Returns a new async iterator of a given object's own enumerable property `[key, value]` pairs.",
      "getdirectoryhandle": "Returns a `Promise` fulfilled with a `FileSystemDirectoryHandle` for a subdirectory with the specified name within the directory handle on which the method is called.",
      "getfilehandle": "Returns a `Promise` fulfilled with a `FileSystemFileHandle` for a file with the specified name, within the directory the method is called.",
      "keys": "Returns a new async iterator containing the keys for each item in `FileSystemDirectoryHandle`.",
      "removeentry": "Attempts to asynchronously remove an entry if the directory handle contains a file or directory called the name specified.",
      "resolve": "Returns a `Promise` fulfilled with an `Array` of directory names from the parent handle to the specified child entry, with the name of the child entry as the last array item.",
      "values": "Returns a new async iterator containing the values for each index in the `FileSystemDirectoryHandle` object."
    }
  },
  "FileReader": {
    "docs": "**Note:** This feature is available in Web Workers\n\nThe **`FileReader`** object lets web applications asynchronously read the contents of files (or raw data buffers) stored on the user's computer, using `File` or `Blob` objects to specify the file or data to read.\n\nFile objects may be obtained from a `FileList` object returned as a result of a user selecting files using the `<input>` element, or from a drag and drop operation's `DataTransfer` object.\n\n`FileReader` can only access the contents of files that the user has explicitly selected, either using an HTML `<input type=\"file\">` element or by drag and drop. It cannot be used to read a file by pathname from the user's file system. To read files on the client's file system by pathname, use the File System Access API. To read server-side files, use `fetch()`, with CORS permission if reading cross-domain.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/FileReader.",
    "properties": {
      "abort": "Aborts the read operation. Upon return, the `readyState` will be `DONE`.",
      "error": "A `DOMException` representing the error that occurred while reading the file.",
      "readasarraybuffer": "Starts reading the contents of the specified `Blob`, once finished, the `result` attribute contains an `ArrayBuffer` representing the file's data.",
      "readasbinarystring": "Starts reading the contents of the specified `Blob`, once finished, the `result` attribute contains the raw binary data from the file as a string.",
      "readasdataurl": "Starts reading the contents of the specified `Blob`, once finished, the `result` attribute contains a `data:` URL representing the file's data.",
      "readastext": "Starts reading the contents of the specified `Blob`, once finished, the `result` attribute contains the contents of the file as a text string. An optional encoding name can be specified.",
      "readystate": "A number indicating the state of the `FileReader`. This is one of the following:",
      "result": "The file's contents. This property is only valid after the read operation is complete, and the format of the data depends on which of the methods was used to initiate the read operation."
    }
  },
  "FileSystemDirectoryReader": {
    "docs": "The `FileSystemDirectoryReader` interface of the File and Directory Entries API lets you access the `FileSystemFileEntry`-based objects (generally `FileSystemFileEntry` or `FileSystemDirectoryEntry`) representing each entry in a directory.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryReader."
  },
  "FileSystemEntry": {
    "docs": "The **`FileSystemEntry`** interface of the File and Directory Entries API represents a single entry in a file system. The entry can be a file or a directory (directories are represented by the `FileSystemDirectoryEntry` interface). It includes methods for working with filesâincluding copying, moving, removing, and reading filesâas well as information about a file it points toâincluding the file name and its path from the root to the entry.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry."
  },
  "FileSystemFileEntry": {
    "docs": "The **`FileSystemFileEntry`** interface of the File and Directory Entries API represents a file in a file system. It offers properties describing the file's attributes, as well as the `file()` method, which creates a `File` object that can be used to read the file.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/FileSystemFileEntry."
  },
  "FileSystemFileHandle": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`FileSystemFileHandle`** interface of the File System API represents a handle to a file system entry. The interface is accessed through the `window.showOpenFilePicker()` method.\n\nNote that read and write operations depend on file-access permissions that do not persist after a page refresh if no other tabs for that origin remain open. The `queryPermission` method of the `FileSystemHandle` interface can be used to verify permission state before accessing a file.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/FileSystemFileHandle."
  },
  "FileSystemHandle": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`FileSystemHandle`** interface of the `File System API` is an object which represents a file or directory entry. Multiple handles can represent the same entry. For the most part you do not work with `FileSystemHandle` directly but rather its child interfaces `FileSystemFileHandle` and `FileSystemDirectoryHandle`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/FileSystemHandle."
  },
  "FileSystemSync": {
    "docs": "**Non-standard:** This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n\n**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nIn the File and Directory Entries API, a `FileSystemSync` object represents a file system. It has two properties.\n\n**Warning:** This interface is deprecated and is no more on the standard track.\n    Do not use it anymore. Use the File and Directory Entries API instead.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/FileSystemSync."
  },
  "FileSystemWritableFileStream": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`FileSystemWritableFileStream`** interface of the File System API is a `WritableStream` object with additional convenience methods, which operates on a single file on disk. The interface is accessed through the `FileSystemFileHandle.createWritable()` method.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/FileSystemWritableFileStream.",
    "properties": {
      "seek": "Updates the current file cursor offset to the position (in bytes) specified.",
      "truncate": "Resizes the file associated with the stream to be the specified size in bytes.",
      "write": "Writes content into the file the method is called on, at the current file cursor offset."
    }
  },
  "FocusEvent": {
    "docs": "The **`FocusEvent`** interface represents focus-related events, including `focus`, `blur`, `focusin`, and `focusout`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/FocusEvent.",
    "properties": {
      "relatedtarget": "An `EventTarget` representing a secondary target for this event. In some cases (such as when tabbing in or out a page), this property may be set to `null` for security reasons."
    }
  },
  "FontFaceSet": {
    "docs": "The **`FontFaceSet`** interface of the CSS Font Loading API manages the loading of font-faces and querying of their download status.\n\nA `FontFaceSet` instance is a `Set`-like object that can hold an ordered set of `FontFace` objects.\n\nThis property is available as `Document.fonts`, or `self.fonts` in web workers.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/FontFaceSet.",
    "properties": {
      "add": "Adds a font to the font set.",
      "check": "A boolean value that indicates whether a font is loaded, but doesn't initiate a load when it isn't.",
      "clear": "Removes all manually-added fonts from the font set. [CSS-connected](https://www.w3.org/TR/css-font-loading-3/#css-connected) fonts are unaffected.",
      "delete": "Removes a manually-added font from the font set. [CSS-connected](https://www.w3.org/TR/css-font-loading-3/#css-connected) fonts are unaffected.",
      "entries": "Returns a new iterator with the values for each element in the `FontFaceSet` in insertion order.",
      "foreach": "Executes a provided function for each value in the `FontFaceSet` object.",
      "has": "Returns a `Boolean` asserting whether an element is present with the given value.",
      "keys": "An alias for `CustomStateSet.values()`.",
      "load": "Returns a `Promise` which resolves to a list of font-faces for a requested font.",
      "ready": "`Promise` which resolves once font loading and layout operations have completed.",
      "size": "Returns the number of values in the `FontFaceSet`.",
      "status": "Indicates the font-face's loading status. It will be one of `'loading'` or `'loaded'`.",
      "values": "Returns a new iterator object that yields the values for each element in the `FontFaceSet` object in insertion order."
    }
  },
  "FileSystemSyncAccessHandle": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`FileSystemSyncAccessHandle`** interface of the File System API represents a synchronous handle to a file system entry.\n\nThis class is only accessible inside dedicated Web Workers (so that its methods do not block execution on the main thread) for files within the origin private file system, which is not visible to end-users.\n\nAs a result, its methods are not subject to the same security checks as methods running on files within the user-visible file system, and so are much more performant. This makes them suitable for significant, large-scale file updates such as [SQLite](https://www.sqlite.org/wasm) database modifications.\n\nThe interface is accessed through the `FileSystemFileHandle.createSyncAccessHandle()` method.\n\n**Note:** In earlier versions of the spec, `close()`, `flush()`, `getSize()`, and `truncate()` were wrongly specified as asynchronous methods, and older versions of some browsers implement them in this way. However, all current browsers that support these methods implement them as synchronous methods.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/FileSystemSyncAccessHandle."
  },
  "FormData": {
    "docs": "The **`FormData`** interface provides a way to construct a set of key/value pairs representing form fields and their values, which can be sent using the `fetch()`, `XMLHttpRequest.send()` or `navigator.sendBeacon()` methods. It uses the same format a form would use if the encoding type were set to `\"multipart/form-data\"`.\n\nYou can also pass it directly to the `URLSearchParams` constructor if you want to generate query parameters in the way a `<form>` would do if it were using simple `GET` submission.\n\nAn object implementing `FormData` can directly be used in a `for...of` structure, instead of `entries()`: `for (const p of myFormData)` is equivalent to `for (const p of myFormData.entries())`.\n\n**Note:** This feature is available in Web Workers.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/FormData.",
    "properties": {
      "append": "Appends a new value onto an existing key inside a `FormData` object, or adds the key if it does not already exist.",
      "delete": "Deletes a key/value pair from a `FormData` object.",
      "entries": "Returns an iterator that iterates through all key/value pairs contained in the `FormData`.",
      "get": "Returns the first value associated with a given key from within a `FormData` object.",
      "getall": "Returns an array of all the values associated with a given key from within a `FormData`.",
      "has": "Returns whether a `FormData` object contains a certain key.",
      "keys": "Returns an iterator iterates through all keys of the key/value pairs contained in the `FormData`.",
      "set": "Sets a new value for an existing key inside a `FormData` object, or adds the key/value if it does not already exist.",
      "values": "Returns an iterator that iterates through all values contained in the `FormData`."
    }
  },
  "FormDataEvent": {
    "docs": "The **`FormDataEvent`** interface represents a `formdata` event â such an event is fired on an `HTMLFormElement` object after the entry list representing the form's data is constructed. This happens when the form is submitted, but can also be triggered by the invocation of a `FormData()` constructor.\n\nThis allows a `FormData` object to be quickly obtained in response to a `formdata` event firing, rather than needing to put it together yourself when you wish to submit form data via a method like `fetch()` (see Using FormData objects).\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/FormDataEvent.",
    "properties": {
      "formdata": "Contains the `FormData` object representing the data contained in the form when the event was fired."
    }
  },
  "GPUAdapter": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`GPUAdapter`** interface of the WebGPU API represents a GPU adapter. From this you can request a `GPUDevice`, adapter info, features, and limits.\n\nA `GPUAdapter` object is requested using the `GPU.requestAdapter()` method.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/GPUAdapter."
  },
  "GPUAdapterInfo": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`GPUAdapterInfo`** interface of the WebGPU API contains identifying information about a `GPUAdapter`.\n\nA `GPUAdapterInfo` object instance is requested using the `GPUAdapter.requestAdapterInfo()` method.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/GPUAdapterInfo."
  },
  "FontFace": {
    "docs": "The **`FontFace`** interface of the CSS Font Loading API represents a single usable font face.\n\nThis interface defines the source of a font face, either a URL to an external resource or a buffer, and font properties such as `style`, `weight`, and so on.\n  For URL font sources it allows authors to trigger when the remote font is fetched and loaded, and to track loading status.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/FontFace.",
    "properties": {
      "ascentoverride": "A string that retrieves or sets the ascent metric of the font. It is equivalent to the `ascent-override` descriptor.",
      "descentoverride": "A string that retrieves or sets the descent metric of the font. It is equivalent to the `descent-override` descriptor.",
      "display": "A string that determines how a font face is displayed based on whether and when it is downloaded and ready to use.",
      "family": "A string that retrieves or sets the family of the font. It is equivalent to the `font-family` descriptor.",
      "featuresettings": "A string that retrieves or sets infrequently used font features that are not available from a font's variant properties. It is equivalent to the CSS `font-feature-settings` property.",
      "linegapoverride": "A string that retrieves or sets the line-gap metric of the font. It is equivalent to the `line-gap-override` descriptor.",
      "load": "Loads a font based on current object's constructor-passed requirements, including a location or source buffer, and returns a `Promise` that resolves with the current FontFace object.",
      "loaded": "Returns a `Promise` that resolves with the current `FontFace` object when the font specified in the object's constructor is done loading or rejects with a `SyntaxError` `DOMException`.",
      "status": "Returns an enumerated value indicating the status of the font, one of `\"unloaded\"`, `\"loading\"`, `\"loaded\"`, or `\"error\"`.",
      "stretch": "A string that retrieves or sets how the font stretches. It is equivalent to the `font-stretch` descriptor.",
      "style": "A string that retrieves or sets the style of the font. It is equivalent to the `font-style` descriptor.",
      "unicoderange": "A string that retrieves or sets the range of unicode code points encompassing the font. It is equivalent to the `unicode-range` descriptor.",
      "variant": "A string that retrieves or sets the variant of the font.",
      "variationsettings": "A string that retrieves or sets the variation settings of the font. It is equivalent to the `font-variation-settings` descriptor.",
      "weight": "A string that contains the weight of the font. It is equivalent to the `font-weight` descriptor."
    }
  },
  "FontData": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`FontData`** interface of the Local Font Access API represents a single local font face.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/FontData.",
    "properties": {
      "blob": "Returns a `Promise` that fulfills with a `Blob` containing the raw bytes of the underlying font file.",
      "family": "Returns the family of the font face.",
      "fullname": "Returns the full name of the font face.",
      "postscriptname": "Returns the PostScript name of the font face.",
      "style": "Returns the style of the font face."
    }
  },
  "GPUBindGroup": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`GPUBindGroup`** interface of the WebGPU API is based on a `GPUBindGroupLayout` and defines a set of resources to be bound together in a group and how those resources are used in shader stages.\n\nA `GPUBindGroup` object instance is created using the `GPUDevice.createBindGroup()` method.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/GPUBindGroup."
  },
  "GPUBindGroupLayout": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`GPUBindGroupLayout`** interface of the WebGPU API defines the structure and purpose of related GPU resources such as buffers that will be used in a pipeline, and is used as a template when creating `GPUBindGroup`s.\n\nA `GPUBindGroupLayout` object instance is created using the `GPUDevice.createBindGroupLayout()` method.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/GPUBindGroupLayout."
  },
  "GPU": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`GPU`** interface of the WebGPU API is the starting point for using WebGPU. It can be used to return a `GPUAdapter` from which you can request devices, configure features and limits, and more.\n\nThe `GPU` object for the current context is accessed via the `Navigator.gpu` or `WorkerNavigator.gpu` properties.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/GPU."
  },
  "GPUCanvasContext": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`GPUCanvasContext`** interface of the WebGPU API represents the WebGPU rendering context of a `<canvas>` element, returned via an `HTMLCanvasElement.getContext()` call with a `contextType` of `\"webgpu\"`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/GPUCanvasContext."
  },
  "FragmentDirective": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`FragmentDirective`** interface is an object exposed for feature detectability, that is, whether or not a browser supports text fragments.\n\nIt is accessed via the `Document.fragmentDirective` property.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/FragmentDirective."
  },
  "FontFaceSetLoadEvent": {
    "docs": "The **`FontFaceSetLoadEvent`** interface of the CSS Font Loading API represents events fired at a `FontFaceSet` after it starts loading font faces.\n\nEvents are fired when font loading starts (`loading`), loading completes (`loadingdone`) or there is an error loading one of the fonts (`loadingerror`).\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/FontFaceSetLoadEvent.",
    "properties": {
      "fontfaces": "Returns an array of `FontFace` instances.\n      Depending on the event, the array will contain font faces that are loading (`loading`), have successfully loaded (`loadingdone`), or have failed to load (`loadingerror`)."
    }
  },
  "GPUCommandEncoder": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`GPUCommandEncoder`** interface of the WebGPU API represents a command encoder, used to encode commands to be issued to the GPU.\n\nA `GPUCommandEncoder` object instance is created via the `GPUDevice.createCommandEncoder()` property.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/GPUCommandEncoder."
  },
  "GPUBuffer": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`GPUBuffer`** interface of the WebGPU API represents a block of memory that can be used to store raw data to use in GPU operations.\n\nA `GPUBuffer` object instance is created using the `GPUDevice.createBuffer()` method.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/GPUBuffer."
  },
  "GPUComputePipeline": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`GPUComputePipeline`** interface of the WebGPU API represents a pipeline that controls the compute shader stage and can be used in a `GPUComputePassEncoder`.\n\nA `GPUComputePipeline` object instance can be created using the `GPUDevice.createComputePipeline()` or `GPUDevice.createComputePipelineAsync()` methods.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/GPUComputePipeline."
  },
  "GPUCommandBuffer": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`GPUCommandBuffer`** interface of the WebGPU API represents a pre-recorded list of GPU commands that can be submitted to a `GPUQueue` for execution.\n\nA `GPUCommandBuffer` is created via the `GPUCommandEncoder.finish()` method; the GPU commands recorded within are submitted for execution by passing the `GPUCommandBuffer` into the parameter of a `GPUQueue.submit()` call.\n\n**Note:** Once a `GPUCommandBuffer` object has been submitted, it cannot be used again.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/GPUCommandBuffer."
  },
  "GPUCompilationMessage": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`GPUCompilationMessage`** interface of the WebGPU API represents a single informational, warning, or error message generated by the GPU shader module compiler.\n\nAn array of `GPUCompilationMessage` objects is available in the `messages` property of the `GPUCompilationInfo` object accessed via `GPUShaderModule.getCompilationInfo()`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/GPUCompilationMessage."
  },
  "GPUDevice": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`GPUDevice`** interface of the WebGPU API represents a logical GPU device. This is the main interface through which the majority of WebGPU functionality is accessed.\n\nA `GPUDevice` object is requested using the `GPUAdapter.requestDevice()` method.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/GPUDevice."
  },
  "GPUDeviceLostInfo": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`GPUDeviceLostInfo`** interface of the WebGPU API represents the object returned when the `GPUDevice.lost` `Promise` resolves. This provides information as to why a device has been lost.\n\nSee the `GPUDevice.lost` page for more information about \"lost\" state.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/GPUDeviceLostInfo."
  },
  "GPUError": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`GPUError`** interface of the WebGPU API is the base interface for errors surfaced by `GPUDevice.popErrorScope` and the `uncapturederror` event.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/GPUError."
  },
  "GPUInternalError": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`GPUInternalError`** interface of the WebGPU API describes an application error indicating that an operation did not pass the WebGPU API's validation constraints.\n\nIt represents one of the types of errors surfaced by `GPUDevice.popErrorScope` and the `uncapturederror` event.\n\nInternal errors occur when something happens in the WebGPU implementation that wasn't caught by validation and wasn't clearly identifiable as an out-of-memory error. It generally means that an operation your code performed hit a system limit in a way that was difficult to express with WebGPU's supported limits. The same operation might succeed on a different device. These can only be raised by pipeline creation, usually if the shader is too complex for the device.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/GPUInternalError."
  },
  "GPUCompilationInfo": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`GPUCompilationInfo`** interface of the WebGPU API represents an array of `GPUCompilationMessage` objects generated by the GPU shader module compiler to help diagnose problems with shader code.\n\n`GPUCompilationInfo` is accessed via `GPUShaderModule.getCompilationInfo()`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/GPUCompilationInfo."
  },
  "GPUPipelineLayout": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`GPUPipelineLayout`** interface of the WebGPU API defines the `GPUBindGroupLayout`s used by a pipeline. `GPUBindGroup`s used with the pipeline during command encoding must have compatible `GPUBindGroupLayout`s.\n\nA `GPUPipelineLayout` object instance is created using the `GPUDevice.createPipelineLayout()` method.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/GPUPipelineLayout."
  },
  "GPUQuerySet": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`GPUQuerySet`** interface of the WebGPU API is used to record the results of queries on passes, such as occlusion or timestamp queries.\n\n- Occlusion queries are available on render passes to query whether any fragment samples pass all the per-fragment tests for a set of drawing commands (including scissor, sample mask, alpha to coverage, stencil, and depth tests). To run an occlusion query, an appropriate `GPUQuerySet` must be provided as the value of the `occlusionQuerySet` descriptor property when invoking `GPUCommandEncoder.beginRenderPass()` to run a render pass.\n- Timestamp queries allow applications to write timestamps to a `GPUQuerySet`. To run a timestamp query, appropriate `GPUQuerySet`s must be provided inside the value of the `timestampWrites` descriptor property when invoking `GPUCommandEncoder.beginRenderPass()` to run a render pass, or `GPUCommandEncoder.beginComputePass()` to run a compute pass. Alternatively, you can run a single timestamp query at any time by invoking `GPUCommandEncoder.writeTimeStamp()` with an appropriate `GPUQuerySet` as a parameter.\n\n**Note:** To use timestamp queries, the `timestamp-query` feature must be enabled in the `GPUDevice`.\n\nA `GPUQuerySet` object instance is created using the `GPUDevice.createQuerySet()` method.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/GPUQuerySet."
  },
  "GPUOutOfMemoryError": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`GPUOutOfMemoryError`** interface of the WebGPU API describes an out-of-memory (oom) error indicating that there was not enough free memory to complete the requested operation.\n\nIt represents one of the types of errors surfaced by `GPUDevice.popErrorScope` and the `uncapturederror` event.\n\nOut-of-memory errors should be relatively rare in a well-behaved app but are less predictable than `GPUValidationError`s. This is because they are dependent on the device your app is running on as well as other apps that are using GPU resources at the time.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/GPUOutOfMemoryError."
  },
  "GPUComputePassEncoder": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`GPUComputePassEncoder`** interface of the WebGPU API encodes commands related to controlling the compute shader stage, as issued by a `GPUComputePipeline`. It forms part of the overall encoding activity of a `GPUCommandEncoder`.\n\nA compute pipeline contains a single compute stage in which a compute shader takes general data, processes it in parallel across a specified number of workgroups, then returns the result in one or more buffers.\n\nA `GPUComputePassEncoder` object instance is created via the `GPUCommandEncoder.beginComputePass()` property.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/GPUComputePassEncoder."
  },
  "GPURenderBundle": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`GPURenderBundle`** interface of the WebGPU API represents a container for pre-recorded bundles of commands.\n\nThe command bundles are encoded using a `GPURenderBundleEncoder`; once the desired commands have been encoded, they are recorded into a `GPURenderBundle` object instance using the `GPURenderBundleEncoder.finish()` method.\n\nThese command bundles can then be reused across multiple render passes by passing the `GPURenderBundle` objects into `GPURenderPassEncoder.executeBundles()` calls. Reusing pre-recoded commands can significantly improve app performance in situations where JavaScript draw call overhead is a bottleneck. Render bundles are most effective in situations where a batch of objects will be drawn the same way across multiple views or frames, with the only differences being the buffer content being used (such as updated matrix uniforms).\n\nA good example is VR rendering. Recording the rendering as a render bundle and then tweaking the view matrix and replaying it for each eye is a more efficient way to issue draw calls for both renderings of the scene.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/GPURenderBundle."
  },
  "GPURenderBundleEncoder": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`GPURenderBundleEncoder`** interface of the WebGPU API is used to pre-record bundles of commands.\n\nThe command bundles are encoded by calling the methods of `GPURenderBundleEncoder`; once the desired commands have been encoded, they are recorded into a `GPURenderBundle` object instance using the `GPURenderBundleEncoder.finish()` method. These render bundles can then be reused across multiple render passes by passing the `GPURenderBundle` objects into `GPURenderPassEncoder.executeBundles()` calls.\n\nIn effect, this is like a partial render pass â `GPURenderBundleEncoder`s have all the same functionality available as `GPURenderPassEncoder`s, except that they can't begin and end occlusion queries, and can't set the scissor rect, viewport, blend constant, and stencil reference. The `GPURenderBundle` will inherit all these values from the `GPURenderPassEncoder` that executes it.\n\n**Note:** Currently set vertex buffers, index buffers, bind groups, and pipeline are all cleared prior to executing a render bundle, and once the render bundle has finished executing.\n\nReusing pre-recoded commands can significantly improve app performance in situations where JavaScript draw call overhead is a bottleneck. Render bundles are most effective in situations where a batch of objects will be drawn the same way across multiple views or frames, with the only differences being the buffer content being used (such as updated matrix uniforms). A good example is VR rendering. Recording the rendering as a render bundle and then tweaking the view matrix and replaying it for each eye is a more efficient way to issue draw calls for both renderings of the scene.\n\nA `GPURenderBundleEncoder` object instance is created via the `GPUDevice.createRenderBundleEncoder()` property.\n\n**Note:** The methods of `GPURenderBundleEncoder` are functionally identical to their equivalents available on `GPURenderPassEncoder`, except for `GPURenderBundleEncoder.finish()`, which is similar in purpose to `GPUCommandEncoder.finish()`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/GPURenderBundleEncoder."
  },
  "GPURenderPassEncoder": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`GPURenderPassEncoder`** interface of the WebGPU API encodes commands related to controlling the vertex and fragment shader stages, as issued by a `GPURenderPipeline`. It forms part of the overall encoding activity of a `GPUCommandEncoder`.\n\nA render pipeline renders graphics to `GPUTexture` attachments, typically intended for display in a `<canvas>` element, but it could also render to textures used for other purposes that never appear onscreen. It has two main stages:\n\n- A vertex stage, in which a vertex shader takes positioning data fed into the GPU and uses it to position a series of vertices in 3D space by applying specified effects like rotation, translation, or perspective. The vertices are then assembled into primitives such as triangles (the basic building block of rendered graphics) and rasterized by the GPU to figure out what pixels each one should cover on the drawing canvas.\n- A fragment stage, in which a fragment shader computes the color for each pixel covered by the primitives produced by the vertex shader. These computations frequently use inputs such as images (in the form of textures) that provide surface details and the position and color of virtual lights.\n\nA `GPURenderPassEncoder` object instance is created via the `GPUCommandEncoder.beginRenderPass()` property.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/GPURenderPassEncoder."
  },
  "GPURenderPipeline": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`GPURenderPipeline`** interface of the WebGPU API represents a pipeline that controls the vertex and fragment shader stages and can be used in a `GPURenderPassEncoder` or `GPURenderBundleEncoder`.\n\nA `GPURenderPipeline` object instance can be created using the `GPUDevice.createRenderPipeline()` or `GPUDevice.createRenderPipelineAsync()` methods.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/GPURenderPipeline."
  },
  "GPUPipelineError": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`GPUPipelineError`** interface of the WebGPU API describes a pipeline failure. This is the value received when a `Promise` returned by a `GPUDevice.createComputePipelineAsync()` or `GPUDevice.createRenderPipelineAsync()` call rejects.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/GPUPipelineError."
  },
  "GPUShaderModule": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`GPUShaderModule`** interface of the WebGPU API represents an internal shader module object, a container for [WGSL](https://gpuweb.github.io/gpuweb/wgsl/) shader code that can be submitted to the GPU for execution by a pipeline.\n\nA `GPUShaderModule` object instance is created using `GPUDevice.createShaderModule()`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/GPUShaderModule."
  },
  "GPUQueue": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`GPUQueue`** interface of the WebGPU API controls execution of encoded commands on the GPU.\n\nA device's primary queue is accessed via the `GPUDevice.queue` property.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/GPUQueue."
  },
  "GPUSampler": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`GPUSampler`** interface of the WebGPU API represents an object that can control how shaders transform and filter texture resource data.\n\nA `GPUSampler` object instance is created using the `GPUDevice.createSampler()` method.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/GPUSampler."
  },
  "GPUTexture": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`GPUTexture`** interface of the WebGPU API represents a container used to store 1D, 2D, or 3D arrays of data, such as images, to use in GPU rendering operations.\n\nA `GPUTexture` object instance is created using the `GPUDevice.createTexture()` method.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/GPUTexture."
  },
  "GPUTextureView": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`GPUTextureView`** interface of the WebGPU API represents a view into a subset of the texture resources defined by a particular `GPUTexture`.\n\nA `GPUTextureView` object instance is created using the `GPUTexture.createView()` method.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/GPUTextureView."
  },
  "GPUExternalTexture": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`GPUExternalTexture`** interface of the WebGPU API represents a wrapper object containing an `HTMLVideoElement` snapshot that can be used as a texture in GPU rendering operations.\n\nA `GPUExternalTexture` object instance is created using `GPUDevice.importExternalTexture()`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/GPUExternalTexture."
  },
  "GainNode": {
    "docs": "The `GainNode` interface represents a change in volume. It is an `AudioNode` audio-processing module that causes a given gain to be applied to the input data before its propagation to the output. A `GainNode` always has exactly one input and one output, both with the same number of channels.\n\nThe gain is a unitless value, changing with time, that is multiplied to each corresponding sample of all input channels. If modified, the new gain is instantly applied, causing unaesthetic 'clicks' in the resulting audio. To prevent this from happening, never change the value directly but use the exponential interpolation methods on the `AudioParam` interface.\n\n\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/GainNode.",
    "properties": {
      "gain": "An a-rate `AudioParam` representing the amount of gain to apply. You have to set `AudioParam.value` or use the methods of `AudioParam` to change the effect of gain."
    }
  },
  "Gamepad": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`Gamepad`** interface of the Gamepad API defines an individual gamepad or other controller, allowing access to information such as button presses, axis positions, and id.\n\nA Gamepad object can be returned in one of two ways: via the `gamepad` property of the `gamepadconnected` and `gamepaddisconnected` events, or by grabbing any position in the array returned by the `Navigator.getGamepads()` method.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Gamepad.",
    "properties": {
      "axes": "An array representing the controls with axes present on the device (e.g. analog thumb sticks).",
      "buttons": "An array of `gamepadButton` objects representing the buttons present on the device.",
      "connected": "A boolean indicating whether the gamepad is still connected to the system.",
      "displayid": "Returns the `VRDisplay.displayId` of an associated `VRDisplay` (if relevant) â the `VRDisplay` that the gamepad is controlling the displayed scene of.",
      "hand": "An enum defining what hand the controller is being held in, or is most likely to be held in.",
      "hapticactuators": "An array containing `GamepadHapticActuator` objects, each of which represents haptic feedback hardware available on the controller.",
      "id": "A string containing identifying information about the controller.",
      "index": "An integer that is auto-incremented to be unique for each device currently connected to the system.",
      "mapping": "A string indicating whether the browser has remapped the controls on the device to a known layout.",
      "pose": "A `GamepadPose` object representing the pose information associated with a WebVR controller (e.g. its position and orientation in 3D space).",
      "timestamp": "A `DOMHighResTimeStamp` representing the last time the data for this gamepad was updated.",
      "vibrationactuator": "A `GamepadHapticActuator` object, which represents haptic feedback hardware available on the controller."
    }
  },
  "GamepadButton": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`GamepadButton`** interface defines an individual button of a gamepad or other controller, allowing access to the current state of different types of buttons available on the control device.\n\nA `GamepadButton` object is returned by querying any value of the array returned by the `buttons` property of the `Gamepad` interface.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/GamepadButton.",
    "properties": {
      "pressed": "A boolean value indicating whether the button is currently pressed (`true`) or unpressed (`false`).",
      "touched": "A boolean value indicating whether the button is currently touched (`true`) or not touched (`false`).",
      "value": "A double value used to represent the current state of analog buttons, such as the triggers on many modern gamepads. The values are normalized to the range 0.0 â1.0, with 0.0 representing a button that is not pressed, and 1.0 representing a button that is fully pressed."
    }
  },
  "GamepadHapticActuator": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`GamepadHapticActuator`** interface of the Gamepad API represents hardware in the controller designed to provide haptic feedback to the user (if available), most commonly vibration hardware.\n\nThis interface is accessible through the `Gamepad.hapticActuators` property.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/GamepadHapticActuator.",
    "properties": {
      "playeffect": "Makes the hardware play a specific vibration pattern.",
      "pulse": "Makes the hardware pulse at a certain intensity for a specified duration.",
      "type": "Returns an enum representing the type of the haptic hardware."
    }
  },
  "GPUValidationError": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`GPUValidationError`** interface of the WebGPU API describes an application error indicating that an operation did not pass the WebGPU API's validation constraints.\n\nIt represents one of the types of errors surfaced by `GPUDevice.popErrorScope` and the `uncapturederror` event.\n\nValidation errors occur whenever invalid inputs are given to a WebGPU call. These are consistent, predictable, and should not occur provided your app is well-formed. They will occur in the same way on every device your code runs on, so once you've fixed any errors that show up during development you probably don't need to observe them directly most of the time. An exception to that rule is if you're consuming user-supplied assets, shaders, etc., in which case watching for validation errors while loading could be helpful.\n\n**Note:** We have attempted to provide useful information to help you understand why validation errors are occurring in your WebGPU code in \"Validation\" sections where appropriate, which list criteria to meet to avoid validation errors. See for example the `GPUDevice.createBindGroup()` Validation section.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/GPUValidationError."
  },
  "GamepadPose": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`GamepadPose`** interface of the Gamepad API represents the pose of a WebVR controller at a given timestamp (which includes orientation, position, velocity, and acceleration information).\n\nThis interface is accessible through the `Gamepad.pose` property.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/GamepadPose.",
    "properties": {
      "angularacceleration": "Returns the angular acceleration of the `Gamepad`, in meters per second per second.",
      "angularvelocity": "Returns the angular velocity of the `Gamepad`, in radians per second.",
      "hasorientation": "Returns a boolean indicating whether the gamepad is capable of returning orientation information (`true`) or not (`false`).",
      "hasposition": "Returns a boolean indicating whether the gamepad is capable of returning position information (`true`) or not (`false`).",
      "linearacceleration": "Returns the linear acceleration of the `Gamepad`, in meters per second per second.",
      "linearvelocity": "Returns the linear velocity of the `Gamepad`, in meters per second.",
      "orientation": "Returns the orientation of the `Gamepad`, as a quarternion value.",
      "position": "Returns the position of the `Gamepad` as a 3D vector."
    }
  },
  "GPUSupportedLimits": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`GPUSupportedLimits`** interface of the WebGPU API describes the limits supported by a `GPUAdapter`.\n\nThe `GPUSupportedLimits` object for the current adapter is accessed via the `GPUAdapter.limits` property.\n\nYou should note that, rather than reporting the exact limits of each GPU, browsers will likely report different tier values of different limits to reduce the unique information available to drive-by fingerprinting. For example, the tiers of a certain limit might be 2048, 8192, and 32768. If your GPU's actual limit is 16384, the browser will still report 8192.\n\nGiven that different browsers will handle this differently and the tier values may change over time, it is hard to provide an accurate account of what limit values to expect â thorough testing is advised.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/GPUSupportedLimits."
  },
  "GeolocationCoordinates": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`GeolocationCoordinates`** interface represents the position and altitude of the device on Earth, as well as the accuracy with which these properties are calculated.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/GeolocationCoordinates.",
    "properties": {
      "accuracy": "Returns a `double` representing the accuracy of the `latitude` and `longitude` properties, expressed in meters.",
      "altitude": "Returns a `double` representing the position's altitude in meters, relative to nominal sea level. This value can be `null` if the implementation cannot provide the data.",
      "altitudeaccuracy": "Returns a `double` representing the accuracy of the `altitude` expressed in meters. This value can be `null` if the implementation cannot provide the data.",
      "heading": "Returns a `double` representing the direction towards which the device is facing. This value, specified in degrees, indicates how far off from heading true north the device is. `0` degrees represents true north, and the direction is determined clockwise (which means that east is `90` degrees and west is `270` degrees). If `speed` is `0`, `heading` is `NaN`. If the device is unable to provide `heading` information, this value is `null`.",
      "latitude": "Returns a `double` representing the position's latitude in decimal degrees.",
      "longitude": "Returns a `double` representing the position's longitude in decimal degrees.",
      "speed": "Returns a `double` representing the velocity of the device in meters per second. This value can be `null`."
    }
  },
  "GamepadEvent": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe GamepadEvent interface of the Gamepad API contains references to gamepads connected to the system, which is what the gamepad events `gamepadconnected` and `gamepaddisconnected` are fired in response to.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/GamepadEvent.",
    "properties": {
      "gamepad": "Returns a `Gamepad` object, providing access to the associated gamepad data for the event fired."
    }
  },
  "GeolocationPosition": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`GeolocationPosition`** interface represents the position of the concerned device at a given time. The position, represented by a `GeolocationCoordinates` object, comprehends the 2D position of the device, on a spheroid representing the Earth, but also its altitude and its speed.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/GeolocationPosition.",
    "properties": {
      "coords": "Returns a `GeolocationCoordinates` object defining the current location.",
      "timestamp": "Returns a timestamp, given as Unix time in milliseconds, representing the time at which the location was retrieved."
    }
  },
  "GeolocationPositionError": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`GeolocationPositionError`** interface represents the reason of an error occurring when using the geolocating device.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/GeolocationPositionError.",
    "properties": {
      "code": "Returns an `unsigned short` representing the error code. The following values are possible:",
      "message": "Returns a human-readable string describing the details of the error. Specifications note that this is primarily intended for debugging use and not to be shown directly in a user interface."
    }
  },
  "Geolocation": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`Geolocation`** interface represents an object able to obtain the position of the device programmatically. It gives Web content access to the location of the device. This allows a website or app to offer customized results based on the user's location.\n\nAn object with this interface is obtained using the `navigator.geolocation` property implemented by the `Navigator` object.\n\n**Note:** For security reasons, when a web page tries to access location information, the user is notified and asked to grant permission. Be aware that each browser has its own policies and methods for requesting this permission.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Geolocation.",
    "properties": {
      "clearwatch": "Removes the particular handler previously installed using `watchPosition()`.",
      "getcurrentposition": "Determines the device's current location and gives back a `GeolocationPosition` object with the data.",
      "watchposition": "Returns a `long` value representing the newly established callback function to be invoked whenever the device location changes."
    }
  },
  "GestureEvent": {
    "docs": "**Non-standard:** This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n\nThe **`GestureEvent`** is a proprietary interface specific to WebKit which gives information regarding multi-touch gestures. Events using this interface include `gesturestart`, `gesturechange`, and `gestureend`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/GestureEvent.",
    "properties": {
      "initgestureevent": "Initializes the value of an `GestureEvent`. If the event has already been dispatched, this method does nothing.",
      "rotation": "Change in rotation (in degrees) since the event's beginning. Positive values indicate clockwise rotation; negative values indicate counterclockwise rotation. Initial value: `0.0`.",
      "scale": "Distance between two digits since the event's beginning. Expressed as a floating-point multiple of the initial distance between the digits at the beginning of the gesture. Values below 1.0 indicate an inward pinch (zoom out). Values above 1.0 indicate an outward unpinch (zoom in). Initial value: `1.0`."
    }
  },
  "Gyroscope": {
    "docs": "The **`Gyroscope`** interface of the Sensor APIs provides on each reading the angular velocity of the device along all three axes.\n\nTo use this sensor, the user must grant permission to the `'gyroscope'` device sensor through the Permissions API. In addition, this feature may be blocked by a Permissions Policy set on your server.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Gyroscope.",
    "properties": {
      "x": "Returns a double, containing the angular velocity of the device along the device's x axis.",
      "y": "Returns a double, containing the angular velocity of the device along the device's y axis.",
      "z": "Returns a double, containing the angular velocity of the device along the device's z axis."
    }
  },
  "HID": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`HID`** interface provides methods for connecting to HID devices, listing attached HID devices and event handlers for connected HID devices.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HID."
  },
  "HIDConnectionEvent": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`HIDConnectionEvent`** interface of the `WebHID API` represents HID connection events, and is the event type passed to `connect` and `disconnect` event handlers when an input report is received.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HIDConnectionEvent.",
    "properties": {
      "device": "Returns the `HIDDevice` instance representing the device associated with the connection event."
    }
  },
  "GPUUncapturedErrorEvent": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`GPUUncapturedErrorEvent`** interface of the WebGPU API is the event object type for the `GPUDevice` `uncapturederror` event, used for telemetry and to report unexpected errors.\n\nKnown error cases should be handled using `pushErrorScope()` and `popErrorScope()`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/GPUUncapturedErrorEvent."
  },
  "HIDDevice": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`HIDDevice`** interface of the `WebHID API` represents a HID Device. It provides properties for accessing information about the device, methods for opening and closing the connection, and the sending and receiving of reports.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HIDDevice.",
    "properties": {
      "close": "Closes the connection to this HID device, and returns a `Promise` which resolves once the connection has been closed.",
      "collections": "Returns an array of report formats for the HID device.",
      "forget": "Closes the connection to this HID device and resets access permission, and returns a `Promise` which resolves once the permission was reset.",
      "open": "Opens a connection to this HID device, and returns a `Promise` which resolves once the connection has been successful.",
      "opened": "Returns a `boolean`, true if the device has an open connection.",
      "productid": "Returns the productID of the HID device.",
      "productname": "Returns a string containing the product name of the HID device.",
      "receivefeaturereport": "Receives a feature report from this HID device in the form of a `Promise` which resolves with a `DataView`. This allows typed access to the contents of this message.",
      "sendfeaturereport": "Sends a feature report to this HID device, and returns a `Promise` which resolves once the report has been sent.",
      "sendreport": "Sends an output report to this HID Device, and returns a `Promise` which resolves once the report has been sent.",
      "vendorid": "Returns the vendorId of the HID device."
    }
  },
  "GPUSupportedFeatures": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`GPUSupportedFeatures`** interface of the WebGPU API is a `Set`-like object that describes additional functionality supported by a `GPUAdapter`.\n\nThe `GPUSupportedFeatures` object for the current adapter is accessed via the `GPUAdapter.features` property.\n\nYou should note that not all features will be available to WebGPU in all browsers that support it, even if the features are supported by the underlying hardware. This could be due to constraints in the underlying system, browser, or adapter. For example:\n\n- The underlying system might not be able to guarantee exposure of a feature in a way that is compatible with a certain browser.\n- The browser vendor might not have found a secure way to implement support for that feature, or might just not have gotten round to it yet.\n\nIf you are hoping to take advantage of a specific additional feature in a WebGPU app, thorough testing is advised.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/GPUSupportedFeatures."
  },
  "HTMLAllCollection": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe **`HTMLAllCollection`** interface represents a collection of all of the document's elements, accessible by index (like an array) and by the element's `id`. It is returned by the `document.all` property.\n\n`HTMLAllCollection` has a very similar shape to `HTMLCollection`, but there are many subtle behavior differences â for example, `HTMLAllCollection` can be called as a function, and its `item()` method can be called with a string representing an element's `id` or `name` attribute.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLAllCollection.",
    "properties": {
      "item": "Returns the element located at the specified offset into the collection, or the element with the specified value for its `id` or `name` attribute. Returns `null` if no element is found.",
      "length": "Returns the number of items in the collection.",
      "nameditem": "Returns the first element in the collection whose `id` or `name` attribute match the given string name, or `null` if no element matches."
    }
  },
  "HTMLAnchorElement": {
    "docs": "The **`HTMLAnchorElement`** interface represents hyperlink elements and provides special properties and methods (beyond those of the regular `HTMLElement` object interface that they inherit from) for manipulating the layout and presentation of such elements. This interface corresponds to `<a>` element; not to be confused with `<link>`, which is represented by `HTMLLinkElement`)\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement.",
    "properties": {
      "charset": "A string representing the character encoding of the linked resource.",
      "coords": "A string representing a comma-separated list of coordinates.",
      "download": "A string indicating that the linked resource is intended to be downloaded rather than displayed in the browser. The value represent the proposed name of the file. If the name is not a valid filename of the underlying OS, browser will adapt it.",
      "hash": "A string representing the fragment identifier, including the leading hash mark ('`#`'), if any, in the referenced URL.",
      "host": "A string representing the hostname and port (if it's not the default port) in the referenced URL.",
      "hostname": "A string representing the hostname in the referenced URL.",
      "href": "A string that is the result of parsing the `href` HTML attribute relative to the document, containing a valid URL of a linked resource.",
      "hreflang": "A string that reflects the `hreflang` HTML attribute, indicating the language of the linked resource.",
      "name": "A string representing the anchor name.",
      "origin": "Returns a string containing the origin of the URL, that is its scheme, its domain and its port.",
      "password": "A string containing the password specified before the domain name.",
      "pathname": "A string containing an initial `'/'` followed by the path of the URL, not including the query string or fragment.",
      "port": "A string representing the port component, if any, of the referenced URL.",
      "protocol": "A string representing the protocol component, including trailing colon ('`:`'), of the referenced URL.",
      "referrerpolicy": "A string that reflects the `referrerpolicy` HTML attribute indicating which referrer to use.",
      "rel": "A string that reflects the `rel` HTML attribute, specifying the relationship of the target object to the linked object.",
      "rellist": "Returns a `DOMTokenList` that reflects the `rel` HTML attribute, as a list of tokens.",
      "rev": "A string representing that the `rev` HTML attribute, specifying the relationship of the link object to the target object.\n\n**Note:** Currently the W3C HTML 5.2 spec states that `rev` is no longer obsolete, whereas the WHATWG living standard still has it labeled obsolete. Until this discrepancy is resolved, you should still assume it is obsolete.",
      "search": "A string representing the search element, including leading question mark ('`?`'), if any, of the referenced URL.",
      "shape": "A string representing the shape of the active area.",
      "target": "A string that reflects the `target` HTML attribute, indicating where to display the linked resource.",
      "text": "A string being a synonym for the `Node.textContent` property.",
      "tostring": "Returns a string containing the whole URL. It is a synonym for `HTMLAnchorElement.href`, though it can't be used to modify the value.",
      "type": "A string that reflects the `type` HTML attribute, indicating the MIME type of the linked resource.",
      "username": "A string containing the username specified before the domain name."
    }
  },
  "HTMLAreaElement": {
    "docs": "The **`HTMLAreaElement`** interface provides special properties and methods (beyond those of the regular object `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of `<area>` elements.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement.",
    "properties": {
      "alt": "A string that reflects the `alt` HTML attribute, containing alternative text for the element.",
      "coords": "A string that reflects the `coords` HTML attribute, containing coordinates to define the hot-spot region.",
      "download": "A string indicating that the linked resource is intended to be downloaded rather than displayed in the browser. The value represent the proposed name of the file. If the name is not a valid filename of the underlying OS, browser will adapt it.",
      "hash": "A string containing the fragment identifier (including the leading hash mark (#)), if any, in the referenced URL.",
      "host": "A string containing the hostname and port (if it's not the default port) in the referenced URL.",
      "hostname": "A string containing the hostname in the referenced URL.",
      "href": "A string containing that reflects the `href` HTML attribute, containing a valid URL of a linked resource.",
      "nohref": "A boolean flag indicating if the area is inactive (`true`) or active (`false`).",
      "origin": "Returns a string containing the origin of the URL, that is its scheme, its domain and its port.",
      "password": "A string containing the password specified before the domain name.",
      "pathname": "A string containing the path name component, if any, of the referenced URL.",
      "port": "A string containing the port component, if any, of the referenced URL.",
      "protocol": "A string containing the protocol component (including trailing colon `':'`), of the referenced URL.",
      "referrerpolicy": "A string that reflects the `referrerpolicy` HTML attribute indicating which referrer to use when fetching the linked resource.",
      "rel": "A string that reflects the `rel` HTML attribute, indicating relationships of the current document to the linked resource.",
      "rellist": "Returns a `DOMTokenList` that reflects the `rel` HTML attribute, indicating relationships of the current document to the linked resource, as a list of tokens.",
      "search": "A string containing the search element (including leading question mark `'?'`), if any, of the referenced URL.",
      "shape": "A string that reflects the `shape` HTML attribute, indicating the shape of the hot-spot, limited to known values.",
      "target": "A string that reflects the `target` HTML attribute, indicating the browsing context in which to open the linked resource.",
      "tostring": "Returns a string containing the whole URL. It is a synonym for `HTMLAreaElement.href`.",
      "username": "A string containing the username specified before the domain name."
    }
  },
  "HIDInputReportEvent": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`HIDInputReportEvent`** interface of the `WebHID API` is passed to `HIDDevice.inputreport_event` when an input report is received from any associated HID device.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HIDInputReportEvent.",
    "properties": {
      "data": "A `DataView` containing the data from the input report, excluding the `reportId` if the HID interface uses report IDs.",
      "device": "The `HIDDevice` instance that represents the HID interface that sent the input report.",
      "reportid": "The one-byte identification prefix for this report, or 0 if the HID interface does not use report IDs."
    }
  },
  "GravitySensor": {
    "docs": "The **`GravitySensor`** interface of the Sensor APIs provides on each reading the gravity applied to the device along all three axes.\n\nTo use this sensor, the user must grant permission to the `'accelerometer'` device sensor through the Permissions API. In addition, this feature may be blocked by a Permissions Policy set on your server.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/GravitySensor."
  },
  "HTMLBRElement": {
    "docs": "The **`HTMLBRElement`** interface represents an HTML line break element (`<br>`). It inherits from `HTMLElement`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLBRElement.",
    "properties": {
      "clear": "A string indicating the flow of text around floating objects."
    }
  },
  "HTMLBodyElement": {
    "docs": "The **`HTMLBodyElement`** interface provides special properties (beyond those inherited from the regular `HTMLElement` interface) for manipulating `<body>` elements.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLBodyElement.",
    "properties": {
      "alink": "A string that represents the color of active hyperlinks.",
      "background": "A string that represents the description of the location of the background image resource. Note that this is not an URI, though some older version of some browsers do expect it.",
      "bgcolor": "A string that represents the background color for the document.",
      "link": "A string that represents the color of unvisited links.",
      "onafterprint": "Fired after the associated document has started printing or the print preview has been closed.",
      "onbeforeprint": "Fired when the associated document is about to be printed or previewed for printing.",
      "onbeforeunload": "Fired when the window, the document and its resources are about to be unloaded.",
      "ongamepadconnected": "Fired when the browser detects that a gamepad has been connected or the first time a button/axis of the gamepad is used.",
      "ongamepaddisconnected": "Fired when the browser detects that a gamepad has been disconnected.",
      "onhashchange": "Fired when the fragment identifier of the URL has changed (the part of the URL beginning with and following the `#` symbol).",
      "onlanguagechange": "Fired when the user's preferred language changes.",
      "onmessage": "Fired when the window receives a message, for example from a call to `Window.postMessage()` from another browsing context.",
      "onmessageerror": "Fired when the window receives a message that can't be deserialized.",
      "onoffline": "Fired when the browser has lost access to the network and the value of `Navigator.onLine` switches to `false`.",
      "ononline": "Fired when the browser has gained access to the network and the value of `Navigator.onLine` switches to `true`.",
      "onpagehide": "Fired when the browser hides the current page in the process of presenting a different page from the session's history.",
      "onpageshow": "Fired when the browser displays the window's document due to navigation.",
      "onpopstate": "Fired when the active history entry changes while the user navigates the session history.",
      "onrejectionhandled": "Fired whenever a JavaScript `Promise` is rejected and the rejection has been handled.",
      "onstorage": "Fired when a storage area (`localStorage`) has been modified in the context of another document.",
      "onunhandledrejection": "Fired whenever a `Promise` is rejected but the rejection was not handled.",
      "onunload": "Fired when the document is being unloaded.",
      "text": "A string that represents the foreground color of text.",
      "vlink": "A string that represents the color of visited links."
    }
  },
  "HTMLAudioElement": {
    "docs": "The **`HTMLAudioElement`** interface provides access to the properties of `<audio>` elements, as well as methods to manipulate them.\n\nThis element is based on, and inherits properties and methods from, the `HTMLMediaElement` interface.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement."
  },
  "HTMLButtonElement": {
    "docs": "The **`HTMLButtonElement`** interface provides properties and methods (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating `<button>` elements.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement.",
    "properties": {
      "accesskey": "A string indicating the single-character keyboard key to give access to the button.",
      "autofocus": "A boolean value indicating whether or not the control should have input focus when the page loads, unless the user overrides it, for example by typing in a different control. Only one form-associated element in a document can have this attribute specified.",
      "disabled": "A boolean value indicating whether or not the control is disabled, meaning that it does not accept any clicks.",
      "form": "An `HTMLFormElement` reflecting the form that this button is associated with. If the button is a descendant of a form element, then this attribute is a reference to that form's associated `HTMLFormElement`.\n      If the button is not a descendant of a form element, then the attribute can be a reference to any `HTMLFormElement` element in the same document it is related to, or the `null` value if none matches.",
      "formaction": "A string reflecting the URI of a resource that processes information submitted by the button. If specified, this attribute overrides the `action` attribute of the `<form>` element that owns this element.",
      "formenctype": "A string reflecting the type of content that is used to submit the form to the server. If specified, this attribute overrides the `enctype` attribute of the `<form>` element that owns this element.",
      "formmethod": "A string reflecting the HTTP method that the browser uses to submit the form. If specified, this attribute overrides the `method` attribute of the `<form>` element that owns this element.",
      "formnovalidate": "A boolean value indicating that the form is not to be validated when it is submitted. If specified, this attribute overrides the `novalidate` attribute of the `<form>` element that owns this element.",
      "formtarget": "A string reflecting a name or keyword indicating where to display the response that is received after submitting the form. If specified, this attribute overrides the `target` attribute of the `<form>` element that owns this element.",
      "labels": "A `NodeList` that represents a list of `<label>` elements that are labels for this button.",
      "menu": "A `HTMLMenuElement` representing the menu element to be displayed if the button is clicked and is of `type=\"menu\"`.",
      "name": "A string representing the name of the object when submitted with a form. If specified, it must not be the empty string.",
      "popovertargetaction": "Gets and sets the action to be performed (`\"hide\"`, `\"show\"`, or `\"toggle\"`) on a popover element being controlled by a control button. It reflects the value of the `popovertargetaction` HTML attribute.",
      "popovertargetelement": "Gets and sets the popover element to control via a button. The JavaScript equivalent of the `popovertarget` HTML attribute.",
      "tabindex": "A `long` that represents this element's position in the tabbing order.",
      "type": "A string indicating the behavior of the button. This is an enumerated attribute with the following possible values:\n\n- `submit`: The button submits the form. This is the default value if the attribute is not specified, or if it is dynamically changed to an empty or invalid value.\n- `reset`: The button resets the form.\n- `button`: The button does nothing.\n- `menu`: The button displays a menu. \n    Experimental",
      "validationmessage": "A string representing the localized message that describes the validation constraints that the control does not satisfy (if any). This attribute is the empty string if the control is not a candidate for constraint validation (`willValidate` is `false`), or it satisfies its constraints.",
      "validity": "A `ValidityState` representing the validity states that this button is in.",
      "value": "A string representing the current form control value of the button.",
      "willvalidate": "A boolean value indicating whether the button is a candidate for constraint validation. It is `false` if any conditions bar it from constraint validation, including: its `type` property is `reset` or `button`; it has a `<datalist>` ancestor; or the `disabled` property is set to `true`."
    }
  },
  "HTMLCanvasElement": {
    "docs": "The **`HTMLCanvasElement`** interface provides properties and methods for manipulating the layout and presentation of `<canvas>` elements. The `HTMLCanvasElement` interface also inherits the properties and methods of the `HTMLElement` interface.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement.",
    "properties": {
      "capturestream": "Returns a `CanvasCaptureMediaStreamTrack` that is a real-time video capture of the surface of the canvas.",
      "getcontext": "Returns a drawing context on the canvas, or null if the context ID is not supported. A drawing context lets you draw on the canvas. Calling getContext with `\"2d\"` returns a `CanvasRenderingContext2D` object, whereas calling it with `\"webgl\"` (or `\"experimental-webgl\"`) returns a `WebGLRenderingContext` object. This context is only available on browsers that implement WebGL.",
      "height": "The `height` HTML attribute of the `<canvas>` element is a non-negative `integer` reflecting the number of logical pixels (or RGBA values) going down one column of the canvas. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of `150` is used. If no [separate] CSS height is assigned to the `<canvas>`, then this value will also be used as the height of the canvas in the length-unit CSS Pixel.",
      "mozopaque": "A boolean value reflecting the `moz-opaque` HTML attribute of the `<canvas>` element. It lets the canvas know whether or not translucency will be a factor. If the canvas knows there's no translucency, painting performance can be optimized. This is only supported in Mozilla-based browsers; use the standardized `canvas.getContext('2d', { alpha: false })` instead.",
      "mozprintcallback": "A `function` that is Initially null. Web content can set this to a JavaScript function that will be called when the canvas is to be redrawn while the page is being printed. When called, the callback is passed a \"printState\" object that implements the [MozCanvasPrintState](https://searchfox.org/mozilla-central/search?q=interface%20MozCanvasPrintState&path=HTMLCanvasElement.webidl) interface. The callback can get the context to draw to from the printState object and must then call done() on it when finished. The purpose of `mozPrintCallback` is to obtain a higher resolution rendering of the canvas at the resolution of the printer being used. [See this blog post.](https://blog.mozilla.org/labs/2012/09/a-new-way-to-control-printing-output/)",
      "toblob": "Creates a `Blob` object representing the image contained in the canvas; this file may be cached on the disk or stored in memory at the discretion of the user agent.",
      "todataurl": "Returns a data-URL containing a representation of the image in the format specified by the `type` parameter (defaults to `png`). The returned image is in a resolution of 96dpi.",
      "transfercontroltooffscreen": "Transfers control to an `OffscreenCanvas` object, either on the main thread or on a worker.",
      "width": "The `width` HTML attribute of the `<canvas>` element is a non-negative `integer` reflecting the number of logical pixels (or RGBA values) going across one row of the canvas. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of `300` is used. If no [separate] CSS width is assigned to the `<canvas>`, then this value will also be used as the width of the canvas in the length-unit CSS Pixel."
    }
  },
  "HTMLCollection": {
    "docs": "The **`HTMLCollection`** interface represents a generic collection (array-like object similar to `arguments`) of elements (in document order) and offers methods and properties for selecting from the list.\n\n**Note:** This interface is called `HTMLCollection` for historical reasons (before the modern DOM, collections implementing this interface could only have HTML elements as their items).\n\nAn `HTMLCollection` in the HTML DOM is live; it is automatically updated when the underlying document is changed. For this reason it is a good idea to make a copy (e.g., using `Array.from`) to iterate over if adding, moving, or removing nodes.\n\n**Note:** This interface was an [attempt to create an unmodifiable list](https://stackoverflow.com/questions/74630989/why-use-domstringlist-rather-than-an-array/74641156#74641156) and only continues to be supported to not break code that's already using it. Modern APIs use types that wrap around ECMAScript array types instead, so you can treat them like ECMAScript arrays, and at the same time impose additional semantics on their usage (such as making their items read-only).\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection.",
    "properties": {
      "item": "Returns the specific element at the given zero-based `index` into the list. Returns `null` if the `index` is out of range.\n\nAn alternative to accessing `collection[i]` (which instead returns `undefined` when `i` is out-of-bounds). This is mostly useful for non-JavaScript DOM implementations.",
      "length": "Returns the number of items in the collection.",
      "nameditem": "Returns the specific node whose ID or, as a fallback, name matches the string specified by `name`. Matching by name is only done as a last resort, only in HTML, and only if the referenced element supports the `name` attribute. Returns `null` if no node exists by the given name.\n\nAn alternative to accessing `collection[name]` (which instead returns `undefined` when `name` does not exist). This is mostly useful for non-JavaScript DOM implementations."
    }
  },
  "HMDVRDevice": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\n**Non-standard:** This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n\nThe **`HMDVRDevice`** interface of the WebVR API represents a head mounted display, providing access to information about each eye, and allowing us to modify the current field of view.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HMDVRDevice.",
    "properties": {
      "geteyeparameters": "Returns current parameters for the eye specified as its argument (\"left\" or \"right\") â such as field of view information â stored in a `VREyeParameters` object.",
      "setfieldofview": "Sets the field of view for both eyes."
    }
  },
  "HTMLBaseElement": {
    "docs": "The **`HTMLBaseElement`** interface contains the base URI for a document. This object inherits all of the properties and methods as described in the `HTMLElement` interface.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLBaseElement.",
    "properties": {
      "href": "A string that reflects the `href` HTML attribute, containing a base URL for relative URLs in the document.",
      "target": "A string that reflects the `target` HTML attribute, containing a default target browsing context or frame for elements that do not have a target reference specified."
    }
  },
  "HTMLDListElement": {
    "docs": "The **`HTMLDListElement`** interface provides special properties (beyond those of the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating definition list (`<dl>`) elements.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLDListElement.",
    "properties": {
      "compact": "A boolean value indicating that spacing between list items should be reduced."
    }
  },
  "HTMLDataElement": {
    "docs": "The **`HTMLDataElement`** interface provides special properties (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating `<data>` elements.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataElement.",
    "properties": {
      "value": "A string reflecting the `value` HTML attribute, containing a machine-readable form of the element's value."
    }
  },
  "HTMLDataListElement": {
    "docs": "The **`HTMLDataListElement`** interface provides special properties (beyond the `HTMLElement` object interface it also has available to it by inheritance) to manipulate `<datalist>` elements and their content.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataListElement.",
    "properties": {
      "options": "A `HTMLCollection` representing a collection of the contained option elements."
    }
  },
  "HTMLDetailsElement": {
    "docs": "The **`HTMLDetailsElement`** interface provides special properties (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating `<details>` elements.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLDetailsElement.",
    "properties": {
      "open": "A boolean value reflecting the `open` HTML attribute, indicating whether or not the element's contents (not counting the `<summary>`) is to be shown to the user."
    }
  },
  "HTMLEmbedElement": {
    "docs": "The **`HTMLEmbedElement`** interface provides special properties (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating `<embed>` elements.\n\n**Note:** This topic describes the `HTMLEmbedElement` interface as defined in the standard. It does not address earlier, non-standardized version of the interface.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLEmbedElement.",
    "properties": {
      "align": "A string representing an enumerated property indicating alignment of the element's contents with respect to the surrounding context. The possible values are `\"left\"`, `\"right\"`, `\"center\"`, and `\"justify\"`.",
      "height": "A string reflecting the `height` HTML attribute, containing the displayed height of the resource.",
      "name": "A string representing the name of the embedded object.",
      "src": "A string that reflects the `src` HTML attribute, containing the address of the resource.",
      "type": "A string that reflects the `type` HTML attribute, containing the type of the resource.",
      "width": "A string that reflects the `width` HTML attribute, containing the displayed width of the resource."
    }
  },
  "HTMLFieldSetElement": {
    "docs": "The **`HTMLFieldSetElement`** interface provides special properties and methods (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of `<fieldset>` elements.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLFieldSetElement.",
    "properties": {
      "checkvalidity": "Always returns `true` because `<fieldset>` objects are never candidates for constraint validation.",
      "disabled": "A boolean value reflecting the `disabled` HTML attribute, indicating whether the user can interact with the control.",
      "elements": "The elements belonging to this field set. The type of this property depends on the version of the spec that is implemented by the browser.",
      "form": "An `HTMLFormControlsCollection` or `HTMLCollection` referencing the containing form element, if this element is in a form.\n      If the field set is not a descendant of a form element, then the attribute can be the ID of any form element in the same document it is related to, or the `null` value if none matches.",
      "name": "A string reflecting the `name` HTML attribute, containing the name of the field set. This can be used when accessing the field set in JavaScript. It is not part of the data which is sent to the server.",
      "reportvalidity": "Always returns `true` because `<fieldset>` objects are never candidates for constraint validation.",
      "setcustomvalidity": "Sets a custom validity message for the field set. If this message is not the empty string, then the field set is suffering from a custom validity error, and does not validate.",
      "type": "The string \"`fieldset`\".",
      "validationmessage": "A string representing a localized message that describes the validation constraints that the element does not satisfy (if any). This is the empty string if the element is not a candidate for constraint validation (`willValidate` is `false`), or it satisfies its constraints.",
      "validity": "A `ValidityState` representing the validity states that this element is in.",
      "willvalidate": "A boolean value `false`, because `<fieldset>` objects are never candidates for constraint validation."
    }
  },
  "HTMLFormControlsCollection": {
    "docs": "The **`HTMLFormControlsCollection`** interface represents a collection of HTML form control elements, returned by the `HTMLFormElement` interface's `elements` property.\n\nThis interface replaces one method from `HTMLCollection`, on which it is based.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormControlsCollection.",
    "properties": {
      "nameditem": "Returns the `RadioNodeList` or the `Element` in the collection whose `name` or `id` matches the specified name, or `null` if no nodes match. Note that this version of `namedItem()` hides the one inherited from `HTMLCollection`. Like that method, using the JavaScript array bracket syntax with a `String`, as in `collection[\"value\"]`, is equivalent to `collection.namedItem(\"value\")`."
    }
  },
  "HTMLDocument": {
    "docs": "For historical reasons, `Window` objects have a `window.HTMLDocument` property whose value is the `Document` interface. So you can think of `HTMLDocument` as an alias for `Document`, and you can find documentation for `HTMLDocument` members under the documentation for the `Document` interface.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLDocument."
  },
  "HTMLElement": {
    "docs": "The **`HTMLElement`** interface represents any HTML element. Some elements directly implement this interface, while others implement it via an interface that inherits it.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement.",
    "properties": {
      "accesskey": "A string representing the access key assigned to the element.",
      "accesskeylabel": "Returns a string containing the element's assigned access key.",
      "attachinternals": "Returns an `ElementInternals` object, and enables a custom element to participate in HTML forms.",
      "attributestylemap": "A `StylePropertyMap` representing the declarations of the element's `style` attribute.",
      "blur": "Removes keyboard focus from the currently focused element.",
      "click": "Sends a mouse click event to the element.",
      "contenteditable": "A string, where a value of `true` means the element is editable and a value of `false` means it isn't.",
      "dataset": "Returns a `DOMStringMap` with which script can read and write the element's custom data attributes (`data-*`) .",
      "dir": "A string, reflecting the `dir` global attribute, representing the directionality of the element. Possible values are `\"ltr\"`, `\"rtl\"`, and `\"auto\"`.",
      "draggable": "A boolean value indicating if the element can be dragged.",
      "enterkeyhint": "A string defining what action label (or icon) to present for the enter key on virtual keyboards.",
      "focus": "Makes the element the current keyboard focus.",
      "hidden": "A string or boolean value reflecting the value of the element's `hidden` attribute.",
      "hidepopover": "Hides a popover element by removing it from the top layer and styling it with `display: none`.",
      "inert": "A boolean value indicating whether the user agent must act as though the given node is absent for the purposes of user interaction events, in-page text searches (\"find in page\"), and text selection.",
      "innertext": "Represents the rendered text content of a node and its descendants.\n      As a getter, it approximates the text the user would get if they highlighted the contents of the element with the cursor and then copied it to the clipboard.\n      As a setter, it replaces the content inside the selected element, converting any line breaks into `<br>` elements.",
      "inputmode": "A string value reflecting the value of the element's `inputmode` attribute.",
      "iscontenteditable": "Returns a boolean value indicating whether or not the content of the element can be edited.",
      "lang": "A string representing the language of an element's attributes, text, and element contents.",
      "nonce": "Returns the cryptographic number used once that is used by Content Security Policy to determine whether a given fetch will be allowed to proceed.",
      "offsetheight": "Returns a `double` containing the height of an element, relative to the layout.",
      "offsetleft": "Returns a `double`, the distance from this element's left border to its `offsetParent`'s left border.",
      "offsetparent": "An `Element` that is the element from which all offset calculations are currently computed.",
      "offsettop": "Returns a `double`, the distance from this element's top border to its `offsetParent`'s top border.",
      "offsetwidth": "Returns a `double` containing the width of an element, relative to the layout.",
      "outertext": "Represents the rendered text content of a node and its descendants.\n      As a getter, it is the same as `HTMLElement.innerText` (it represents the rendered text content of an element and its descendants).\n      As a setter, it replaces the selected node and its contents with the given value, converting any line breaks into `<br>` elements.",
      "popover": "Gets and sets an element's popover state via JavaScript (`\"auto\"` or `\"manual\"`), and can be used for feature detection. Reflects the value of the `popover` global HTML attribute.",
      "showpopover": "Shows a popover element by adding it to the top layer and removing `display: none;` from its styles.",
      "spellcheck": "A boolean value that controls spell-checking. It is present on all HTML elements, though it doesn't have an effect on all of them.",
      "style": "A `CSSStyleDeclaration` representing the declarations of the element's `style` attribute.",
      "tabindex": "A `long` representing the position of the element in the tabbing order.",
      "title": "A string containing the text that appears in a popup box when mouse is over the element.",
      "togglepopover": "Toggles a popover element between the hidden and showing states.",
      "translate": "A boolean value representing the translation."
    }
  },
  "HTMLFormElement": {
    "docs": "The **`HTMLFormElement`** interface represents a `<form>` element in the DOM. It allows access toâand, in some cases, modification ofâaspects of the form, as well as access to its component elements.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement.",
    "properties": {
      "acceptcharset": "A string reflecting the value of the form's `accept-charset` HTML attribute, representing the character encoding that the server accepts.",
      "action": "A string reflecting the value of the form's `action` HTML attribute, containing the URI of a program that processes the information submitted by the form.",
      "autocomplete": "A string reflecting the value of the form's `autocomplete` HTML attribute, indicating whether the controls in this form can have their values automatically populated by the browser.",
      "elements": "A `HTMLFormControlsCollection` holding all form controls belonging to this form element.",
      "encoding": "A string reflecting the value of the form's `enctype` HTML attribute, indicating the type of content that is used to transmit the form to the server. Only specified values can be set. The two properties are synonyms.",
      "length": "A `long` reflecting the number of controls in the form.",
      "method": "A string reflecting the value of the form's `method` HTML attribute, indicating the HTTP method used to submit the form. Only specified values can be set.",
      "name": "A string reflecting the value of the form's `name` HTML attribute, containing the name of the form.",
      "novalidate": "A boolean value reflecting the value of the form's `novalidate` HTML attribute, indicating whether the form should not be validated.",
      "requestautocomplete": "Triggers a native browser interface to assist the user in completing the fields which have an [autofill field name](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill-field-name) value that is not `off` or `on`. The form will receive an event once the user has finished with the interface, the event will either be `autocomplete` when the fields have been filled or `autocompleteerror` when there was a problem.",
      "target": "A string reflecting the value of the form's `target` HTML attribute, indicating where to display the results received from submitting the form."
    }
  },
  "HTMLFrameSetElement": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe **`HTMLFrameSetElement`** interface provides special properties (beyond those of the regular `HTMLElement` interface they also inherit) for manipulating `<frameset>` elements.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLFrameSetElement.",
    "properties": {
      "cols": "A string structured as a comma-separated list specifying the width of each column inside a frameset.",
      "onafterprint": "Fired after the associated document has started printing or the print preview has been closed.",
      "onbeforeprint": "Fired when the associated document is about to be printed or previewed for printing.",
      "onbeforeunload": "Fired when the window, the document and its resources are about to be unloaded.",
      "ongamepadconnected": "Fired when the browser detects that a gamepad has been connected or the first time a button/axis of the gamepad is used.",
      "ongamepaddisconnected": "Fired when the browser detects that a gamepad has been disconnected.",
      "onhashchange": "Fired when the fragment identifier of the URL has changed (the part of the URL beginning with and following the `#` symbol).",
      "onlanguagechange": "Fired when the user's preferred language changes.",
      "onmessage": "Fired when the window receives a message, for example from a call to `Window.postMessage()` from another browsing context.",
      "onmessageerror": "Fired when the window receives a message that can't be deserialized.",
      "onoffline": "Fired when the browser has lost access to the network and the value of `Navigator.onLine` switches to `false`.",
      "ononline": "Fired when the browser has gained access to the network and the value of `Navigator.onLine` switches to `true`.",
      "onpagehide": "Fired when the browser hides the current page in the process of presenting a different page from the session's history.",
      "onpageshow": "Fired when the browser displays the window's document due to navigation.",
      "onpopstate": "Fired when the active history entry changes while the user navigates the session history.",
      "onrejectionhandled": "Fired whenever a JavaScript `Promise` is rejected and the rejection has been handled.",
      "onstorage": "Fired when a storage area (`localStorage`) has been modified in the context of another document.",
      "onunhandledrejection": "Fired whenever a `Promise` is rejected but the rejection was not handled.",
      "onunload": "Fired when the document is being unloaded.",
      "rows": "A string structured as a comma-separated list specifying the height of each column inside a frameset."
    }
  },
  "HTMLHRElement": {
    "docs": "The **`HTMLHRElement`** interface provides special properties (beyond those of the `HTMLElement` interface it also has available to it by inheritance) for manipulating `<hr>` elements.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLHRElement.",
    "properties": {
      "align": "A string, an enumerated attribute indicating alignment of the rule with respect to the surrounding context.",
      "color": "A string representing the name of the color of the rule.",
      "noshade": "A boolean value that sets the rule to have no shading.",
      "size": "A string representing the height of the rule.",
      "width": "A string representing the width of the rule on the page."
    }
  },
  "HTMLDialogElement": {
    "docs": "The **`HTMLDialogElement`** interface provides methods to manipulate `<dialog>` elements. It inherits properties and methods from the `HTMLElement` interface.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement.",
    "properties": {
      "close": "Closes the dialog. An optional string may be passed as an argument, updating the `returnValue` of the dialog.",
      "open": "A boolean value reflecting the `open` HTML attribute, indicating whether the dialog is available for interaction.",
      "returnvalue": "A string that sets or returns the return value for the dialog.",
      "show": "Displays the dialog modelessly, i.e. still allowing interaction with content outside of the dialog.",
      "showmodal": "Displays the dialog as a modal, over the top of any other dialogs that might be present. Everything outside the dialog are inert with interactions outside the dialog being blocked."
    }
  },
  "HTMLHeadingElement": {
    "docs": "The **`HTMLHeadingElement`** interface represents the different heading elements, `<h1>` through `<h6>`. It inherits methods and properties from the `HTMLElement` interface.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadingElement.",
    "properties": {
      "align": "A string representing an enumerated attribute indicating alignment of the heading with respect to the surrounding context. The possible values are `\"left\"`, `\"right\"`, `\"justify\"`, and `\"center\"`."
    }
  },
  "HTMLDivElement": {
    "docs": "The **`HTMLDivElement`** interface provides special properties (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating `<div>` elements.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLDivElement.",
    "properties": {
      "align": "A string representing an enumerated property indicating alignment of the element's contents with respect to the surrounding context. The possible values are `\"left\"`, `\"right\"`, `\"justify\"`, and `\"center\"`."
    }
  },
  "HTMLFontElement": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nImplements the document object model (DOM) representation of the font element. The HTML Font Element `<font>` defines the font size, font face and color of text.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLFontElement.",
    "properties": {
      "color": "A string that reflects the `color` HTML attribute, containing either a named color or a color specified in the hexadecimal #RRGGBB format.",
      "face": "A string that reflects the `face` HTML attribute, containing a comma-separated list of one or more font names.",
      "size": "A string that reflects the `size` HTML attribute, containing either a font size ranging from 1 to 7 or a number relative to the default value 3, for example -2 or +1."
    }
  },
  "HTMLHeadElement": {
    "docs": "The **`HTMLHeadElement`** interface contains the descriptive information, or metadata, for a document. This object inherits all of the properties and methods described in the `HTMLElement` interface.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadElement.",
    "properties": {
      "profile": "A string representing the URIs of one or more metadata profiles (white space separated)."
    }
  },
  "HTMLInputElement": {
    "docs": "The **`HTMLInputElement`** interface provides special properties and methods for manipulating the options, layout, and presentation of `<input>` elements.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement."
  },
  "HTMLLIElement": {
    "docs": "The **`HTMLLIElement`** interface exposes specific properties and methods (beyond those defined by regular `HTMLElement` interface it also has available to it by inheritance) for manipulating list elements.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLLIElement.",
    "properties": {
      "type": "A string representing the type of the bullets, `\"disc\"`, `\"square\"` or `\"circle\"`. As the standard way of defining the list type is via the CSS `list-style-type` property, use the CSSOM methods to set it via a script.",
      "value": "A `long` indicating the ordinal position of the list element inside a given `<ol>`. It reflects the `value` attribute of the HTML `<li>` element, and can be smaller than `0`. If the `<li>` element is not a child of an `<ol>` element, the property has no meaning."
    }
  },
  "HTMLLinkElement": {
    "docs": "The **`HTMLLinkElement`** interface represents reference information for external resources and the relationship of those resources to a document and vice versa (corresponds to `<link>` element; not to be confused with `<a>`, which is represented by `HTMLAnchorElement`). This object inherits all of the properties and methods of the `HTMLElement` interface.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement.",
    "properties": {
      "as": "A string representing the type of content being loaded by the HTML link when `rel=\"preload\"` or `rel=\"modulepreload\"`.",
      "charset": "A string representing the character encoding for the target resource.",
      "crossorigin": "A string that corresponds to the CORS setting for this link element. See CORS settings attributes for details.",
      "disabled": "A boolean value which represents whether the link is disabled; currently only used with style sheet links.",
      "fetchpriority": "An optional string representing a hint given to the browser on how it should prioritize fetching of a preload relative to other resources of the same type. If this value is provided, it must be one of the possible permitted values: `high` to fetch at a higher priority, `low` to fetch at a lower priority, or `auto` to indicate no preference (which is the default).",
      "href": "A string representing the URI for the target resource.",
      "hreflang": "A string representing the language code for the linked resource.",
      "media": "A string representing a list of one or more media formats to which the resource applies.",
      "referrerpolicy": "A string that reflects the `referrerpolicy` HTML attribute indicating which referrer to use.",
      "rel": "A string representing the forward relationship of the linked resource from the document to the resource.",
      "rellist": "A `DOMTokenList` that reflects the `rel` HTML attribute, as a list of tokens.",
      "rev": "A string representing the reverse relationship of the linked resource from the resource to the document.\n\n**Note:** Currently the W3C HTML 5.2 spec states that `rev` is no longer obsolete, whereas the WHATWG living standard still has it labeled obsolete. Until this discrepancy is resolved, you should still assume it is obsolete.",
      "sheet": "Returns the `StyleSheet` object associated with the given element, or `null` if there is none.",
      "sizes": "A `DOMTokenList` that reflects the `sizes` HTML attribute, as a list of tokens.",
      "target": "A string representing the name of the target frame to which the resource applies.",
      "type": "A string representing the MIME type of the linked resource."
    }
  },
  "HTMLImageElement": {
    "docs": "The **`HTMLImageElement`** interface represents an HTML `<img>` element, providing the properties and methods used to manipulate image elements.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement.",
    "properties": {
      "align": "A string indicating the alignment of the image with respect to the surrounding context. The possible values are `\"left\"`, `\"right\"`, `\"justify\"`, and `\"center\"`. This is obsolete; you should instead use CSS (such as `text-align`, which works with images despite its name) to specify the alignment.",
      "alt": "A string that reflects the `alt` HTML attribute, thus indicating the alternate fallback content to be displayed if the image has not been loaded.",
      "border": "A string which defines the width of the border surrounding the image. This is deprecated; use the CSS `border` property instead.",
      "complete": "Returns a boolean value that is `true` if the browser has finished fetching the image, whether successful or not. That means this value is also `true` if the image has no `src` value indicating an image to load.",
      "crossorigin": "A string specifying the CORS setting for this image element. See CORS settings attributes for further details. This may be `null` if CORS is not used.",
      "currentsrc": "Returns a string representing the URL from which the currently displayed image was loaded. This may change as the image is adjusted due to changing conditions, as directed by any media queries which are in place.",
      "decode": "Returns a `Promise` that resolves when the image is decoded and it's safe to append the image to the DOM. This prevents rendering of the next frame from having to pause to decode the image, as would happen if an undecoded image were added to the DOM.",
      "decoding": "An optional string representing a hint given to the browser on how it should decode the image. If this value is provided, it must be one of the possible permitted values: `sync` to decode the image synchronously, `async` to decode it asynchronously, or `auto` to indicate no preference (which is the default). Read the `decoding` page for details on the implications of this property's values.",
      "fetchpriority": "An optional string representing a hint given to the browser on how it should prioritize fetching of the image relative to other images. If this value is provided, it must be one of the possible permitted values: `high` to fetch at a high priority, `low` to fetch at a low priority, or `auto` to indicate no preference (which is the default).",
      "height": "An integer value that reflects the `height` HTML attribute, indicating the rendered height of the image in CSS pixels.",
      "hspace": "An integer value which specifies the amount of space (in pixels) to leave empty on the left and right sides of the image.",
      "ismap": "A boolean value that reflects the `ismap` HTML attribute, indicating that the image is part of a server-side image map. This is different from a client-side image map, specified using an `<img>` element and a corresponding `<map>` which contains `<area>` elements indicating the clickable areas in the image. The image must be contained within an `<a>` element; see the `ismap` page for details.",
      "loading": "A string providing a hint to the browser used to optimize loading the document by determining whether to load the image immediately (`eager`) or on an as-needed basis (`lazy`).",
      "longdesc": "A string specifying the URL at which a long description of the image's contents may be found. This is used to turn the image into a hyperlink automatically. Modern HTML should instead place an `<img>` inside an `<a>` element defining the hyperlink.",
      "name": "A string representing the name of the element.",
      "naturalheight": "Returns an integer value representing the intrinsic height of the image in CSS pixels, if it is available; else, it shows `0`. This is the height the image would be if it were rendered at its natural full size.",
      "naturalwidth": "An integer value representing the intrinsic width of the image in CSS pixels, if it is available; otherwise, it will show `0`. This is the width the image would be if it were rendered at its natural full size.",
      "referrerpolicy": "A string that reflects the `referrerpolicy` HTML attribute, which tells the user agent how to decide which referrer to use in order to fetch the image. Read this article for details on the possible values of this string.",
      "sizes": "A string reflecting the `sizes` HTML attribute. This string specifies a list of comma-separated conditional sizes for the image; that is, for a given viewport size, a particular image size is to be used. Read the documentation on the `sizes` page for details on the format of this string.",
      "src": "A string that reflects the `src` HTML attribute, which contains the full URL of the image including base URI. You can load a different image into the element by changing the URL in the `src` attribute.",
      "srcset": "A string reflecting the `srcset` HTML attribute. This specifies a list of candidate images, separated by commas (`',', U+002C COMMA`). Each candidate image is a URL followed by a space, followed by a specially-formatted string indicating the size of the image. The size may be specified either the width or a size multiple. Read the `srcset` page for specifics on the format of the size substring.",
      "usemap": "A string reflecting the `usemap` HTML attribute, containing the page-local URL of the `<map>` element describing the image map to use. The page-local URL is a pound (hash) symbol (`#`) followed by the ID of the `<map>` element, such as `#my-map-element`. The `<map>` in turn contains `<area>` elements indicating the clickable areas in the image.",
      "vspace": "An integer value specifying the amount of empty space, in pixels, to leave above and below the image.",
      "width": "An integer value that reflects the `width` HTML attribute, indicating the rendered width of the image in CSS pixels.",
      "x": "An integer indicating the horizontal offset of the left border edge of the image's CSS layout box relative to the origin of the `<html>` element's containing block.",
      "y": "The integer vertical offset of the top border edge of the image's CSS layout box relative to the origin of the `<html>` element's containing block."
    }
  },
  "HTMLIFrameElement": {
    "docs": "The **`HTMLIFrameElement`** interface provides special properties and methods (beyond those of the `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of inline frame elements.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement.",
    "properties": {
      "align": "A string that specifies the alignment of the frame with respect to the surrounding context.",
      "allow": "A list of origins the frame is allowed to display content from. This attribute also accepts the values `self` and `src` which represent the origin in the iframe's src attribute. The default value is `src`.",
      "allowfullscreen": "A boolean value indicating whether the inline frame is willing to be placed into full screen mode. See Using fullscreen mode for details.",
      "allowpaymentrequest": "A boolean value indicating whether the Payment Request API may be invoked inside a cross-origin iframe.",
      "contentdocument": "Returns a `Document`, the active document in the inline frame's nested browsing context.",
      "contentwindow": "Returns a WindowProxy, the window proxy for the nested browsing context.",
      "credentialless": "A boolean value indicating whether the `<iframe>` is credentialless, meaning that its content is loaded in a new, ephemeral context. This context does not have access to the parent context's shared storage and credentials. In return, the `Cross-Origin-Embedder-Policy` (COEP) embedding rules can be lifted, so documents with COEP set can embed third-party documents that do not. See IFrame credentialless for a deeper explanation.",
      "csp": "Specifies the Content Security Policy that an embedded document must agree to enforce upon itself.",
      "featurepolicy": "Returns the `FeaturePolicy` interface which provides a simple API for introspecting the Permissions Policies applied to a specific document.",
      "frameborder": "A string that indicates whether to create borders between frames.",
      "height": "A string that reflects the `height` HTML attribute, indicating the height of the frame.",
      "loading": "A string providing a hint to the browser that the iframe should be loaded immediately (`eager`) or on an as-needed basis (`lazy`).\n      This reflects the `loading` HTML attribute.",
      "longdesc": "A string that contains the URI of a long description of the frame.",
      "marginheight": "A string being the height of the frame margin.",
      "marginwidth": "A string being the width of the frame margin.",
      "name": "A string that reflects the `name` HTML attribute, containing a name by which to refer to the frame.",
      "referrerpolicy": "A string that reflects the `referrerPolicy` HTML attribute indicating which referrer to use when fetching the linked resource.",
      "sandbox": "A `DOMTokenList` that reflects the `sandbox` HTML attribute, indicating extra restrictions on the behavior of the nested content.",
      "scrolling": "A string that indicates whether the browser should provide scrollbars for the frame.",
      "src": "A string that reflects the `src` HTML attribute, containing the address of the content to be embedded. Note that programmatically removing an `<iframe>`'s src attribute (e.g. via `Element.removeAttribute()`) causes `about:blank` to be loaded in the frame in Firefox (from version 65), Chromium-based browsers, and Safari/iOS.",
      "srcdoc": "A string that represents the content to display in the frame.",
      "width": "A string that reflects the `width` HTML attribute, indicating the width of the frame."
    }
  },
  "HTMLMapElement": {
    "docs": "The **`HTMLMapElement`** interface provides special properties and methods (beyond those of the regular object `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of map elements.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLMapElement.",
    "properties": {
      "areas": "A live `HTMLCollection` representing the `<area>` elements associated to this `<map>`.",
      "name": "A string representing the `<map>` element for referencing it other context. If the `id` attribute is set, this must have the same value; and it cannot be `null` or empty."
    }
  },
  "HTMLMarqueeElement": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe **`HTMLMarqueeElement`** interface provides methods to manipulate `<marquee>` elements.\n\nIt inherits properties and methods from the `HTMLElement` interface.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLMarqueeElement.",
    "properties": {
      "behavior": "Sets how the text is scrolled within the marquee. Possible values are `scroll`, `slide` and `alternate`. If no value is specified, the default value is `scroll`.",
      "bgcolor": "Sets the background color through color name or hexadecimal value.",
      "direction": "Sets the direction of the scrolling within the marquee. Possible values are `left`, `right`, `up` and `down`. If no value is specified, the default value is `left`.",
      "height": "Sets the height in pixels or percentage value.",
      "hspace": "Sets the horizontal margin.",
      "loop": "Sets the number of times the marquee will scroll. If no value is specified, the default value is â1, which means the marquee will scroll continuously.",
      "onbounce": "Fires when the marquee has reached the end of its scroll position. It can only fire when the behavior attribute is set to `alternate`.",
      "onfinish": "Fires when the marquee has finished the amount of scrolling that is set by the loop attribute. It can only fire when the loop attribute is set to some number that is greater than 0.",
      "onstart": "Fires when the marquee starts scrolling.",
      "scrollamount": "Sets the amount of scrolling at each interval in pixels. The default value is 6.",
      "scrolldelay": "Sets the interval between each scroll movement in milliseconds. The default value is 85. Note that any value smaller than 60 is ignored and the value 60 is used instead, unless `trueSpeed` is `true`.",
      "start": "Starts scrolling of the marquee.",
      "stop": "Stops scrolling of the marquee.",
      "truespeed": "By default, `scrollDelay` values lower than 60 are ignored. If `trueSpeed` is `true`, then those values are not ignored.",
      "vspace": "Sets the vertical margin.",
      "width": "Sets the width in pixels or percentage value."
    }
  },
  "HTMLMediaElement": {
    "docs": "The **`HTMLMediaElement`** interface adds to `HTMLElement` the properties and methods needed to support basic media-related capabilities that are common to audio and video.\n\nThe `HTMLVideoElement` and `HTMLAudioElement` elements both inherit this interface.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement.",
    "properties": {
      "addtexttrack": "Adds a new `TextTrack` object (such as a track for subtitles) to a media element. This is a programmatic interface only and does not affect the DOM.",
      "audiotracks": "An `AudioTrackList` that lists the `AudioTrack` objects contained in the element.",
      "autoplay": "A boolean value that reflects the `autoplay` HTML attribute, indicating whether playback should automatically begin as soon as enough media is available to do so without interruption.\n\n**Note:** Automatically playing audio when the user doesn't expect or desire it is a poor user experience and should be avoided in most cases, though there are exceptions. See the Autoplay guide for media and Web Audio APIs for more information. Keep in mind that browsers may ignore autoplay requests, so you should ensure that your code isn't dependent on autoplay working.",
      "buffered": "Returns a `TimeRanges` object that indicates the ranges of the media source that the browser has buffered (if any) at the moment the `buffered` property is accessed.",
      "canplaytype": "Given a string specifying a MIME media type (potentially with the `codecs` parameter included), `canPlayType()` returns the string `probably` if the media should be playable, `maybe` if there's not enough information to determine whether the media will play or not, or an empty string if the media cannot be played.",
      "capturestream": "Returns `MediaStream`, captures a stream of the media content.",
      "controller": "A `MediaController` object that represents the media controller assigned to the element, or `null` if none is assigned.",
      "controls": "A boolean that reflects the `controls` HTML attribute, indicating whether user interface items for controlling the resource should be displayed.",
      "controlslist": "Returns a `DOMTokenList` that helps the user agent select what controls to show on the media element whenever the user agent shows its own set of controls. The `DOMTokenList` takes one or more of three possible values: `nodownload`, `nofullscreen`, and `noremoteplayback`.",
      "crossorigin": "A string indicating the CORS setting for this media element.",
      "currentsrc": "Returns a string with the absolute URL of the chosen media resource.",
      "currenttime": "A double-precision floating-point value indicating the current playback time in seconds; if the media has not started to play and has not been seeked, this value is the media's initial playback time. Setting this value seeks the media to the new time. The time is specified relative to the media's timeline.",
      "defaultmuted": "A boolean that reflects the `muted` HTML attribute, which indicates whether the media element's audio output should be muted by default.",
      "defaultplaybackrate": "A `double` indicating the default playback rate for the media.",
      "disableremoteplayback": "A boolean that sets or returns the remote playback state, indicating whether the media element is allowed to have a remote playback UI.",
      "duration": "A read-only double-precision floating-point value indicating the total duration of the media in seconds. If no media data is available, the returned value is `NaN`. If the media is of indefinite length (such as streamed live media, a WebRTC call's media, or similar), the value is `+Infinity`.",
      "ended": "Returns a boolean that indicates whether the media element has finished playing.",
      "error": "Returns a `MediaError` object for the most recent error, or `null` if there has not been an error.",
      "fastseek": "Quickly seeks to the given time with low precision.",
      "load": "Resets the media to the beginning and selects the best available source from the sources provided using the `src` attribute or the `<source>` element.",
      "loop": "A boolean that reflects the `loop` HTML attribute, which indicates whether the media element should start over when it reaches the end.",
      "mediagroup": "A string that reflects the `mediagroup` HTML attribute, which indicates the name of the group of elements it belongs to. A group of media elements shares a common `MediaController`.",
      "mediakeys": "Returns a `MediaKeys` object, that is a set of keys that the element can use for decryption of media data during playback. If no key is available, it can be `null`.",
      "mozaudiocaptured": "Returns a boolean. Related to audio stream capture.",
      "mozcapturestream": "[enter description]",
      "mozcapturestreamuntilended": "[enter description]",
      "mozfragmentend": "A `double` that provides access to the fragment end time if the media element has a fragment URI for `currentSrc`, otherwise it is equal to the media duration.",
      "mozgetmetadata": "Returns `Object`, which contains properties that represent metadata from the playing media resource as `{key: value}` pairs. A separate copy of the data is returned each time the method is called. This method must be called after the `loadedmetadata` event fires.",
      "muted": "A boolean that determines whether audio is muted. `true` if the audio is muted and `false` otherwise.",
      "networkstate": "Returns a `unsigned short` (enumeration) indicating the current state of fetching the media over the network.",
      "pause": "Pauses the media playback.",
      "paused": "Returns a boolean that indicates whether the media element is paused.",
      "play": "Begins playback of the media.",
      "playbackrate": "A `double` that indicates the rate at which the media is being played back.",
      "played": "Returns a `TimeRanges` object that contains the ranges of the media source that the browser has played, if any.",
      "preload": "A string that reflects the `preload` HTML attribute, indicating what data should be preloaded, if any. Possible values are: `none`, `metadata`, `auto`.",
      "preservespitch": "A boolean value that determines if the pitch of the sound will be preserved. If set to `false`, the pitch will adjust to the speed of the audio.",
      "readystate": "Returns a `unsigned short` (enumeration) indicating the readiness state of the media.",
      "remote": "Return a `RemotePlayback` object instance associated with the media element.",
      "seekable": "Returns a `TimeRanges` object that contains the time ranges that the user is able to seek to, if any.",
      "seeking": "Returns a boolean that indicates whether the media is in the process of seeking to a new position.",
      "seektonextframe": "Seeks to the next frame in the media. This non-standard, experimental method makes it possible to manually drive reading and rendering of media at a custom speed, or to move through the media frame-by-frame to perform filtering or other operations.",
      "setmediakeys": "Returns `Promise`. Sets the `MediaKeys` keys to use when decrypting media during playback.",
      "setsinkid": "Sets the ID of the audio device to use for output and returns a `Promise`. This only works when the application is authorized to use the specified device.",
      "sinkid": "Returns a string that is the unique ID of the audio device delivering output, or an empty string if the user agent default audio device is being used.",
      "src": "A string that reflects the `src` HTML attribute, which contains the URL of a media resource to use.",
      "srcobject": "A `MediaStream` representing the media to play or that has played in the current `HTMLMediaElement`, or `null` if not assigned.",
      "texttracks": "Returns a `TextTrackList` object containing the list of `TextTrack` objects contained in the element.",
      "videotracks": "Returns a `VideoTrackList` object containing the list of `VideoTrack` objects contained in the element.",
      "volume": "A `double` indicating the audio volume, from 0.0 (silent) to 1.0 (loudest)."
    }
  },
  "HTMLMenuElement": {
    "docs": "The **`HTMLMenuElement`** interface provides special properties (beyond those defined on the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating `<menu>` elements.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLMenuElement."
  },
  "HTMLHtmlElement": {
    "docs": "The **`HTMLHtmlElement`** interface serves as the root node for a given HTML document. This object inherits the properties and methods described in the `HTMLElement` interface.\n\nYou can retrieve the `HTMLHtmlElement` object for a given document by reading the value of the `document.documentElement` property.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLHtmlElement.",
    "properties": {
      "version": "A string representing the version of the HTML Document Type Definition (DTD) that governs this document. This property should not be used any more as it is non-conforming. Omit it."
    }
  },
  "HTMLMetaElement": {
    "docs": "The **`HTMLMetaElement`** interface contains descriptive metadata about a document provided in HTML as `<meta>` elements.\n  This interface inherits all of the properties and methods described in the `HTMLElement` interface.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLMetaElement.",
    "properties": {
      "charset": "The character encoding for a HTML document.",
      "content": "The 'value' part of the name-value pairs of the document metadata.",
      "httpequiv": "The name of the pragma directive, the HTTP response header, for a document.",
      "media": "The media context for a `theme-color` metadata property.",
      "name": "The 'name' part of the name-value pairs defining the named metadata of a document.",
      "scheme": "Defines the scheme of the value in the `HTMLMetaElement.content` attribute.\n      This is deprecated and should not be used on new web pages."
    }
  },
  "HTMLMeterElement": {
    "docs": "The HTML `<meter>` elements expose the **`HTMLMeterElement`** interface, which provides special properties and methods (beyond the `HTMLElement` object interface they also have available to them by inheritance) for manipulating the layout and presentation of `<meter>` elements.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLMeterElement.",
    "properties": {
      "high": "A `double` representing the value of the high boundary, reflecting the `high` attribute.",
      "labels": "A `NodeList` of `<label>` elements that are associated with the element.",
      "low": "A `double` representing the value of the low boundary, reflecting the `low`attribute.",
      "max": "A `double` representing the maximum value, reflecting the `max` attribute.",
      "min": "A `double` representing the minimum value, reflecting the `min` attribute.",
      "optimum": "A `double` representing the optimum, reflecting the `optimum` attribute.",
      "value": "A `double` representing the current value, reflecting the `value` attribute."
    }
  },
  "HTMLLegendElement": {
    "docs": "The **`HTMLLegendElement`** is an interface allowing to access properties of the `<legend>` elements. It inherits properties and methods from the `HTMLElement` interface.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLLegendElement.",
    "properties": {
      "accesskey": "A string representing a single-character access key to give access to the element.",
      "align": "A string representing the alignment relative to the form set",
      "form": "A `HTMLFormElement` representing the form that this legend belongs to. If the legend has a fieldset element as its parent, then this attribute returns the same value as the **form** attribute on the parent fieldset element. Otherwise, it returns null."
    }
  },
  "HTMLObjectElement": {
    "docs": "The **`HTMLObjectElement`** interface provides special properties and methods (beyond those on the `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of `<object>` element, representing external resources.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement.",
    "properties": {
      "align": "A string representing an enumerated property indicating alignment of the element's contents with respect to the surrounding context. The possible values are `\"left\"`, `\"right\"`, `\"justify\"`, and `\"center\"`.",
      "archive": "A string that reflects the `archive` HTML attribute, containing a list of archives for resources for this object.",
      "border": "A string that reflects the `border` HTML attribute, specifying the width of a border around the object.",
      "checkvalidity": "Returns a boolean value that always is `true`, because `object` objects are never candidates for constraint validation.",
      "code": "A string representing the name of an applet class file, containing either the applet's subclass, or the path to get to the class, including the class file itself.",
      "codebase": "A string that reflects the `codebase` HTML attribute, specifying the base path to use to resolve relative URIs.",
      "codetype": "A string that reflects the `codetype` HTML attribute, specifying the content type of the data.",
      "contentdocument": "Returns a `Document` representing the active document of the object element's nested browsing context, if any; otherwise `null`.",
      "contentwindow": "Returns a WindowProxy representing the window proxy of the object element's nested browsing context, if any; otherwise `null`.",
      "data": "Returns a string that reflects the `data` HTML attribute, specifying the address of a resource's data.",
      "declare": "A boolean value that reflects the `declare` HTML attribute, indicating that this is a declaration, not an instantiation, of the object.",
      "form": "Returns a `HTMLFormElement` representing the object element's form owner, or null if there isn't one.",
      "height": "Returns a string that reflects the `height` HTML attribute, specifying the displayed height of the resource in CSS pixels.",
      "hspace": "A `long` representing the horizontal space in pixels around the control.",
      "name": "Returns a string that reflects the `name` HTML attribute, specifying the name of the browsing context.",
      "setcustomvalidity": "Sets a custom validity message for the element. If this message is not the empty string, then the element is suffering from a custom validity error, and does not validate.",
      "standby": "A string that reflects the `standby` HTML attribute, specifying a message to display while the object loads.",
      "type": "A string that reflects the `type` HTML attribute, specifying the MIME type of the resource.",
      "usemap": "A string that reflects the `usemap` HTML attribute, specifying a `<map>` element to use.",
      "validationmessage": "Returns a string representing a localized message that describes the validation constraints that the control does not satisfy (if any). This is the empty string if the control is not a candidate for constraint validation (`willValidate` is `false`), or it satisfies its constraints.",
      "validity": "Returns a `ValidityState` with the validity states that this element is in.",
      "vspace": "A `long` representing the horizontal space in pixels around the control.",
      "width": "A string that reflects the `width` HTML attribute, specifying the displayed width of the resource in CSS pixels.",
      "willvalidate": "Returns a boolean value that indicates whether the element is a candidate for constraint validation. Always `false` for `HTMLObjectElement` objects."
    }
  },
  "HTMLLabelElement": {
    "docs": "The **`HTMLLabelElement`** interface gives access to properties specific to `<label>` elements. It inherits methods and properties from the base `HTMLElement` interface.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement.",
    "properties": {
      "control": "A `HTMLElement` representing the control with which the label is associated.",
      "form": "A `HTMLFormElement` object representing the form with which the labeled control is associated, or `null` if there is no associated control, or if that control isn't associated with a form. In other words, this is just a shortcut for `HTMLLabelElement.control.form`.",
      "htmlfor": "A string containing the ID of the labeled control. This reflects the `for` attribute."
    }
  },
  "HTMLModElement": {
    "docs": "The **`HTMLModElement`** interface provides special properties (beyond the regular methods and properties available through the `HTMLElement` interface they also have available to them by inheritance) for manipulating modification elements, that is `<del>` and `<ins>`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLModElement.",
    "properties": {
      "cite": "A string reflecting the `cite` HTML attribute, containing a URI of a resource explaining the change.",
      "datetime": "A string reflecting the `datetime` HTML attribute, containing a date-and-time string representing a timestamp for the change."
    }
  },
  "HTMLOptionsCollection": {
    "docs": "The **`HTMLOptionsCollection`** interface represents a collection of `<option>` HTML elements (in document order) and offers methods and properties for selecting from the list as well as optionally altering its items. This object is returned only by the `options` property of select.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionsCollection."
  },
  "HTMLParagraphElement": {
    "docs": "The **`HTMLParagraphElement`** interface provides special properties (beyond those of the regular `HTMLElement` object interface it inherits) for manipulating `<p>` elements.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLParagraphElement.",
    "properties": {
      "align": "A string representing an enumerated property indicating alignment of the element's contents with respect to the surrounding context. The possible values are `\"left\"`, `\"right\"`, `\"justify\"`, and `\"center\"`."
    }
  },
  "HTMLMenuItemElement": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\n**Non-standard:** This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n\nThe **`HTMLMenuItemElement`** interface provides special properties (beyond those defined on the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating `<menuitem>` elements.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLMenuItemElement."
  },
  "HTMLParamElement": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe **`HTMLParamElement`** interface provides special properties (beyond those of the regular `HTMLElement` object interface it inherits) for manipulating `<param>` elements, representing a pair of a key and a value that acts as a parameter for an `<object>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLParamElement.",
    "properties": {
      "name": "A string representing the name of the parameter. It reflects the `name` attribute.",
      "type": "A string containing the type of the parameter when `valueType` has the `\"ref\"` value. It reflects the `type` attribute.",
      "value": "A string representing the value associated to the parameter. It reflects the `value` attribute.",
      "valuetype": "A string containing the type of the `value`. It reflects the valuetype attribute and has one of the values: `\"data\"`, `\"ref\"`, or `\"object\"`."
    }
  },
  "HTMLOptionElement": {
    "docs": "The **`HTMLOptionElement`** interface represents `<option>` elements and inherits all properties and methods of the `HTMLElement` interface.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement.",
    "properties": {
      "defaultselected": "Has a value of either `true` or `false` that shows the initial value of the `selected` HTML attribute, indicating whether the option is selected by default or not.",
      "disabled": "Has a value of either `true` or `false` representing the value of the `disabled` HTML attribute, which indicates that the option is unavailable to be selected. An option can also be disabled if it is a child of an `<optgroup>` element that is disabled.",
      "form": "A `HTMLFormElement` representing the same value as the `form` of the corresponding `<select>` element, if the option is a descendant of a `<select>` element, or null if none is found.",
      "index": "A `long` representing the position of the option within the list of options it belongs to, in tree-order. If the option is not part of a list of options, like when it is part of the `<datalist>` element, the value is `0`.",
      "label": "A string that reflects the value of the `label` HTML attribute, which provides a label for the option. If this attribute isn't specifically set, reading it returns the element's text content.",
      "selected": "Has a value of either `true` or `false` that indicates whether the option is currently selected.",
      "text": "A string that contains the text content of the element.",
      "value": "A string that reflects the value of the `value` HTML attribute, if it exists; otherwise reflects value of the `Node.textContent` property."
    }
  },
  "HTMLPictureElement": {
    "docs": "The **`HTMLPictureElement`** interface represents a `<picture>` HTML element. It doesn't implement specific properties or methods.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLPictureElement."
  },
  "HTMLOptGroupElement": {
    "docs": "The **`HTMLOptGroupElement`** interface provides special properties and methods (beyond the regular `HTMLElement` object interface they also have available to them by inheritance) for manipulating the layout and presentation of `<optgroup>` elements.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptGroupElement.",
    "properties": {
      "disabled": "A boolean value representing whether or not the whole list of children `<option>` is disabled (true) or not (false).",
      "label": "A string representing the label for the group."
    }
  },
  "HTMLQuoteElement": {
    "docs": "The **`HTMLQuoteElement`** interface provides special properties and methods (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating quoting elements, like `<blockquote>` and `<q>`, but not the `<cite>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLQuoteElement.",
    "properties": {
      "cite": "A string reflecting the `cite` HTML attribute, containing a URL for the source of the quotation."
    }
  },
  "HTMLSelectElement": {
    "docs": "The **`HTMLSelectElement`** interface represents a `<select>` HTML Element. These elements also share all of the properties and methods of other HTML elements via the `HTMLElement` interface.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement.",
    "properties": {
      "add": "Adds an element to the collection of `option` elements for this `select` element.",
      "autofocus": "A boolean value reflecting the `autofocus` HTML attribute, which indicates whether the control should have input focus when the page loads, unless the user overrides it, for example by typing in a different control. Only one form-associated element in a document can have this attribute specified.",
      "blur": "Removes input focus from this element. This method is now implemented on `HTMLElement`.",
      "checkvalidity": "Checks whether the element has any constraints and whether it satisfies them. If the element fails its constraints, the browser fires a cancelable `invalid` event at the element (and returns `false`).",
      "disabled": "A boolean value reflecting the `disabled` HTML attribute, which indicates whether the control is disabled. If it is disabled, it does not accept clicks.",
      "focus": "Gives input focus to this element. This method is now implemented on `HTMLElement`.",
      "form": "An `HTMLFormElement` referencing the form that this element is associated with. If the element is not associated with of a `<form>` element, then it returns `null`.",
      "item": "Gets an item from the options collection for this `<select>` element. You can also access an item by specifying the index in square brackets or parentheses, without calling this method explicitly.",
      "labels": "A `NodeList` of `<label>` elements associated with the element.",
      "length": "An `unsigned long` The number of `<option>` elements in this `select` element.",
      "multiple": "A boolean value reflecting the `multiple` HTML attribute, which indicates whether multiple items can be selected.",
      "name": "A string reflecting the `name` HTML attribute, containing the name of this control used by servers and DOM search functions.",
      "nameditem": "Gets the item in the options collection with the specified name. The name string can match either the `id` or the `name` attribute of an option node. You can also access an item by specifying the name in square brackets or parentheses, without calling this method explicitly.",
      "options": "An `HTMLOptionsCollection` representing the set of `<option>` (`HTMLOptionElement`) elements contained by this element.",
      "remove": "Removes the element at the specified index from the options collection for this `select` element.",
      "reportvalidity": "This method reports the problems with the constraints on the element, if any, to the user. If there are problems, it fires a cancelable `invalid` event at the element, and returns `false`; if there are no problems, it returns `true`.",
      "required": "A boolean value reflecting the `required` HTML attribute, which indicates whether the user is required to select a value before submitting the form.",
      "selectedindex": "A `long` reflecting the index of the first selected `<option>` element. The value `-1` indicates no element is selected.",
      "selectedoptions": "An `HTMLCollection` representing the set of `<option>` elements that are selected.",
      "setcustomvalidity": "Sets the custom validity message for the selection element to the specified message. Use the empty string to indicate that the element does not have a custom validity error.",
      "size": "A `long` reflecting the `size` HTML attribute, which contains the number of visible items in the control. The default is 1, unless `multiple` is `true`, in which case it is 4.",
      "type": "A string representing the form control's type. When `multiple` is `true`, it returns `\"select-multiple\"`; otherwise, it returns `\"select-one\"`.",
      "validationmessage": "A string representing a localized message that describes the validation constraints that the control does not satisfy (if any). This attribute is the empty string if the control is not a candidate for constraint validation (`willValidate` is false), or it satisfies its constraints.",
      "validity": "A `ValidityState` reflecting the validity state that this control is in.",
      "value": "A string reflecting the value of the form control. Returns the `value` property of the first selected option element if there is one, otherwise the empty string.",
      "willvalidate": "A boolean value that indicates whether the button is a candidate for constraint validation. It is `false` if any conditions bar it from constraint validation."
    }
  },
  "HTMLScriptElement": {
    "docs": "HTML `<script>` elements expose the **`HTMLScriptElement`** interface, which provides special properties and methods for manipulating the behavior and execution of `<script>` elements (beyond the inherited `HTMLElement` interface).\n\nJavaScript files should be served with the `text/javascript` MIME type, but browsers are lenient and block them only if the script is served with an image type (`image/*`), video type (`video/*`), audio type (`audio/*`), or `text/csv`. If the script is blocked, its element receives an `error` event; otherwise, it receives a `load` event.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement.",
    "properties": {
      "async": "The `async` and `defer` attributes are boolean attributes that control how the script should be executed. **The `defer` and `async` attributes must not be specified if the `src` attribute is absent.**\n\nThere are three possible execution modes:\n\n- If the `async` attribute is present, then the script will be executed asynchronously as soon as it downloads.\n- If the `async` attribute is absent but the `defer` attribute is present, then the script is executed when the page has finished parsing.\n- If neither attribute is present, then the script is fetched and executed immediately, blocking further parsing of the page.\n\nThe `defer` attribute may be specified with the `async` attribute, so legacy browsers that only support `defer` (and not `async`) fall back to the `defer` behavior instead of the default blocking behavior.\n\n**Note:** The exact processing details for these attributes are complex, involving many different aspects of HTML, and therefore are scattered throughout the specification. [These algorithms](https://html.spec.whatwg.org/multipage/scripting.html) describe the core ideas, but they rely on the parsing rules for `<script>` [start](https://html.spec.whatwg.org/multipage/syntax.html#start-tags) and [end](https://html.spec.whatwg.org/multipage/syntax.html#end-tags) tags in HTML, [in foreign content](https://html.spec.whatwg.org/multipage/syntax.html#foreign-elements), and [in XML](https://html.spec.whatwg.org/multipage/xhtml.html); the rules for the `document.write()` method; the handling of [scripting](https://html.spec.whatwg.org/multipage/webappapis.html); and so on.",
      "charset": "A string representing the character encoding of an external script. It reflects the `charset` attribute.",
      "crossorigin": "A string reflecting the CORS setting for the script element. For scripts from other origins, this controls if error information will be exposed.",
      "event": "A string; an obsolete way of registering event handlers on elements in an HTML document.",
      "fetchpriority": "An optional string representing a hint given to the browser on how it should prioritize fetching of an external script relative to other external scripts. If this value is provided, it must be one of the possible permitted values: `high` to fetch at a high priority, `low` to fetch at a low priority, or `auto` to indicate no preference (which is the default).",
      "nomodule": "A boolean value that if true, stops the script's execution in browsers that support ES modules â used to run fallback scripts in older browsers that do not support JavaScript modules.",
      "referrerpolicy": "A string that reflects the `referrerPolicy` HTML attribute indicating which referrer to use when fetching the script, and fetches done by that script.",
      "src": "A string representing the URL of an external script. It reflects the `src` attribute.",
      "supports": "Returns `true` if the browser supports scripts of the specified type and `false` otherwise.\n      This method provides a simple and unified method for script-related feature detection.",
      "text": "A string that joins and returns the contents of all `Text` nodes inside the `<script>` element (ignoring other nodes like comments) in tree order. On setting, it acts the same way as the `textContent` IDL attribute.\n\n**Note:** When inserted using the `document.write()` method, `<script>` elements execute (typically synchronously), but when inserted using `innerHTML` or `outerHTML`, they do not execute at all.",
      "type": "A string representing the MIME type of the script. It reflects the `type` attribute."
    }
  },
  "HTMLPreElement": {
    "docs": "The **`HTMLPreElement`** interface exposes specific properties and methods (beyond those of the `HTMLElement` interface it also has available to it by inheritance) for manipulating a block of preformatted text (`<pre>`).\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLPreElement.",
    "properties": {
      "width": "A `long` value reflecting the obsolete `width` attribute, containing a fixed-size length for the `<pre>` element."
    }
  },
  "HTMLOListElement": {
    "docs": "The **`HTMLOListElement`** interface provides special properties (beyond those defined on the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating ordered list elements.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLOListElement.",
    "properties": {
      "compact": "A boolean value indicating that spacing between list items should be reduced. This property reflects the `compact` attribute only, it doesn't consider the `line-height` CSS property used for that behavior in modern pages.",
      "reversed": "A boolean value reflecting the `reversed` and defining if the numbering is descending, that is its value is `true`, or ascending (`false`).",
      "start": "A `long` value reflecting the `start` and defining the value of the first number of the first element of the list.",
      "type": "A string value reflecting the `type` and defining the kind of marker to be used to display. It can have the following values:\n\n- `'1'` meaning that decimal numbers are used: `1`, `2`, `3`, `4`, `5`, â¦\n- `'a'` meaning that the lowercase latin alphabet is used: `a`, `b`, `c`, `d`, `e`, â¦\n- `'A'` meaning that the uppercase latin alphabet is used: `A`, `B`, `C`, `D`, `E`, â¦\n- `'i'` meaning that the lowercase latin numerals are used: `i`, `ii`, `iii`, `iv`, `v`, â¦\n- `'I'` meaning that the uppercase latin numerals are used: `I`, `II`, `III`, `IV`, `V`, â¦"
    }
  },
  "HTMLSpanElement": {
    "docs": "The **`HTMLSpanElement`** interface represents a `<span>` element and derives from the `HTMLElement` interface, but without implementing any additional properties or methods.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLSpanElement."
  },
  "HTMLSourceElement": {
    "docs": "The **`HTMLSourceElement`** interface provides special properties (beyond the regular `HTMLElement` object interface it also has available to it by inheritance) for manipulating `<source>` elements.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLSourceElement.",
    "properties": {
      "media": "A string reflecting the `media` HTML attribute, containing the intended type of the media resource.",
      "sizes": "A string representing image sizes between breakpoints",
      "src": "A string reflecting the `src` HTML attribute, containing the URL for the media resource. The `HTMLSourceElement.src` property has a meaning only when the associated `<source>` element is nested in a media element that is a `<video>` or an `<audio>` element. It has no meaning and is ignored when it is nested in a `<picture>` element.\n\n**Note:** If the `src` property is updated (along with any siblings), the parent `HTMLMediaElement`'s `load` method should be called when done, since `<source>` elements are not re-scanned automatically.",
      "srcset": "A string reflecting the `srcset` HTML attribute, containing a list of candidate images, separated by a comma (`',', U+002C COMMA`). A candidate image is a URL followed by a `'w'` with the width of the images, or an `'x'` followed by the pixel density.",
      "type": "A string reflecting the `type` HTML attribute, containing the type of the media resource."
    }
  },
  "HTMLProgressElement": {
    "docs": "The **`HTMLProgressElement`** interface provides special properties and methods (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of `<progress>` elements.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLProgressElement.",
    "properties": {
      "labels": "Returns `NodeList` containing the list of `<label>` elements that are labels for this element.",
      "max": "A `double` value reflecting the content attribute of the same name, limited to numbers greater than zero. Its default value is `1.0`.",
      "position": "Returns a `double` value returning the result of dividing the current value (`value`) by the maximum value (`max`); if the progress bar is an indeterminate progress bar, it returns `-1`.",
      "value": "A `double` value that reflects the current value; if the progress bar is an indeterminate progress bar, it returns `0`."
    }
  },
  "HTMLStyleElement": {
    "docs": "The **`HTMLStyleElement`** interface represents a `<style>` element. It inherits properties and methods from its parent, `HTMLElement`.\n\nThis interface doesn't allow to manipulate the CSS it contains (in most case). To manipulate CSS, see Using dynamic styling information for an overview of the objects used to manipulate specified CSS properties using the DOM.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement.",
    "properties": {
      "disabled": "A boolean value indicating whether or not the associated stylesheet is disabled.",
      "media": "A string reflecting the HTML attribute representing the intended destination medium for style information.",
      "sheet": "Returns the `CSSStyleSheet` object associated with the given element, or `null` if there is none.",
      "type": "A string reflecting the HTML attribute representing the type of style being applied by this statement."
    }
  },
  "HTMLOutputElement": {
    "docs": "The **`HTMLOutputElement`** interface provides properties and methods (beyond those inherited from `HTMLElement`) for manipulating the layout and presentation of `<output>` elements.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLOutputElement.",
    "properties": {
      "checkvalidity": "Checks the validity of the element and returns a boolean value holding the check result.",
      "defaultvalue": "A string representing the default value of the element, initially the empty string.",
      "form": "An `HTMLFormElement` indicating the form associated with the control, reflecting the `form` HTML attribute if it is defined.",
      "htmlfor": "A `DOMTokenList` reflecting the `for` HTML attribute, containing a list of IDs of other elements in the same document that contribute to (or otherwise affect) the calculated `value`.",
      "labels": "A `NodeList` of `<label>` elements associated with the element.",
      "name": "A string reflecting the `name` HTML attribute, containing the name for the control that is submitted with form data.",
      "reportvalidity": "This method reports the problems with the constraints on the element, if any, to the user. If there are problems, fires an `invalid` event at the element, and returns `false`; if there are no problems, it returns `true`.\n\nWhen the problem is reported, the user agent may focus the element and change the scrolling position of the document or perform some other action that brings the element to the user's attention. User agents may report more than one constraint violation if this element suffers from multiple problems at once. If the element is not rendered, then the user agent may report the error for the running script instead of notifying the user.",
      "setcustomvalidity": "Sets a custom validity message for the element. If this message is not the empty string, then the element is suffering from a custom validity error, and does not validate.",
      "type": "The string \"`output`\".",
      "validationmessage": "A string representing a localized message that describes the validation constraints that the control does not satisfy (if any). This is the empty string if the control is not a candidate for constraint validation (`willValidate` is `false`), or it satisfies its constraints.",
      "validity": "A `ValidityState` representing the validity states that this element is in.",
      "value": "A string representing the value of the contents of the elements. Behaves like the `Node.textContent` property.",
      "willvalidate": "A boolean value indicating whether the element is a candidate for constraint validation."
    }
  },
  "HTMLTableCaptionElement": {
    "docs": "The **`HTMLTableCaptionElement`** interface provides special properties (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating table `<caption>` elements.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCaptionElement.",
    "properties": {
      "align": "A string which represents an enumerated attribute indicating alignment of the caption with respect to the table."
    }
  },
  "HTMLTableColElement": {
    "docs": "The **`HTMLTableColElement`** interface provides properties for manipulating single or grouped table column elements.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableColElement.",
    "properties": {
      "align": "A string that indicates the horizontal alignment of the cell data in the column.",
      "ch": "A string representing the alignment character for cell data.",
      "choff": "A string representing the offset for the alignment character.",
      "span": "An `unsigned long` that reflects the `span` HTML attribute, indicating the number of columns to apply this object's attributes to. Must be a positive integer.",
      "valign": "A string that indicates the vertical alignment of the cell data in the column.",
      "width": "A string representing the default column width."
    }
  },
  "HTMLTableElement": {
    "docs": "The **`HTMLTableElement`** interface provides special properties and methods (beyond the regular `HTMLElement` object interface it also has available to it by inheritance) for manipulating the layout and presentation of tables in an HTML document.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement.",
    "properties": {
      "align": "A string containing an enumerated value reflecting the `align` attribute. It indicates the alignment of the element's contents with respect to the surrounding context. The possible values are `\"left\"`, `\"right\"`, and `\"center\"`.",
      "bgcolor": "A string containing the background color of the cells. It reflects the obsolete `bgColor` attribute.",
      "border": "A string containing the width in pixels of the border of the table. It reflects the obsolete `border` attribute.",
      "caption": "A `HTMLTableCaptionElement` representing the first `<caption>` that is a child of the element, or `null` if none is found. When set, if the object doesn't represent a `<caption>`, a `DOMException` with the `HierarchyRequestError` name is thrown. If a correct object is given, it is inserted in the tree as the first child of this element and the first `<caption>` that is a child of this element is removed from the tree, if any.",
      "cellpadding": "A string containing the width in pixels of the horizontal and vertical space between cell content and cell borders. It reflects the obsolete `cellpadding` attribute.",
      "cellspacing": "A string containing the width in pixels of the horizontal and vertical separation between cells. It reflects the obsolete `cellspacing` attribute.",
      "createcaption": "Returns an `HTMLElement` representing the first `<caption>` that is a child of the element. If none is found, a new one is created and inserted in the tree as the first child of the `<table>` element.",
      "createtbody": "Returns a `HTMLTableSectionElement` representing a new `<tbody>` that is a child of the element. It is inserted in the tree after the last element that is a `<tbody>`, or as the last child if there is no such element.",
      "createtfoot": "Returns an `HTMLTableSectionElement` representing the first `<tfoot>` that is a child of the element. If none is found, a new one is created and inserted in the tree as the last child.",
      "createthead": "Returns an `HTMLTableSectionElement` representing the first `<thead>` that is a child of the element. If none is found, a new one is created and inserted in the tree immediately before the first element that is neither a `<caption>`, nor a `<colgroup>`, or as the last child if there is no such element.",
      "deletecaption": "Removes the first `<caption>` that is a child of the element.",
      "deleterow": "Removes the row corresponding to the `index` given in parameter. If the `index` value is `-1` the last row is removed; if it is smaller than `-1` or greater than the amount of rows in the collection, a `DOMException` with the value `IndexSizeError` is raised.",
      "deletetfoot": "Removes the first `<tfoot>` that is a child of the element.",
      "deletethead": "Removes the first `<thead>` that is a child of the element.",
      "frame": "A string containing the type of the external borders of the table. It reflects the obsolete `frame` attribute and can take one of the following values: `\"void\"`, `\"above\"`, `\"below\"`, `\"hsides\"`, `\"vsides\"`, `\"lhs\"`, `\"rhs\"`, `\"box\"`, or `\"border\"`.",
      "insertrow": "Returns an `HTMLTableRowElement` representing a new row of the table. It inserts it in the rows collection immediately before the `<tr>` element at the given `index` position. If necessary a `<tbody>` is created. If the `index` is `-1`, the new row is appended to the collection. If the `index` is smaller than `-1` or greater than the number of rows in the collection, a `DOMException` with the value `IndexSizeError` is raised.",
      "rows": "Returns a live `HTMLCollection` containing all the rows of the element, that is all `<tr>` that are a child of the element, or a child of one of its `<thead>`, `<tbody>` and `<tfoot>` children. The rows members of a `<thead>` appear first, in tree order, and those members of a `<tbody>` last, also in tree order. The `HTMLCollection` is live and is automatically updated when the `HTMLTableElement` changes.",
      "rules": "A string containing the type of the internal borders of the table. It reflects the obsolete `rules` attribute and can take one of the following values: `\"none\"`, `\"groups\"`, `\"rows\"`, `\"cols\"`, or `\"all\"`.",
      "summary": "A string containing a description of the purpose or the structure of the table. It reflects the obsolete `summary` attribute.",
      "tbodies": "Returns a live `HTMLCollection` containing all the `<tbody>` of the element. The `HTMLCollection` is live and is automatically updated when the `HTMLTableElement` changes.",
      "tfoot": "A `HTMLTableSectionElement` representing the first `<tfoot>` that is a child of the element, or `null` if none is found. When set, if the object doesn't represent a `<tfoot>`, a `DOMException` with the `HierarchyRequestError` name is thrown. If a correct object is given, it is inserted in the tree immediately before the first element that is neither a `<caption>`, a `<colgroup>`, nor a `<thead>`, or as the last child if there is no such element, and the first `<tfoot>` that is a child of this element is removed from the tree, if any.",
      "thead": "A `HTMLTableSectionElement` representing the first `<thead>` that is a child of the element, or `null` if none is found. When set, if the object doesn't represent a `<thead>`, a `DOMException` with the `HierarchyRequestError` name is thrown. If a correct object is given, it is inserted in the tree immediately before the first element that is neither a `<caption>`, nor a `<colgroup>`, or as the last child if there is no such element, and the first `<thead>` that is a child of this element is removed from the tree, if any.",
      "width": "A string containing the length in pixels or in percentage of the desired width of the entire table. It reflects the obsolete `width` attribute."
    }
  },
  "HTMLTableSectionElement": {
    "docs": "The **`HTMLTableSectionElement`** interface provides special properties and methods (beyond the `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of sections, that is headers, footers and bodies (`<thead>`, `<tfoot>`, and `<tbody>`, respectively) in an HTML table.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableSectionElement.",
    "properties": {
      "align": "A string containing an enumerated value reflecting the `align` attribute. It indicates the alignment of the element's contents with respect to the surrounding context. The possible values are `\"left\"`, `\"right\"`, and `\"center\"`.",
      "ch": "A string containing one single character. This character is the one to align all the cell of a column on. It reflects the `char` and default to the decimal points associated with the language, e.g. `'.'` for English, or `','` for French. This property was optional and was not very well supported.",
      "choff": "A string containing an integer indicating how many characters must be left at the right (for left-to-right scripts; or at the left for right-to-left scripts) of the character defined by `HTMLTableRowElement.ch`. This property was optional and was not very well supported.",
      "deleterow": "Removes the row, corresponding to the `index` given in parameter, in the section. If the `index` value is `-1` the last row is removed; if it smaller than `-1` or greater than the amount of rows in the collection, a `DOMException` with the value `IndexSizeError` is raised.",
      "insertrow": "Returns an `HTMLTableRowElement` representing a new row of the section. It inserts it in the rows collection immediately before the `<tr>` element at the given `index` position. If the `index` is `-1`, the new row is appended to the collection. If the `index` is smaller than `-1` or greater than the number of rows in the collection, a `DOMException` with the value `IndexSizeError` is raised.",
      "rows": "Returns a live `HTMLCollection` containing the rows in the section. The `HTMLCollection` is live and is automatically updated when rows are added or removed.",
      "valign": "A string representing an enumerated value indicating how the content of the cell must be vertically aligned. It reflects the `valign` attribute and can have one of the following values: `\"top\"`, `\"middle\"`, `\"bottom\"`, or `\"baseline\"`."
    }
  },
  "HTMLTemplateElement": {
    "docs": "The **`HTMLTemplateElement`** interface enables access to the contents of an HTML `<template>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLTemplateElement."
  },
  "HTMLTitleElement": {
    "docs": "The **`HTMLTitleElement`** interface is implemented by a document's `<title>`. This element inherits all of the properties and methods of the `HTMLElement` interface.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLTitleElement.",
    "properties": {
      "text": "A string representing the text of the document's title."
    }
  },
  "HTMLSlotElement": {
    "docs": "The **`HTMLSlotElement`** interface of the Shadow DOM API enables access to the name and assigned nodes of an HTML `<slot>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement.",
    "properties": {
      "assign": "Sets the manually assigned nodes for this slot to the given nodes.",
      "assignedelements": "Returns a sequence of the elements assigned to this slot (and no other nodes). If the `flatten` option is set to `true`, it returns a sequence of both the elements assigned to this slot, and the elements assigned to any other slots that are descendants of this slot. If no assigned elements are found, it returns the slot's fallback content.",
      "assignednodes": "Returns a sequence of the nodes assigned to this slot. If the `flatten` option is set to `true`, it returns a sequence of both the nodes assigned to this slot, and the nodes assigned to any other slots that are descendants of this slot. If no assigned nodes are found, it returns the slot's fallback content.",
      "name": "A string used to get and set the slot's name."
    }
  },
  "HTMLUListElement": {
    "docs": "The **`HTMLUListElement`** interface provides special properties (beyond those defined on the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating unordered list (`<ul>`) elements.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLUListElement.",
    "properties": {
      "compact": "A boolean value indicating that spacing between list items should be reduced. This property reflects the `compact` attribute only, it doesn't consider the `line-height` CSS property used for that behavior in modern pages.",
      "type": "A string value reflecting the `type` and defining the kind of marker to be used to display. The values are browser dependent and have never been standardized."
    }
  },
  "HTMLTextAreaElement": {
    "docs": "The **`HTMLTextAreaElement`** interface provides special properties and methods for manipulating the layout and presentation of `<textarea>` elements.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement."
  },
  "HTMLUnknownElement": {
    "docs": "The **`HTMLUnknownElement`** interface represents an invalid HTML element and derives from the `HTMLElement` interface, but without implementing any additional properties or methods.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLUnknownElement."
  },
  "HTMLVideoElement": {
    "docs": "Implemented by the `<video>` element, the **`HTMLVideoElement`** interface provides special properties and methods for manipulating video objects. It also inherits properties and methods of `HTMLMediaElement` and `HTMLElement`.\n\nThe list of supported media formats varies from one browser to the other. You should either provide your video in a single format that all the relevant browsers supports, or provide multiple video sources in enough different formats that all the browsers you need to support are covered.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement.",
    "properties": {
      "disablepictureinpicture": "The `disablePictureInPicture` property will hint the user agent to not suggest the picture-in-picture to users or to request it automatically",
      "getvideoplaybackquality": "Returns a `VideoPlaybackQuality` object that contains the current playback metrics. This information includes things like the number of dropped or corrupted frames, as well as the total number of frames.",
      "height": "A string that reflects the `height` HTML attribute, which specifies the height of the display area, in CSS pixels.",
      "mozdecodedframes": "Returns an `unsigned long` with the count of parsed video frames that have been decoded into images.",
      "mozframedelay": "Returns an `double` with the time which the last painted video frame was late by, in seconds.",
      "mozhasaudio": "Returns a boolean indicating if there is some audio associated with the video.",
      "mozpaintedframes": "Returns an `unsigned long` with the count of presented frames which were painted on the screen.",
      "mozparsedframes": "Returns an `unsigned long` with the count of video frames that have been parsed from the media resource.",
      "mozpresentedframes": "Returns an `unsigned long` with the count of decoded frames that have been presented to the rendering pipeline for painting.",
      "poster": "A string that reflects the `poster` HTML attribute, which specifies an image to show while no video data is available.",
      "requestpictureinpicture": "Requests that the user agent make video enters picture-in-picture mode",
      "videoheight": "Returns an unsigned integer value indicating the intrinsic height of the resource in CSS pixels, or 0 if no media is available yet.",
      "videowidth": "Returns an unsigned integer value indicating the intrinsic width of the resource in CSS pixels, or 0 if no media is available yet.",
      "width": "A string that reflects the `width` HTML attribute, which specifies the width of the display area, in CSS pixels."
    }
  },
  "HTMLTimeElement": {
    "docs": "The **`HTMLTimeElement`** interface provides special properties (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating `<time>` elements.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLTimeElement.",
    "properties": {
      "datetime": "A string that reflects the `datetime` HTML attribute, containing a machine-readable form of the element's date and time value."
    }
  },
  "HashChangeEvent": {
    "docs": "The **`HashChangeEvent`** interface represents events that fire when the fragment identifier of the URL has changed.\n\nThe fragment identifier is the part of the URL that follows (and includes) the `#` symbol.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HashChangeEvent.",
    "properties": {
      "newurl": "The new URL to which the window is navigating.",
      "oldurl": "The previous URL from which the window was navigated."
    }
  },
  "Headers": {
    "docs": "The **`Headers`** interface of the Fetch API allows you to perform various actions on HTTP request and response headers. These actions include retrieving, setting, adding to, and removing headers from the list of the request's headers.\n\nA `Headers` object has an associated header list, which is initially empty and consists of zero or more name and value pairs. You can add to this using methods like `append()` (see Examples.) In all methods of this interface, header names are matched by case-insensitive byte sequence.\n\nFor security reasons, some headers can only be controlled by the user agent. These headers include the forbidden header names and forbidden response header names.\n\nA Headers object also has an associated guard, which takes a value of `immutable`, `request`, `request-no-cors`, `response`, or `none`. This affects whether the `set()`, `delete()`, and `append()` methods will mutate the header. For more information see Guard.\n\nYou can retrieve a `Headers` object via the `Request.headers` and `Response.headers` properties, and create a new `Headers` object using the `Headers()` constructor.\n\nAn object implementing `Headers` can directly be used in a `for...of` structure, instead of `entries()`: `for (const p of myHeaders)` is equivalent to `for (const p of myHeaders.entries())`.\n\n**Note:** you can find out more about the available headers by reading our HTTP headers reference.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Headers.",
    "properties": {
      "append": "Appends a new value onto an existing header inside a `Headers` object, or adds the header if it does not already exist.",
      "delete": "Deletes a header from a `Headers` object.",
      "entries": "Returns an `iterator` allowing to go through all key/value pairs contained in this object.",
      "foreach": "Executes a provided function once for each key/value pair in this `Headers` object.",
      "get": "Returns a `String` sequence of all the values of a header within a `Headers` object with a given name.",
      "getsetcookie": "Returns an array containing the values of all `Set-Cookie` headers associated with a response.",
      "has": "Returns a boolean stating whether a `Headers` object contains a certain header.",
      "keys": "Returns an `iterator` allowing you to go through all keys of the key/value pairs contained in this object.",
      "set": "Sets a new value for an existing header inside a `Headers` object, or adds the header if it does not already exist.",
      "values": "Returns an `iterator` allowing you to go through all values of the key/value pairs contained in this object."
    }
  },
  "Highlight": {
    "docs": "The **`Highlight`** interface of the CSS Custom Highlight API is used to represent a collection of `Range` instances to be styled using the API.\n\nTo style arbitrary ranges in a page, instantiate a new `Highlight` object, add one or more `Range` objects to it, and register it using the `HighlightRegistry`.\n\nA `Highlight` instance is a `Set`-like object that can hold one or more `Range` objects.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Highlight.",
    "properties": {
      "add": "Add a new range to this highlight.",
      "clear": "Remove all ranges from this highlight.",
      "delete": "Remove a range from this highlight.",
      "entries": "Returns a new iterator object that contains each range in the highlight object, in insertion order.",
      "foreach": "Calls the given callback once for each range in the highlight object, in insertion order.",
      "has": "Returns a boolean asserting whether a range is present the highlight object or not.",
      "keys": "An alias for `Highlight.values()`.",
      "priority": "A number that indicates the priority of this `Highlight` object. When multiple highlights overlap, the browser uses this priority to decide how to style the overlapping parts.",
      "size": "Returns the number of ranges in the `Highlight` object.",
      "type": "An enumerated `String` used to specify the semantic meaning of the highlight. This allows assistive technologies to include this meaning when exposing the highlight to users.",
      "values": "Returns a new iterator object that yields the ranges in the highlight object in insertion order."
    }
  },
  "HighlightRegistry": {
    "docs": "The **`HighlightRegistry`** interface of the CSS Custom Highlight API is used to register `Highlight` objects to be styled using the API.\n  It is accessed via `CSS.highlights`.\n\nA `HighlightRegistry` instance is a `Map`-like object, in which each key is the name string for a custom highlight, and the corresponding value is the associated `Highlight` object.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HighlightRegistry.",
    "properties": {
      "clear": "Remove all `Highlight` objects from the registry.",
      "delete": "Remove the named `Highlight` object from the registry.",
      "entries": "Returns a new iterator object that contains each `Highlight` object in the registry, in insertion order.",
      "foreach": "Calls the given callback once for each `Highlight` object in the registry, in insertion order.",
      "get": "Gets the named `Highlight` object from the registry.",
      "has": "Returns a boolean asserting whether a `Highlight` object is present the registry or not.",
      "keys": "An alias for `HighlightRegistry.values()`.",
      "set": "Adds the given `Highlight` object to the registry with the given name, or updates the named `Highlight` object, if it already exists in the registry.",
      "size": "Returns the number of `Highlight` objects currently registered.",
      "values": "Returns a new iterator object that yields the `Highlight` objects in the registry, in insertion order."
    }
  },
  "History": {
    "docs": "The **`History`** interface allows manipulation of the browser session history, that is the pages visited in the tab or frame that the current page is loaded in.\n\nThere is only one instance of `history` (It is a singleton.) accessible via the global object `history`.\n\n**Note:** This interface is only available on the main thread (`Window`). It cannot be accessed in `Worker` or `Worklet` contexts.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/History."
  },
  "HTMLTrackElement": {
    "docs": "The **`HTMLTrackElement`** interface represents an HTML `<track>` element within the DOM. This element can be used as a child of either `<audio>` or `<video>` to specify a text track containing information such as closed captions or subtitles.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement.",
    "properties": {
      "default": "A boolean value reflecting the `default` attribute, indicating that the track is to be enabled if the user's preferences do not indicate that another track would be more appropriate.",
      "kind": "A string that reflects the `kind` HTML attribute, indicating how the text track is meant to be used. Possible values are: `subtitles`, `captions`, `descriptions`, `chapters`, or `metadata`.",
      "label": "A string that reflects the `label` HTML attribute, indicating a user-readable title for the track.",
      "readystate": "Returns an `unsigned short` that show the readiness state of the track:",
      "src": "A string that reflects the `src` HTML attribute, indicating the address of the text track data.",
      "srclang": "A string that reflects the `srclang` HTML attribute, indicating the language of the text track data.",
      "track": "Returns `TextTrack` is the track element's text track data."
    }
  },
  "HTMLTableCellElement": {
    "docs": "The **`HTMLTableCellElement`** interface provides special properties and methods (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of table cells, either header cells (`<th>`)) or data cells (`<td>`), in an HTML document.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement.",
    "properties": {
      "abbr": "A string which can be used on `<th>` elements (not on `<td>`), specifying an alternative label for the header cell. This alternate label can be used in other contexts, such as when describing the headers that apply to a data cell. This is used to offer a shorter term for use by screen readers in particular, and is a valuable accessibility tool. Usually the value of `abbr` is an abbreviation or acronym, but can be any text that's appropriate contextually.",
      "align": "A string containing an enumerated value reflecting the `align` attribute. It indicates the alignment of the element's contents with respect to the surrounding context. The possible values are `\"left\"`, `\"right\"`, and `\"center\"`.",
      "axis": "A string containing a name grouping cells in virtual. It reflects the obsolete `axis` attribute.",
      "bgcolor": "A string containing the background color of the cells. It reflects the obsolete `bgColor` attribute.",
      "cellindex": "A long integer representing the cell's position in the `cells` collection of the `<tr>` the cell is contained within. If the cell doesn't belong to a `<tr>`, it returns `-1`.",
      "ch": "A string containing one single character. This character is the one to align all the cell of a column on. It reflects the `char` and default to the decimal points associated with the language, e.g. `'.'` for English, or `','` for French. This property was optional and was not very well supported.",
      "choff": "A string containing an integer indicating how many characters must be left at the right (for left-to-right scripts; or at the left for right-to-left scripts) of the character defined by `HTMLTableCellElement.ch`. This property was optional and was not very well supported.",
      "colspan": "An unsigned long integer indicating the number of columns this cell must span; this lets the cell occupy space across multiple columns of the table. It reflects the `colspan` attribute.",
      "headers": "A `DOMTokenList` describing a list of `id` of `<th>` elements that represents headers associated with the cell. It reflects the `headers` attribute.",
      "height": "A string containing a length of pixel of the hinted height of the cell. It reflects the obsolete `height` attribute.",
      "nowrap": "A boolean value reflecting the `nowrap` attribute and indicating if cell content can be broken in several lines.",
      "rowspan": "An unsigned long integer indicating the number of rows this cell must span; this lets a cell occupy space across multiple rows of the table. It reflects the `rowspan` attribute.",
      "scope": "A string indicating the scope of a `<th>` cell. Header cells can be configured, using the `scope` property, the apply to a specified row or column, or to the not-yet-scoped cells within the current row group (that is, the same ancestor `<thead>`, `<tbody>`, or `<tfoot>` element). If no value is specified for `scope`, the header is not associated directly with cells in this way. Permitted values for `scope` are:\n\n| --- | --- |\n| `col` | The header cell applies to the following cells in the same column (or columns, if `colspan` is used as well), until either the end of the column or another `<th>` in the column establishes a new scope. |\n| `colgroup` | The header cell applies to all cells in the current column group that do not already have a scope applied to them. This value is only allowed if the cell is in a column group. |\n| `row` | The header cell applies to the following cells in the same row (or rows, if `rowspan` is used as well), until either the end of the row or another `<th>` in the same row establishes a new scope. |\n| `rowgroup` | The header cell applies to all cells in the current row group that do not already have a scope applied to them. This value is only allowed if the cell is in a row group. |\n| The empty string (`\"\"`) | The header cell has no predefined scope; the user agent will establish the scope based on contextual clues. |",
      "valign": "A string representing an enumerated value indicating how the content of the cell must be vertically aligned. It reflects the `valign` attribute and can have one of the following values: `\"top\"`, `\"middle\"`, `\"bottom\"`, or `\"baseline\"`. Use the CSS `vertical-align` property instead.",
      "width": "A string specifying the number of pixels wide the cell should be drawn, if possible. This property reflects the also obsolete `width` attribute. Use the CSS `width` property instead."
    }
  },
  "HkdfParams": {
    "docs": "The **`HkdfParams`** dictionary of the Web Crypto API represents the object that should be passed as the `algorithm` parameter into `SubtleCrypto.deriveKey()`, when using the HKDF algorithm.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HkdfParams."
  },
  "HmacKeyGenParams": {
    "docs": "The **`HmacKeyGenParams`** dictionary of the Web Crypto API represents the object that should be passed as the `algorithm` parameter into `SubtleCrypto.generateKey()`, when generating a key for the HMAC algorithm.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HmacKeyGenParams."
  },
  "IDBCursor": {
    "docs": "**Note:** Not to be confused with `IDBCursorWithValue` which is just an **`IDBCursor`** interface with an additional **`value`** property.\n\nThe **`IDBCursor`** interface of the IndexedDB API represents a cursor for traversing or iterating over multiple records in a database.\n\nThe cursor has a source that indicates which index or object store it is iterating over. It has a position within the range, and moves in a direction that is increasing or decreasing in the order of record keys. The cursor enables an application to asynchronously process all the records in the cursor's range.\n\nYou can have an unlimited number of cursors at the same time. You always get the same `IDBCursor` object representing a given cursor. Operations are performed on the underlying index or object store.\n\n**Note:** This feature is available in Web Workers\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor.",
    "properties": {
      "advance": "Sets the number of times a cursor should move its position forward.",
      "continue": "Advances the cursor to the next position along its direction, to the item whose key matches the optional `key` parameter.",
      "continueprimarykey": "Sets the cursor to the given index key and primary key given as arguments.",
      "delete": "Returns an `IDBRequest` object, and, in a separate thread, deletes the record at the cursor's position, without changing the cursor's position. This can be used to delete specific records.",
      "direction": "Returns the direction of traversal of the cursor. See Constants for possible values.",
      "key": "Returns the key for the record at the cursor's position. If the cursor is outside its range, this is set to `undefined`. The cursor's key can be any data type.",
      "primarykey": "Returns the cursor's current effective primary key. If the cursor is currently being iterated or has iterated outside its range, this is set to `undefined`. The cursor's primary key can be any data type.",
      "request": "Returns the `IDBRequest` that was used to obtain the cursor.",
      "source": "Returns the `IDBObjectStore` or `IDBIndex` that the cursor is iterating. This function never returns null or throws an exception, even if the cursor is currently being iterated, has iterated past its end, or its transaction is not active.",
      "update": "Returns an `IDBRequest` object, and, in a separate thread, updates the value at the current position of the cursor in the object store. This can be used to update specific records."
    }
  },
  "HTMLTableRowElement": {
    "docs": "The **`HTMLTableRowElement`** interface provides special properties and methods (beyond the `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of rows in an HTML table.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement.",
    "properties": {
      "align": "A string containing an enumerated value reflecting the `align` attribute. It indicates the alignment of the element's contents with respect to the surrounding context. The possible values are `\"left\"`, `\"right\"`, and `\"center\"`.",
      "bgcolor": "A string containing the background color of the cells. It reflects the obsolete `bgColor` attribute.",
      "cells": "Returns a live `HTMLCollection` containing the cells in the row. The `HTMLCollection` is live and is automatically updated when cells are added or removed.",
      "ch": "A string containing one single character. This character is the one to align all the cell of a column on. It reflects the `char` and default to the decimal points associated with the language, e.g. `'.'` for English, or `','` for French. This property was optional and was not very well supported.",
      "choff": "A string containing an integer indicating how many characters must be left at the right (for left-to-right scripts; or at the left for right-to-left scripts) of the character defined by `HTMLTableRowElement.ch`. This property was optional and was not very well supported.",
      "rowindex": "Returns a `long` value which gives the logical position of the row within the entire table. If the row is not part of a table, returns `-1`.",
      "sectionrowindex": "Returns a `long` value which gives the logical position of the row within the table section it belongs to. If the row is not part of a section, returns `-1`.",
      "valign": "A string representing an enumerated value indicating how the content of the cell must be vertically aligned. It reflects the `valign` attribute and can have one of the following values: `\"top\"`, `\"middle\"`, `\"bottom\"`, or `\"baseline\"`."
    }
  },
  "IDBCursorWithValue": {
    "docs": "The **`IDBCursorWithValue`** interface of the IndexedDB API represents a cursor for traversing or iterating over multiple records in a database. It is the same as the `IDBCursor`, except that it includes the `value` property.\n\nThe cursor has a source that indicates which index or object store it is iterating over. It has a position within the range, and moves in a direction that is increasing or decreasing in the order of record keys. The cursor enables an application to asynchronously process all the records in the cursor's range.\n\nYou can have an unlimited number of cursors at the same time. You always get the same `IDBCursorWithValue` object representing a given cursor. Operations are performed on the underlying index or object store.\n\n**Note:** This feature is available in Web Workers\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/IDBCursorWithValue.",
    "properties": {
      "value": "Returns the value of the current cursor."
    }
  },
  "IDBDatabase": {
    "docs": "The **`IDBDatabase`** interface of the IndexedDB API provides a connection to a database; you can use an `IDBDatabase` object to open a transaction on your database then create, manipulate, and delete objects (data) in that database. The interface provides the only way to get and manage versions of the database.\n\n**Note:** This feature is available in Web Workers\n\n**Note:** Everything you do in IndexedDB always happens in the context of a transaction, representing interactions with data in the database. All objects in IndexedDB â including object stores, indexes, and cursors â are tied to a particular transaction. Thus, you cannot execute commands, access data, or open anything outside of a transaction.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase.",
    "properties": {
      "close": "Returns immediately and closes the connection to a database in a separate thread.",
      "createobjectstore": "Creates and returns a new object store or index.",
      "deleteobjectstore": "Destroys the object store with the given name in the connected database, along with any indexes that reference it.",
      "name": "A string that contains the name of the connected database.",
      "objectstorenames": "A `DOMStringList` that contains a list of the names of the object stores currently in the connected database.",
      "transaction": "Immediately returns a transaction object (`IDBTransaction`) containing the `IDBTransaction.objectStore` method, which you can use to access your object store. Runs in a separate thread.",
      "version": "A 64-bit integer that contains the version of the connected database. When a database is first created, this attribute is an empty string."
    }
  },
  "IDBFactory": {
    "docs": "The **`IDBFactory`** interface of the IndexedDB API lets applications asynchronously access the indexed databases. The object that implements the interface is `window.indexedDB`. You open â that is, create and access â and delete a database with this object, and not directly with `IDBFactory`.\n\n**Note:** This feature is available in Web Workers\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory.",
    "properties": {
      "cmp": "A method that compares two keys and returns a result indicating which one is greater in value.",
      "databases": "A method that returns a list of all available databases, including their names and versions.",
      "deletedatabase": "A method to request the deletion of a database.",
      "open": "The current method to request opening a connection to a database."
    }
  },
  "IDBIndex": {
    "docs": "`IDBIndex` interface of the IndexedDB API provides asynchronous access to an index in a database. An index is a kind of object store for looking up records in another object store, called the referenced object store. You use this interface to retrieve data.\n\nYou can retrieve records in an object store through the primary key or by using an index. An index lets you look up records in an object store using properties of the values in the object stores records other than the primary key\n\nThe index is a persistent key-value storage where the value part of its records is the key part of a record in the referenced object store. The records in an index are automatically populated whenever records in the referenced object store are inserted, updated, or deleted. Each record in an index can point to only one record in its referenced object store, but several indexes can reference the same object store. When the object store changes, all indexes that refers to the object store are automatically updated.\n\nYou can grab a set of keys within a range. To learn more, see `IDBKeyRange`.\n\n**Note:** This feature is available in Web Workers\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex.",
    "properties": {
      "count": "Returns an `IDBRequest` object, and in a separate thread, returns the number of records within a key range.",
      "get": "Returns an `IDBRequest` object, and, in a separate thread, finds either the value in the referenced object store that corresponds to the given key or the first corresponding value, if `key` is an `IDBKeyRange`.",
      "getall": "Returns an `IDBRequest` object, in a separate thread, finds all matching values in the referenced object store that correspond to the given key or are in range, if `key` is an `IDBKeyRange`.",
      "getallkeys": "Returns an `IDBRequest` object, in a separate thread, finds all matching keys in the referenced object store that correspond to the given key or are in range, if `key` is an `IDBKeyRange`.",
      "getkey": "Returns an `IDBRequest` object, and, in a separate thread, finds either the given key or the primary key, if `key` is an `IDBKeyRange`.",
      "isautolocale": "Returns a boolean value indicating whether the index had a `locale` value of `auto` specified upon its creation (see the `options` parameter to `IDBObjectStore.createIndex()`.)",
      "keypath": "The key path of this index. If null, this index is not auto-populated.",
      "locale": "Returns the locale of the index (for example `en-US`, or `pl`) if it had a `locale` value specified upon its creation (see the `options` parameter to `IDBObjectStore.createIndex()`.)",
      "multientry": "Affects how the index behaves when the result of evaluating the index's key path yields an array. If `true`, there is one record in the index for each item in an array of keys. If `false`, then there is one record for each key that is an array.",
      "name": "The name of this index.",
      "objectstore": "The name of the object store referenced by this index.",
      "opencursor": "Returns an `IDBRequest` object, and, in a separate thread, creates a cursor over the specified key range.",
      "openkeycursor": "Returns an `IDBRequest` object, and, in a separate thread, creates a cursor over the specified key range, as arranged by this index.",
      "unique": "If `true`, this index does not allow duplicate values for a key."
    }
  },
  "HmacImportParams": {
    "docs": "The **`HmacImportParams`** dictionary of the Web Crypto API represents the object that should be passed as the `algorithm` parameter into `SubtleCrypto.importKey()` or `SubtleCrypto.unwrapKey()`, when generating a key for the HMAC algorithm.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/HmacImportParams."
  },
  "IDBObjectStore": {
    "docs": "The **`IDBObjectStore`** interface of the IndexedDB API represents an object store in a database. Records within an object store are sorted according to their keys. This sorting enables fast insertion, look-up, and ordered retrieval.\n\n**Note:** This feature is available in Web Workers\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore.",
    "properties": {
      "add": "Returns an `IDBRequest` object, and, in a separate thread, creates a [structured clone](https://html.spec.whatwg.org/multipage/common-dom-interfaces.html#structured-clone) of the `value`, and stores the cloned value in the object store. This is for adding new records to an object store.",
      "autoincrement": "The value of the auto increment flag for this object store.",
      "clear": "Creates and immediately returns an `IDBRequest` object, and clears this object store in a separate thread. This is for deleting all current records out of an object store.",
      "count": "Returns an `IDBRequest` object, and, in a separate thread, returns the total number of records that match the provided key or `IDBKeyRange`. If no arguments are provided, it returns the total number of records in the store.",
      "createindex": "Creates a new index during a version upgrade, returning a new `IDBIndex` object in the connected database.",
      "delete": "returns an `IDBRequest` object, and, in a separate thread, deletes the store object selected by the specified key. This is for deleting individual records out of an object store.",
      "deleteindex": "Destroys the specified index in the connected database, used during a version upgrade.",
      "get": "Returns an `IDBRequest` object, and, in a separate thread, returns the store object store selected by the specified key. This is for retrieving specific records from an object store.",
      "getall": "Returns an `IDBRequest` object retrieves all objects in the object store matching the specified parameter or all objects in the store if no parameters are given.",
      "getallkeys": "Returns an `IDBRequest` object retrieves record keys for all objects in the object store matching the specified parameter or all objects in the store if no parameters are given.",
      "getkey": "Returns an `IDBRequest` object, and, in a separate thread retrieves and returns the record key for the object in the object stored matching the specified parameter.",
      "index": "Opens an index from this object store after which it can, for example, be used to return a sequence of records sorted by that index using a cursor.",
      "indexnames": "A list of the names of indexes on objects in this object store.",
      "keypath": "The key path of this object store. If this attribute is `null`, the application must provide a key for each modification operation.",
      "name": "The name of this object store.",
      "opencursor": "Returns an `IDBRequest` object, and, in a separate thread, returns a new `IDBCursorWithValue` object. Used for iterating through an object store by primary key with a cursor.",
      "openkeycursor": "Returns an `IDBRequest` object, and, in a separate thread, returns a new `IDBCursor`. Used for iterating through an object store with a key.",
      "put": "Returns an `IDBRequest` object, and, in a separate thread, creates a [structured clone](https://html.spec.whatwg.org/multipage/common-dom-interfaces.html#structured-clone) of the `value`, and stores the cloned value in the object store. This is for updating existing records in an object store when the transaction's mode is `readwrite`.",
      "transaction": "The `IDBTransaction` object to which this object store belongs."
    }
  },
  "IDBOpenDBRequest": {
    "docs": "The **`IDBOpenDBRequest`** interface of the IndexedDB API provides access to the results of requests to open or delete databases (performed using `IDBFactory.open` and `IDBFactory.deleteDatabase`), using specific event handler attributes.\n\n**Note:** This feature is available in Web Workers\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/IDBOpenDBRequest."
  },
  "IDBRequest": {
    "docs": "The **`IDBRequest`** interface of the IndexedDB API provides access to results of asynchronous requests to databases and database objects using event handler attributes. Each reading and writing operation on a database is done using a request.\n\nThe request object does not initially contain any information about the result of the operation, but once information becomes available, an event is fired on the request, and the information becomes available through the properties of the `IDBRequest` instance.\n\nAll asynchronous operations immediately return an `IDBRequest` instance. Each request has a `readyState` that is set to the `'pending'` state; this changes to `'done'` when the request is completed or fails. When the state is set to `done`, every request returns a `result` and an `error`, and an event is fired on the request. When the state is still `pending`, any attempt to access the `result` or `error` raises an `InvalidStateError` exception.\n\nIn plain words, all asynchronous methods return a request object. If the request has been completed successfully, the result is made available through the `result` property and an event indicating success is fired at the request (`success`). If an error occurs while performing the operation, the exception is made available through the `error` property and an error event is fired (`error`).\n\nThe interface `IDBOpenDBRequest` is derived from `IDBRequest`.\n\n**Note:** This feature is available in Web Workers\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/IDBRequest.",
    "properties": {
      "error": "Returns a `DOMException` in the event of an unsuccessful request, indicating what went wrong.",
      "readystate": "The state of the request. Every request starts in the `pending` state. The state changes to `done` when the request completes successfully or when an error occurs.",
      "result": "Returns the result of the request. If the request is not completed, the result is not available and an `InvalidStateError` exception is thrown.",
      "source": "The source of the request, such as an `IDBIndex` or an `IDBObjectStore`. If no source exists (such as when calling `IDBFactory.open`), it returns null.",
      "transaction": "The transaction for the request. This property can be null for certain requests, for example those returned from `IDBFactory.open` unless an upgrade is needed. (You're just connecting to a database, so there is no transaction to return)."
    }
  },
  "IDBTransaction": {
    "docs": "The **`IDBTransaction`** interface of the IndexedDB API provides a static, asynchronous transaction on a database using event handler attributes. All reading and writing of data is done within transactions. You use `IDBDatabase` to start transactions, `IDBTransaction` to set the mode of the transaction (e.g. is it `readonly` or `readwrite`), and you access an `IDBObjectStore` to make a request. You can also use an `IDBTransaction` object to abort transactions.\n\n**Note:** This feature is available in Web Workers\n\nTransactions are started when the transaction is created, not when the first request is placed; for example consider this:\n\n```\nconst trans1 = db.transaction(\"foo\", \"readwrite\");\nconst trans2 = db.transaction(\"foo\", \"readwrite\");\nconst objectStore2 = trans2.objectStore(\"foo\");\nconst objectStore1 = trans1.objectStore(\"foo\");\nobjectStore2.put(\"2\", \"key\");\nobjectStore1.put(\"1\", \"key\");\n```\n\nAfter the code is executed the object store should contain the value \"2\", since `trans2` should run after `trans1`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction.",
    "properties": {
      "abort": "Rolls back all the changes to objects in the database associated with this transaction. If this transaction has been aborted or completed, this method fires an error event.",
      "commit": "For an active transaction, commits the transaction. Note that this doesn't normally have to be called â a transaction will automatically commit when all outstanding requests have been satisfied and no new requests have been made. `commit()` can be used to start the commit process without waiting for events from outstanding requests to be dispatched.",
      "db": "The database connection with which this transaction is associated.",
      "durability": "Returns the durability hint the transaction was created with.",
      "error": "Returns a `DOMException` indicating the type of error that occurred when there is an unsuccessful transaction. This property is `null` if the transaction is not finished, is finished and successfully committed, or was aborted with the `IDBTransaction.abort()` function.",
      "mode": "The mode for isolating access to data in the object stores that are in the scope of the transaction. The default value is `readonly`.",
      "objectstore": "Returns an `IDBObjectStore` object representing an object store that is part of the scope of this transaction.",
      "objectstorenames": "Returns a `DOMStringList` of the names of `IDBObjectStore` objects associated with the transaction."
    }
  },
  "IDBVersionChangeEvent": {
    "docs": "The **`IDBVersionChangeEvent`** interface of the IndexedDB API indicates that the version of the database has changed, as the result of an `onupgradeneeded` event handler function.\n\n**Note:** This feature is available in Web Workers\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeEvent.",
    "properties": {
      "newversion": "Returns the new version of the database.",
      "oldversion": "Returns the old version of the database."
    }
  },
  "IdentityCredential": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`IdentityCredential`** interface of the Federated Credential Management API (FedCM) represents a user identity credential arising from a successful federated sign-in.\n\nA successful `navigator.credentials.get()` call that includes an `identity` option fulfills with an `IdentityCredential` instance.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/IdentityCredential.",
    "properties": {
      "token": "Returns a `Promise` that resolves with the `Credential` instance that matches the provided parameters."
    }
  },
  "IDBKeyRange": {
    "docs": "The **`IDBKeyRange`** interface of the IndexedDB API represents a continuous interval over some data type that is used for keys. Records can be retrieved from `IDBObjectStore` and `IDBIndex` objects using keys or a range of keys. You can limit the range using lower and upper bounds. For example, you can iterate over all values of a key in the value range AâZ.\n\nA key range can be a single value or a range with upper and lower bounds or endpoints. If the key range has both upper and lower bounds, then it is bounded; if it has no bounds, it is unbounded. A bounded key range can either be open (the endpoints are excluded) or closed (the endpoints are included). To retrieve all keys within a certain range, you can use the following code constructs:\n\nA key is in a key range if the following conditions are true:\n\n- The lower value of the key range is one of the following:\n    \n      `undefined`\n      Less than key value\n      Equal to key value if `lowerOpen` is `false`.\n    \n  \n- `undefined`\n- Less than key value\n- Equal to key value if `lowerOpen` is `false`.\n- The upper value of the key range is one of the following:\n    \n      `undefined`\n      Greater than key value\n      Equal to key value if `upperOpen` is `false`.\n    \n  \n- `undefined`\n- Greater than key value\n- Equal to key value if `upperOpen` is `false`.\n\n**Note:** This feature is available in Web Workers\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/IDBKeyRange.",
    "properties": {
      "bound": "Creates a new key range with upper and lower bounds.",
      "includes": "Returns a boolean indicating whether a specified key is inside the key range.",
      "lower": "Lower bound of the key range.",
      "lowerbound": "Creates a new key range with only a lower bound.",
      "loweropen": "Returns false if the lower-bound value is included in the key range.",
      "only": "Creates a new key range containing a single value.",
      "upper": "Upper bound of the key range.",
      "upperbound": "Creates a new upper-bound key range.",
      "upperopen": "Returns false if the upper-bound value is included in the key range."
    }
  },
  "IDBLocaleAwareKeyRange": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\n**Non-standard:** This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n\nThe **`IDBLocaleAwareKeyRange`** interface of the IndexedDB API is a Firefox-specific version of `IDBKeyRange` â it functions in exactly the same fashion, and has the same properties and methods, but it is intended for use with `IDBIndex` objects when the original index had a `locale` value specified upon its creation (see the `options` parameter to `IDBObjectStore.createIndex()`) â that is, it has locale aware sorting enabled.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/IDBLocaleAwareKeyRange."
  },
  "ImageBitmapRenderingContext": {
    "docs": "The **`ImageBitmapRenderingContext`** interface is a canvas rendering context that provides the functionality to replace the canvas's contents with the given `ImageBitmap`. Its context id (the first argument to `HTMLCanvasElement.getContext()` or `OffscreenCanvas.getContext()`) is `\"bitmaprenderer\"`.\n\nThis interface is available in both the window and the worker context.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmapRenderingContext.",
    "properties": {
      "transferfromimagebitmap": "Displays the given `ImageBitmap` in the canvas associated with this rendering context. Ownership of the `ImageBitmap` is transferred to the canvas. This was previously named `transferImageBitmap()`, but was renamed in a spec change. The old name is being kept as an alias to avoid code breakage."
    }
  },
  "IdleDetector": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`IdleDetector`** interface of the Idle\nDetection API provides methods and events for detecting user activity on a device or screen.\n\nThis interface requires a secure context.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/IdleDetector.",
    "properties": {
      "requestpermission": "Returns a `Promise` that resolves when the user has chosen\n      whether to grant the origin access to their idle state. Resolves with\n      `\"granted\"` on acceptance and `\"denied\"` on refusal.",
      "screenstate": "Returns a string indicating whether the screen is locked, one of `\"locked\"` or `\"unlocked\"`. This attribute returns `null` before `start()` is called.",
      "start": "Returns a `Promise` that resolves when the detector starts listening for\n      changes in the user's idle state. `userState` and `screenState` are given\n      initial values. This method takes an optional `options` object with the `threshold` in\n      milliseconds where inactivity should be reported and `signal` for an\n      `AbortSignal` to abort the idle detector.",
      "userstate": "Returns a string indicating whether the users has interacted with either the screen or the device within the threshold provided to `start()`, one of `\"active\"` or `\"idle\"`. This attribute returns `null` before `start()` is called."
    }
  },
  "IIRFilterNode": {
    "docs": "The **`IIRFilterNode`** interface of the Web Audio API is a `AudioNode` processor which implements a general **[infinite impulse response](https://en.wikipedia.org/wiki/Infinite_impulse_response)** (IIR) filter; this type of filter can be used to implement tone control devices and graphic equalizers as well. It lets the parameters of the filter response be specified, so that it can be tuned as needed.\n\nTypically, it's best to use the `BiquadFilterNode` interface to implement higher-order filters. There are several reasons why:\n\n- Biquad filters are typically less sensitive to numeric quirks.\n- The filter parameters of biquad filters can be automated.\n- All even-ordered IIR filters can be created using `BiquadFilterNode`.\n\nHowever, if you need to create an odd-ordered IIR filter, you'll need to use `IIRFilterNode`. You may also find this interface useful if you don't need automation, or for other reasons.\n\n**Note:** Once the node has been created, you can't change its coefficients.\n\n`IIRFilterNode`s have a tail-time reference; they continue to output non-silent audio with zero input. As an IIR filter, the non-zero input continues forever, but this can be limited after some finite time in practice, when the output has approached zero closely enough. The actual time that takes depends on the filter coefficients provided.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/IIRFilterNode."
  },
  "ImageBitmap": {
    "docs": "The **`ImageBitmap`** interface represents a bitmap image which can be drawn to a `<canvas>` without undue latency. It can be created from a variety of source objects using the `createImageBitmap()` factory method. `ImageBitmap` provides an asynchronous and resource efficient pathway to prepare textures for rendering in WebGL.\n\n`ImageBitmap` is a transferable object.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap.",
    "properties": {
      "close": "Disposes of all graphical resources associated with an `ImageBitmap`.",
      "height": "An `unsigned long` representing the height, in CSS pixels, of the `ImageData`.",
      "width": "An `unsigned long` representing the width, in CSS pixels, of the `ImageData`."
    }
  },
  "ImageCapture": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`ImageCapture`** interface of the MediaStream Image Capture API provides methods to enable the capture of images or photos from a camera or other photographic device. It provides an interface for capturing images from a photographic device referenced through a valid `MediaStreamTrack`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ImageCapture.",
    "properties": {
      "getphotocapabilities": "Returns a `Promise` that resolves with an object containing the ranges of available configuration options.",
      "getphotosettings": "Returns a `Promise` that resolves with an object containing the current photo configuration settings.",
      "grabframe": "Takes a snapshot of the live video in a `MediaStreamTrack`, returning an `ImageBitmap`, if successful.",
      "takephoto": "Takes a single exposure using the video capture device sourcing a `MediaStreamTrack` and returns a `Promise` that resolves with a `Blob` containing the data.",
      "track": "Returns a reference to the `MediaStreamTrack` passed to the constructor."
    }
  },
  "ImageData": {
    "docs": "The **`ImageData`** interface represents the underlying pixel data of an area of a `<canvas>` element.\n\nIt is created using the `ImageData()` constructor or creator methods on the `CanvasRenderingContext2D` object associated with a canvas: `createImageData()` and `getImageData()`. It can also be used to set a part of the canvas by using `putImageData()`.\n\n**Note:** This feature is available in Web Workers\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ImageData.",
    "properties": {
      "colorspace": "A string indicating the color space of the image data.",
      "data": "A `Uint8ClampedArray` representing a one-dimensional array containing the data in the RGBA order, with integer values between `0` and `255` (inclusive). The order goes by rows from the top-left pixel to the bottom-right.",
      "height": "An `unsigned long` representing the actual height, in pixels, of the `ImageData`.",
      "width": "An `unsigned long` representing the actual width, in pixels, of the `ImageData`."
    }
  },
  "IdleDeadline": {
    "docs": "The `IdleDeadline` interface is used as the data type of the input parameter to idle callbacks established by calling `Window.requestIdleCallback()`. It offers a method, `timeRemaining()`, which lets you determine how much longer the user agent estimates it will remain idle and a property, `didTimeout`, which lets you determine if your callback is executing because its timeout duration expired.\n\nTo learn more about how request callbacks work, see Collaborative Scheduling of Background Tasks.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/IdleDeadline.",
    "properties": {
      "didtimeout": "A Boolean whose value is `true` if the callback is being executed because the timeout specified when the idle callback was installed has expired.",
      "timeremaining": "Returns a `DOMHighResTimeStamp`, which is a floating-point value providing an estimate of the number of milliseconds remaining in the current idle period. If the idle period is over, the value is 0. Your callback can call this repeatedly to see if there's enough time left to do more work before returning."
    }
  },
  "ImageTrackList": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`ImageTrackList`** interface of the WebCodecs API represents a list of image tracks.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ImageTrackList.",
    "properties": {
      "length": "Returns an integer indicating the length of the `ImageTrackList`.",
      "ready": "Returns a `promise` that resolves once the `ImageTrackList` has been populated with `tracks`.",
      "selectedindex": "Returns an integer indicating the index of the `selectedTrack`.",
      "selectedtrack": "Returns the selected `ImageTrack`."
    }
  },
  "ImageTrack": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`ImageTrack`** interface of the WebCodecs API represents an individual image track.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ImageTrack.",
    "properties": {
      "animated": "Returns a `boolean` indicating whether the track is animated and therefore has multiple frames.",
      "framecount": "Returns an integer indicating the number of frames in the track.",
      "repetitioncount": "Returns an integer indicating the number of times that the animation repeats.",
      "selected": "Returns a `boolean` indicating whether the track is selected for decoding."
    }
  },
  "Ink": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`Ink`** interface of the Ink API provides access to `InkPresenter` objects for the application to use to render ink strokes.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Ink."
  },
  "IdentityProvider": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`IdentityProvider`** interface of the Federated Credential Management (FedCM) API represents an identity provider (IdP) and provides access to related information.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/IdentityProvider."
  },
  "InputDeviceCapabilities": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`InputDeviceCapabilities`** interface of the Input Device Capabilities API provides information about the physical device or a group of related devices responsible for generating input events. Events caused by the same physical input device get the same instance of this object, but the converse isn't true. For example, two mice with the same capabilities in a system may appear as a single `InputDeviceCapabilities` instance.\n\nIn some instances, `InputDeviceCapabilities` represents the capabilities of logical devices rather than physical devices. This allows, for example, touchscreen keyboards and physical keyboards to be represented the same way when they produce the same input.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/InputDeviceCapabilities.",
    "properties": {
      "firestouchevents": "A `Boolean` that indicates whether the device dispatches touch events."
    }
  },
  "InstallEvent": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\n**Non-standard:** This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n\nThe parameter passed into the `oninstall` handler, the `InstallEvent` interface represents an install action that is dispatched on the `ServiceWorkerGlobalScope` of a `ServiceWorker`. As a child of `ExtendableEvent`, it ensures that functional events such as `FetchEvent` are not dispatched during installation.\n\nThis interface inherits from the `ExtendableEvent` interface.\n\n**Note:** Instead of using the deprecated `ServiceWorkerGlobalScope.oninstall()` handler to catch events of this type, instead handle the (non-deprecated) `install` using a listener added with `addEventListener()`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/InstallEvent."
  },
  "ImageDecoder": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`ImageDecoder`** interface of the WebCodecs API provides a way to unpack and decode encoded image data.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ImageDecoder.",
    "properties": {
      "close": "Ends all pending work and releases system resources.",
      "complete": "Returns a boolean value indicating whether encoded data is completely buffered.",
      "completed": "Returns a `Promise` that resolves once `complete` is true.",
      "decode": "Enqueues a control message to decode the frame of an image.",
      "istypesupported": "Indicates if the provided MIME type is supported for unpacking and decoding.",
      "reset": "Aborts all pending `decode()` operations.",
      "tracks": "Returns an `ImageTrackList` object listing the available tracks and providing a method for selecting a track to decode.",
      "type": "Returns a string reflecting the MIME type configured during construction."
    }
  },
  "IntersectionObserver": {
    "docs": "The **`IntersectionObserver`** interface of the Intersection Observer API provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document's viewport. The ancestor element or viewport is referred to as the root.\n\nWhen an `IntersectionObserver` is created, it's configured to watch for given ratios of visibility within the root. The configuration cannot be changed once the `IntersectionObserver` is created, so a given observer object is only useful for watching for specific changes in degree of visibility; however, you can watch multiple target elements with the same observer.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver.",
    "properties": {
      "disconnect": "Stops the `IntersectionObserver` object from observing any target.",
      "observe": "Tells the `IntersectionObserver` a target element to observe.",
      "root": "The `Element` or `Document` whose bounds are used as the bounding box when testing for intersection. If no `root` value was passed to the constructor or its value is `null`, the top-level document's viewport is used.",
      "rootmargin": "An offset rectangle applied to the root's bounding box when calculating intersections, effectively shrinking or growing the root for calculation purposes. The value returned by this property may not be the same as the one specified when calling the constructor as it may be changed to match internal requirements. Each offset can be expressed in pixels (`px`) or as a percentage (`%`). The default is \"0px 0px 0px 0px\".",
      "takerecords": "Returns an array of `IntersectionObserverEntry` objects for all observed targets.",
      "thresholds": "A list of thresholds, sorted in increasing numeric order, where each threshold is a ratio of intersection area to bounding box area of an observed target. Notifications for a target are generated when any of the thresholds are crossed for that target. If no value was passed to the constructor, 0 is used.",
      "unobserve": "Tells the `IntersectionObserver` to stop observing a particular target element."
    }
  },
  "IntersectionObserverEntry": {
    "docs": "The **`IntersectionObserverEntry`** interface of the Intersection Observer API describes the intersection between the target element and its root container at a specific moment of transition.\n\nInstances of `IntersectionObserverEntry` are delivered to an `IntersectionObserver` callback in its `entries` parameter; otherwise, these objects can only be obtained by calling `IntersectionObserver.takeRecords()`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry.",
    "properties": {
      "boundingclientrect": "Returns the bounds rectangle of the target element as a `DOMRectReadOnly`. The bounds are computed as described in the documentation for `Element.getBoundingClientRect()`.",
      "intersectionratio": "Returns the ratio of the `intersectionRect` to the `boundingClientRect`.",
      "intersectionrect": "Returns a `DOMRectReadOnly` representing the target's visible area.",
      "isintersecting": "A Boolean value which is `true` if the target element intersects with the intersection observer's root. If this is `true`, then, the `IntersectionObserverEntry` describes a transition into a state of intersection; if it's `false`, then you know the transition is from intersecting to not-intersecting.",
      "rootbounds": "Returns a `DOMRectReadOnly` for the intersection observer's root.",
      "target": "The `Element` whose intersection with the root changed.",
      "time": "A `DOMHighResTimeStamp` indicating the time at which the intersection was recorded, relative to the `IntersectionObserver`'s time origin."
    }
  },
  "InterventionReportBody": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe `InterventionReportBody` interface of the Reporting API represents the body of an intervention report.\n\nAn intervention report is generated when usage of a feature in a web document has been blocked by the browser for reasons such as security, performance, or user annoyance. So for example, a script was been stopped because it was significantly slowing down the browser, or the browser's autoplay policy blocked audio from playing without a user gesture to trigger it.\n\nA deprecation report is generated when a deprecated feature (for example a deprecated API method) is used on a document being observed by a `ReportingObserver`. In addition to the support of this API, receiving useful intervention warnings relies on browser vendors adding these warnings for the relevant features.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/InterventionReportBody.",
    "properties": {
      "columnnumber": "A string representing the column in the source file in which the intervention occurred, if known, or `null` otherwise.",
      "id": "A string representing the intervention that generated the report. This can be used to group reports.",
      "linenumber": "A string representing the line in the source file in which the intervention occurred, if known, or `null` otherwise.",
      "message": "A string containing a human-readable description of the intervention, including information such how the intervention could be avoided. This typically matches the message a browser will display in its DevTools console when an intervention is imposed, if one is available.",
      "sourcefile": "A string containing the path to the source file where the intervention occurred, if known, or `null` otherwise.",
      "tojson": "A serializer which returns a JSON representation of the `InterventionReportBody` object."
    }
  },
  "Keyboard": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\n**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`Keyboard`** interface of the Keyboard API provides functions that retrieve keyboard layout maps and toggle capturing of key presses from the physical keyboard.\n\nA list of valid code values is found in the [UI Events KeyboardEvent code Values](https://www.w3.org/TR/uievents-code/#key-alphanumeric-writing-system) spec.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Keyboard.",
    "properties": {
      "getlayoutmap": "Returns a `Promise` that resolves with an instance of `KeyboardLayoutMap` which is a map-like object with functions for retrieving the strings associated with specific physical keys.",
      "lock": "Returns a `Promise` after enabling the capture of keypresses for any or all of the keys on the physical keyboard.",
      "unlock": "Unlocks all keys captured by the `lock()` method and returns synchronously."
    }
  },
  "InputEvent": {
    "docs": "The **`InputEvent`** interface represents an event notifying the user of editable content changes.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/InputEvent.",
    "properties": {
      "data": "Returns a string with the inserted characters. This may be an empty string if the change doesn't insert text (for example, when deleting characters).",
      "datatransfer": "Returns a `DataTransfer` object containing information about richtext or plaintext data being added to or removed from editable content.",
      "gettargetranges": "Returns an array of static ranges that will be affected by a change to the DOM if the input event is not canceled.",
      "inputtype": "Returns the type of change for editable content such as, for example, inserting, deleting, or formatting text.",
      "iscomposing": "Returns a `Boolean` value indicating if the event is fired after `compositionstart` and before `compositionend`."
    }
  },
  "KeyframeEffect": {
    "docs": "The **`KeyframeEffect`** interface of the Web Animations API lets us create sets of animatable properties and values, called **keyframes.** These can then be played using the `Animation()` constructor.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffect.",
    "properties": {
      "composite": "Gets and sets the composite operation property for resolving the property value changes between this and other keyframe effects.",
      "getkeyframes": "Returns the computed keyframes that make up this effect along with their computed keyframe offsets.",
      "iterationcomposite": "Gets and sets the iteration composite operation for resolving the property value changes of this keyframe effect.",
      "pseudoelement": "Gets and sets the selector of the pseudo-element being animated by this object. This may be `null` for animations that do not target a pseudo-element.",
      "setkeyframes": "Replaces the set of keyframes that make up this effect.",
      "target": "Gets and sets the element, or originating element of the pseudo-element, being animated by this object. This may be `null` for animations that do not target a specific element or pseudo-element."
    }
  },
  "KeyboardEvent": {
    "docs": "**`KeyboardEvent`** objects describe a user interaction with the keyboard; each event describes a single interaction between the user and a key (or combination of a key with modifier keys) on the keyboard. The event type (`keydown`, `keypress`, or `keyup`) identifies what kind of keyboard activity occurred.\n\n**Note:** `KeyboardEvent` events just indicate what interaction the user had with a key on the keyboard at a low level, providing no contextual meaning to that interaction. When you need to handle text input, use the `input` event instead. Keyboard events may not be fired if the user is using an alternate means of entering text, such as a handwriting system on a tablet or graphics tablet.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent.",
    "properties": {
      "altkey": "Returns a boolean value that is `true` if the Alt (Option or â¥ on macOS) key was active when the key event was generated.",
      "charcode": "Returns a number representing the Unicode reference number of the key; this property is used only by the `keypress` event. For keys whose `char` property contains multiple characters, this is the Unicode value of the first character in that property. In Firefox 26 this returns codes for printable characters.\n\n**Warning:** This property is deprecated; you should use `KeyboardEvent.key` instead, if available.",
      "code": "Returns a string with the code value of the physical key represented by the event.\n\n**Warning:** This ignores the user's keyboard layout, so that if the user presses the key at the \"Y\" position in a QWERTY keyboard layout (near the middle of the row above the home row), this will always return \"KeyY\", even if the user has a QWERTZ keyboard (which would mean the user expects a \"Z\" and all the other properties would indicate a \"Z\") or a Dvorak keyboard layout (where the user would expect an \"F\"). If you want to display the correct keystrokes to the user, you can use `Keyboard.getLayoutMap()`.",
      "ctrlkey": "Returns a boolean value that is `true` if the Ctrl key was active when the key event was generated.",
      "getmodifierstate": "Returns a boolean value indicating if a modifier key such as Alt, Shift, Ctrl, or Meta, was pressed when the event was created.",
      "initkeyboardevent": "Initializes a `KeyboardEvent` object. This is now deprecated. You should instead use the `KeyboardEvent()` constructor.",
      "initkeyevent": "Initializes a `KeyboardEvent` object. This was implemented only by Firefox, and is no longer supported even there; instead, you should use the `KeyboardEvent()` constructor.",
      "iscomposing": "Returns a boolean value that is `true` if the event is fired between after `compositionstart` and before `compositionend`.",
      "key": "Returns a string representing the key value of the key represented by the event.",
      "keycode": "Returns a number representing a system and implementation dependent numerical code identifying the unmodified value of the pressed key.\n\n**Warning:** This property is deprecated; you should use `KeyboardEvent.key` instead, if available.",
      "keyidentifier": "This property is non-standard and has been deprecated in favor of `KeyboardEvent.key`. It was part of an old version of DOM Level 3 Events.",
      "location": "Returns a number representing the location of the key on the keyboard or other input device. A list of the constants identifying the locations is shown above in Keyboard locations.",
      "metakey": "Returns a boolean value that is `true` if the Meta key (on Mac keyboards, the â Command key; on Windows keyboards, the Windows key (â)) was active when the key event was generated.",
      "repeat": "Returns a boolean value that is `true` if the key is being held down such that it is automatically repeating.",
      "shiftkey": "Returns a boolean value that is `true` if the Shift key was active when the key event was generated."
    }
  },
  "InkPresenter": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`InkPresenter`** interface of the Ink API provides the ability to instruct the OS-level compositor to render ink strokes between pointer event dispatches.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/InkPresenter."
  },
  "LaunchParams": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`LaunchParams`** interface of the Launch Handler API is used when implementing custom launch navigation handling in a PWA. When `window.launchQueue.setConsumer()` is invoked to set up the launch navigation handling functionality, the callback function inside `setConsumer()` is passed a `LaunchParams` object instance.\n\nSuch custom navigation handling is initiated via `Window.launchQueue` when a PWA has been launched with a `launch_handler` `client_mode` value of `focus-existing`, `navigate-new`, or `navigate-existing`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/LaunchParams.",
    "properties": {
      "files": "Returns a read-only array of `FileSystemHandle` objects representing any files passed along with the launch navigation via the `POST` method.",
      "targeturl": "Returns the target URL of the launch."
    }
  },
  "LaunchQueue": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`LaunchQueue`** interface of the Launch Handler API is available via the `Window.launchQueue` property. When a progressive web app (PWA) is launched with a `launch_handler` `client_mode` value of `focus-existing`, `navigate-new`, or `navigate-existing`, `LaunchQueue` provides access to functionality that allows custom launch navigation handling to be implemented in the PWA. This functionality is controlled by the properties of the `LaunchParams` object passed into the `setConsumer()` callback function.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/LaunchQueue."
  },
  "LayoutShift": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe `LayoutShift` interface of the Performance API provides insights into the layout stability of web pages based on movements of the elements on the page.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/LayoutShift.",
    "properties": {
      "hadrecentinput": "Returns `true` if `lastInputTime` is less than 500 milliseconds in the past.",
      "lastinputtime": "Returns the time of the most recent excluding input (user input that would exclude this entry as a contributor to the CLS score) or `0` if no excluding input has occurred.",
      "sources": "Returns an array of `LayoutShiftAttribution` objects with information on the elements that were shifted.",
      "tojson": "Converts the properties to JSON.",
      "value": "Returns the layout shift score calculated as the impact fraction (fraction of the viewport that was shifted) multiplied by the distance fraction (distance moved as a fraction of viewport)."
    }
  },
  "InputDeviceInfo": {
    "docs": "The **`InputDeviceInfo`** interface of the Media Capture and Streams API gives access to the capabilities of the input device that it represents.\n\n`InputDeviceInfo` objects are returned by `MediaDevices.enumerateDevices()` if the returned device is an audio or video input device.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/InputDeviceInfo.",
    "properties": {
      "getcapabilities": "Returns a `MediaTrackCapabilities` object describing the primary audio or video track of a device's `MediaStream`."
    }
  },
  "LinearAccelerationSensor": {
    "docs": "The **`LinearAccelerationSensor`** interface of the Sensor APIs provides on each reading the acceleration applied to the device along all three axes, but without the contribution of gravity.\n\nTo use this sensor, the user must grant permission to the `'accelerometer'` device sensor through the Permissions API. In addition, this feature may be blocked by a Permissions Policy set on your server.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/LinearAccelerationSensor."
  },
  "Location": {
    "docs": "The **`Location`** interface represents the location (URL) of the object it is linked to. Changes done on it are reflected on the object it relates to. Both the `Document` and `Window` interface have such a linked `Location`, accessible via `Document.location` and `Window.location` respectively.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Location.",
    "properties": {
      "ancestororigins": "A static `DOMStringList` containing, in reverse order, the origins of all ancestor browsing contexts of the document associated with the given `Location` object.",
      "assign": "Loads the resource at the URL provided in parameter.",
      "hash": "A string containing a `'#'` followed by the fragment identifier of the URL.",
      "host": "A string containing the host, that is the hostname, a `':'`, and the port of the URL.",
      "hostname": "A string containing the domain of the URL.",
      "href": "A stringifier that returns a string containing the entire URL. If changed, the associated document navigates to the new page. It can be set from a different origin than the associated document.",
      "origin": "Returns a string containing the canonical form of the origin of the specific location.",
      "pathname": "A string containing an initial `'/'` followed by the path of the URL, not including the query string or fragment.",
      "port": "A string containing the port number of the URL.",
      "protocol": "A string containing the protocol scheme of the URL, including the final `':'`.",
      "reload": "Reloads the current URL, like the Refresh button.",
      "replace": "Replaces the current resource with the one at the provided URL (redirects to the provided URL). The difference from the `assign()` method and setting the `href` property is that after using `replace()` the current page will not be saved in session `History`, meaning the user won't be able to use the back button to navigate to it.",
      "search": "A string containing a `'?'` followed by the parameters or \"querystring\" of the URL. Modern browsers provide URLSearchParams and URL.searchParams to make it easy to parse out the parameters from the querystring.",
      "tostring": "Returns a string containing the whole URL. It is a synonym for `Location.href`, though it can't be used to modify the value."
    }
  },
  "LayoutShiftAttribution": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe `LayoutShiftAttribution` interface provides debugging information about elements which have shifted.\n\nInstances of `LayoutShiftAttribution` are returned in an array by calling `LayoutShift.sources`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/LayoutShiftAttribution.",
    "properties": {
      "currentrect": "Returns a `DOMRectReadOnly` object representing the position of the element after the shift.",
      "node": "Returns the element that has shifted (null if it has been removed).",
      "previousrect": "Returns a `DOMRectReadOnly` object representing the position of the element before the shift.",
      "tojson": "Returns a JSON representation of the `LayoutShiftAttribution` object."
    }
  },
  "LockManager": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`LockManager`** interface of the Web Locks API provides methods for requesting a new `Lock` object and querying for an existing `Lock` object. To get an instance of `LockManager`, call `navigator.locks`.\n\n**Note:** This feature is available in Web Workers\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/LockManager.",
    "properties": {
      "query": "Returns a `Promise` that resolves with an object that contains information about held and pending locks.",
      "request": "Requests a `Lock` object with parameters specifying its name and characteristics."
    }
  },
  "Lock": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`Lock`** interface of the Web Locks API provides the name and mode of a lock.\n  This may be a newly requested lock that is received in the callback to `LockManager.request()`, or a record of an active or queued lock returned by `LockManager.query()`.\n\n**Note:** This feature is available in Web Workers\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Lock.",
    "properties": {
      "mode": "Returns the access mode passed to `LockManager.request()` when the lock was requested.\n      The mode is either `\"exclusive\"` (the default) or `\"shared\"`.",
      "name": "Returns the name passed to `LockManager.request()` when the lock was requested."
    }
  },
  "KeyboardLayoutMap": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`KeyboardLayoutMap`** interface of the Keyboard API is a read-only object with functions for retrieving the string associated with specific physical keys.\n\nA `KeyboardLayoutMap` instance is a read-only `Map`-like object, in which each key is a string identifying the unique physical key on the keyboard (a \"key code\"), and the corresponding value is the associated key attribute value (which may be affected by the keyboard layout, and so on).\n\nA list of valid keys is found in the [UI Events KeyboardEvent code Values](https://www.w3.org/TR/uievents-code/#key-alphanumeric-writing-system) specification.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/KeyboardLayoutMap.",
    "properties": {
      "entries": "Returns a new Iterator object that contains the key/value pairs.",
      "foreach": "Executes a provided function once for each element of `KeyboardLayoutMap`.",
      "get": "Returns the element with the given key from the `KeyboardLayoutMap` object.",
      "has": "Returns a boolean indicating whether the `KeyboardLayoutMap` object has an element with the specified key.",
      "iterator": "Returns a new Iterator object that contains the key/value pairs.",
      "keys": "Returns a new Iterator object that contains the keys for each index in the `KeyboardLayoutMap` object.",
      "size": "Returns the number of elements in the `KeyboardLayoutMap` object.",
      "values": "Returns a new Iterator object that contains the values for each index in the `KeyboardLayoutMap` object."
    }
  },
  "MIDIInput": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`MIDIInput`** interface of the Web MIDI API receives messages from a MIDI input port.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MIDIInput."
  },
  "MIDIMessageEvent": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`MIDIMessageEvent`** interface of the Web MIDI API represents the event passed to the `midimessage` event of the `MIDIInput` interface. A `midimessage` event is fired every time a MIDI message is sent from a device represented by a `MIDIInput`, for example when a MIDI keyboard key is pressed, a knob is tweaked, or a slider is moved.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MIDIMessageEvent.",
    "properties": {
      "data": "A `Uint8Array` containing the data bytes of a single MIDI message. See the [MIDI specification](https://www.midi.org/specifications-old/item/table-1-summary-of-midi-message) for more information on its form."
    }
  },
  "MIDIConnectionEvent": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`MIDIConnectionEvent`** interface of the Web MIDI API is the event passed to the `statechange` event of the `MIDIAccess` interface and the `statechange` event of the `MIDIPort` interface. This occurs any time a new port becomes available, or when a previously available port becomes unavailable. For example, this event is fired whenever a MIDI device is either plugged in to or unplugged from a computer.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MIDIConnectionEvent.",
    "properties": {
      "port": "Returns a reference to a `MIDIPort` instance for a port that has been connected or disconnected."
    }
  },
  "MIDIOutput": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`MIDIOutput`** interface of the Web MIDI API provides methods to add messages to the queue of an output device, and to clear the queue of messages.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MIDIOutput.",
    "properties": {
      "clear": "Clears any pending send data from the queue.",
      "send": "Queues a message to be sent to the MIDI port."
    }
  },
  "LargestContentfulPaint": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe `LargestContentfulPaint` interface provides timing information about the largest image or text paint before user input on a web page.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/LargestContentfulPaint.",
    "properties": {
      "element": "The element that is the current largest contentful paint.",
      "id": "The id of the element. This property returns an empty string when there is no id.",
      "loadtime": "The time the element was loaded.",
      "rendertime": "The time the element was rendered to the screen. May not be available if the element is a cross-origin image loaded without the `Timing-Allow-Origin` header.",
      "size": "The intrinsic size of the element returned as the area (width * height).",
      "tojson": "Returns a JSON representation of the `LargestContentfulPaint` object.",
      "url": "If the element is an image, the request url of the image."
    }
  },
  "MIDIOutputMap": {
    "docs": "The **`MIDIOutputMap`** read-only interface of the Web MIDI API provides the set of MIDI output ports that are currently available.\n\nA `MIDIOutputMap` instance is a read-only `Map`-like object, in which each key is the ID string for MIDI output, and the associated value is the corresponding `MIDIOutput` object.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MIDIOutputMap."
  },
  "Magnetometer": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`Magnetometer`** interface of the Sensor APIs provides information about the magnetic field as detected by the device's primary magnetometer sensor.\n\nTo use this sensor, the user must grant permission to the `'magnetometer'` device sensor through the Permissions API. In addition, this feature may be blocked by a Permissions Policy set on your server.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Magnetometer.",
    "properties": {
      "x": "Returns a double containing the magnetic field around the device's x axis.",
      "y": "Returns a double containing the magnetic field around the device's y axis.",
      "z": "Returns a double containing the magnetic field around the device's z axis."
    }
  },
  "MathMLElement": {
    "docs": "The **`MathMLElement`** interface represents any MathML element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MathMLElement.",
    "properties": {
      "attributestylemap": "A `StylePropertyMap` representing the declarations of the element's `style` attribute.",
      "style": "A `CSSStyleDeclaration` representing the declarations of the element's `style` attribute."
    }
  },
  "MediaCapabilities": {
    "docs": "The **`MediaCapabilities`** interface of the Media Capabilities API provides information about the decoding abilities of the device, system and browser. The API can be used to query the browser about the decoding abilities of the device based on codecs, profile, resolution, and bitrates. The information can be used to serve optimal media streams to the user and determine if playback should be smooth and power efficient.\n\nThe information is accessed through the **`mediaCapabilities`** property of the `Navigator` interface.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MediaCapabilities.",
    "properties": {
      "decodinginfo": "When passed a valid media configuration, it returns a promise with information as to whether the media type is supported, and whether decoding such media would be smooth and power efficient.",
      "encodinginfo": "When passed a valid media configuration, it returns a promise with information as to whether the media type is supported, and whether encoding such media would be smooth and power efficient."
    }
  },
  "MediaDeviceInfo": {
    "docs": "The **`MediaDeviceInfo`** interface contains information that describes a single media input or output device.\n\nThe list of devices obtained by calling `navigator.mediaDevices.enumerateDevices()` is an array of `MediaDeviceInfo` objects, one per media device.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo.",
    "properties": {
      "deviceid": "Returns a string that is an identifier for the represented device that is persisted across sessions. It is un-guessable by other applications and unique to the origin of the calling application. It is reset when the user clears cookies (for Private Browsing, a different identifier is used that is not persisted across sessions).",
      "groupid": "Returns a string that is a group identifier. Two devices have the same group identifier if they belong to the same physical device â for example a monitor with both a built-in camera and a microphone.",
      "kind": "Returns an enumerated value that is either `\"videoinput\"`, `\"audioinput\"` or `\"audiooutput\"`.",
      "label": "Returns a string describing this device (for example \"External USB Webcam\").",
      "tojson": "Returns a JSON representation of the `MediaDeviceInfo` object."
    }
  },
  "MIDIPort": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`MIDIPort`** interface of the Web MIDI API represents a MIDI input or output port.\n\nA `MIDIPort` instance is created when a new MIDI device is connected. Therefore it has no constructor.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MIDIPort.",
    "properties": {
      "close": "Makes the MIDI device connected to this `MIDIPort` unavailable, changing the `state` from `\"open\"` to `\"closed\"`. This returns a `Promise` which resolves once the port has been closed.",
      "connection": "Returns a string containing the connection state of the port, one of:\n\n| --- | --- |\n| `\"open\"` | The device that this `MIDIPort` represents has been opened and is available. |\n| `\"closed\"` | The device that this `MIDIPort` represents has not been opened, or has been closed. |\n| `\"pending\"` | The device that this `MIDIPort` represents has been opened but has subsequently disconnected . |",
      "id": "Returns a string containing the unique ID of the port.",
      "manufacturer": "Returns a string containing the manufacturer of the port.",
      "name": "Returns a string containing the system name of the port.",
      "open": "Makes the MIDI device connected to this `MIDIPort` explicitly available, and returns a `Promise` which resolves once access to the port has been successful.",
      "state": "Returns a string containing the state of the port, one of:\n\n| --- | --- |\n| `\"disconnected\"` | The device that this `MIDIPort` represents is disconnected from the system. |\n| `\"connected\"` | The device that this `MIDIPort` represents is currently connected. |",
      "statechange_event": "Called when an existing port changes its state or connection.",
      "type": "Returns a string containing the type of the port, one of:\n\n| --- | --- |\n| `\"input\"` | The `MIDIPort` is an input port. |\n| `\"output\"` | The `MIDIPort` is an output port. |",
      "version": "Returns a string containing the version of the port."
    }
  },
  "MediaEncryptedEvent": {
    "docs": "The **`MediaEncryptedEvent`** interface of the Encrypted Media Extensions API contains the information associated with an `encrypted` event sent to a `HTMLMediaElement` when some initialization data is encountered in the media.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MediaEncryptedEvent.",
    "properties": {
      "initdata": "Returns an `ArrayBuffer` containing the initialization data found. If there is no initialization data associated with the format, it returns `null`.",
      "initdatatype": "Returns a case-sensitive string with the type of the format of the initialization data found."
    }
  },
  "MIDIInputMap": {
    "docs": "The **`MIDIInputMap`** read-only interface of the Web MIDI API provides the set of MIDI input ports that are currently available.\n\nA `MIDIInputMap` instance is a read-only `Map`-like object, in which each key is the ID string for MIDI input, and the associated value is the corresponding `MIDIInput` object.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MIDIInputMap."
  },
  "MIDIAccess": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`MIDIAccess`** interface of the Web MIDI API provides methods for listing MIDI input and output devices, and obtaining access to those devices.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MIDIAccess.",
    "properties": {
      "inputs": "Returns an instance of `MIDIInputMap` which provides access to any available MIDI input ports.",
      "outputs": "Returns an instance of `MIDIOutputMap` which provides access to any available MIDI output ports.",
      "statechange_event": "Called whenever a new MIDI port is added or an existing port changes state.",
      "sysexenabled": "A boolean attribute indicating whether system exclusive support is enabled on the current MIDIAccess instance."
    }
  },
  "MediaError": {
    "docs": "The **`MediaError`** interface represents an error which occurred while handling media in an HTML media element based on `HTMLMediaElement`, such as `<audio>` or `<video>`.\n\nA `MediaError` object describes the error in general terms using a numeric `code` categorizing the kind of error, and a `message`, which provides specific diagnostics about what went wrong.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MediaError.",
    "properties": {
      "code": "A number which represents the general type of error that occurred.",
      "message": "A human-readable string which provides specific diagnostic information to help the reader understand the error condition which occurred; specifically, it isn't a summary of what the error code means, but actual diagnostic information to help in understanding what exactly went wrong. This text and its format is not defined by the specification and will vary from one user agent to another. If no diagnostics are available, or no explanation can be provided, this value is an empty string (`\"\"`)."
    }
  },
  "MediaKeyStatusMap": {
    "docs": "The **`MediaKeyStatusMap`** interface of the Encrypted Media Extensions API is a read-only map of media key statuses by key IDs.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyStatusMap.",
    "properties": {
      "entries": "Returns a new `Iterator` object containing an array of `[key, value]` for each element in the status map, in insertion order.",
      "foreachcallback_argument": "Calls `callback` once for each key-value pair in the status map, in insertion order. If `argument` is present it will be passed to the callback.",
      "get": "Returns the value associated with the given key, or `undefined` if there is none.",
      "has": "Returns a boolean asserting whether a value has been associated with the given key.",
      "iterator": "Returns a new `Iterator` object containing an array of `[key, value]` for each element in the status map, in insertion order.",
      "keys": "Returns a new `Iterator` object containing keys for each element in the status map, in insertion order.",
      "size": "Returns the number of key/value pairs in the status map.",
      "values": "Returns a new `Iterator` object containing values for each element in the status map, in insertion order."
    }
  },
  "MediaKeySession": {
    "docs": "The **`MediaKeySession`** interface of the Encrypted Media Extensions API represents a context for message exchange with a content decryption module (CDM).\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession.",
    "properties": {
      "close": "Returns a `Promise` after notifying the current media session is no longer needed and that the CDM should release any resources associated with this object and close it.",
      "closed": "Returns a `Promise` signaling when a `MediaKeySession` closes. This promise can only be fulfilled and is never rejected. Closing a session means that licenses and keys associated with it are no longer valid for decrypting media data.",
      "expiration": "The time after which the keys in the current session can no longer be used to decrypt media data, or `NaN` if no such time exists. This value is determined by the CDM and measured in milliseconds since January 1, 1970, UTC. This value may change during a session lifetime, such as when an action triggers the start of a window.",
      "generaterequest": "Returns a `Promise` after generating a media request based on initialization data.",
      "keystatuses": "Contains a reference to a read-only `MediaKeyStatusMap` of the current session's keys and their statuses.",
      "load": "Returns a `Promise` that resolves to a boolean value after loading data for a specified session object.",
      "remove": "Returns a `Promise` after removing any session data associated with the current object.",
      "sessionid": "Contains a unique string generated by the CDM for the current media object and its associated keys or licenses.",
      "update": "Returns a `Promise` after loading messages and licenses to the CDM."
    }
  },
  "MediaKeys": {
    "docs": "The **`MediaKeys`** interface of Encrypted Media Extensions API represents a set of keys that an associated `HTMLMediaElement` can use for decryption of media data during playback.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MediaKeys.",
    "properties": {
      "createsession": "Returns a new `MediaKeySession` object, which represents a context for message exchange with a content decryption module (CDM).",
      "setservercertificate": "Returns a `Promise` to a server certificate to be used to encrypt messages to the license server."
    }
  },
  "MediaElementAudioSourceNode": {
    "docs": "The `MediaElementAudioSourceNode` interface represents an audio source consisting of an HTML `<audio>` or `<video>` element. It is an `AudioNode` that acts as an audio source.\n\nA `MediaElementAudioSourceNode` has no inputs and exactly one output, and is created using the `AudioContext.createMediaElementSource()` method. The number of channels in the output equals the number of channels of the audio referenced by the `HTMLMediaElement` used in the creation of the node, or is 1 if the `HTMLMediaElement` has no audio.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MediaElementAudioSourceNode."
  },
  "MediaList": {
    "docs": "The **`MediaList`** interface represents the media queries of a stylesheet, e.g. those set using a `<link>` element's `media` attribute.\n\n**Note:** `MediaList` is a live list; updating the list using properties or methods listed below will immediately update the behavior of the document.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MediaList.",
    "properties": {
      "appendmedium": "Adds a media query to the `MediaList`.",
      "deletemedium": "Removes a media query from the `MediaList`.",
      "item": "A getter that returns a string representing a media query as text, given the media query's index value inside the `MediaList`. This method can also be called using the bracket (`[]`) syntax.",
      "length": "Returns the number of media queries in the `MediaList`.",
      "mediatext": "A stringifier that returns a string representing the `MediaList` as text, and also allows you to set a new `MediaList`."
    }
  },
  "MediaMetadata": {
    "docs": "The **`MediaMetadata`** interface of the Media Session API allows a web page to provide rich media metadata for display in a platform UI.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MediaMetadata.",
    "properties": {
      "album": "Returns or sets the name of the album or collection containing the media to be played.",
      "artist": "Returns or sets the name of the artist, group, creator, etc. of the media to be played.",
      "artwork": "Returns or sets an array of images associated with playing media.",
      "title": "Returns or sets the title of the media to be played."
    }
  },
  "MediaKeyMessageEvent": {
    "docs": "The **`MediaKeyMessageEvent`** interface of the Encrypted Media Extensions API contains the content and related data when the content decryption module generates a message for the session.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyMessageEvent.",
    "properties": {
      "message": "Returns an `ArrayBuffer` with a message from the content decryption module. Messages vary by key system.",
      "messagetype": "Indicates the type of message. May be one of `license-request`, `license-renewal`, `license-release`, or `individualization-request`."
    }
  },
  "MediaQueryListEvent": {
    "docs": "The `MediaQueryListEvent` object stores information on the changes that have happened to a `MediaQueryList` object â instances are available as the event object on a function referenced by a `change` event.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryListEvent.",
    "properties": {
      "matches": "A boolean value that is `true` if the `document` currently matches the media query list, or `false` if not.",
      "media": "A string representing a serialized media query."
    }
  },
  "MediaRecorder": {
    "docs": "The **`MediaRecorder`** interface of the MediaStream Recording API provides functionality to easily record media. It is created using the `MediaRecorder()` constructor.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder.",
    "properties": {
      "audiobitratemode": "Returns the bitrate mode used to encode audio tracks.",
      "audiobitspersecond": "Returns the audio encoding bit rate in use. This may differ from the bit rate specified in the constructor (if it was provided).",
      "istypesupported": "A static method which returns a `true` or `false` value indicating if the given MIME media type is supported by the current user agent.",
      "mimetype": "Returns the MIME type that was selected as the recording container for the `MediaRecorder` object when it was created.",
      "pause": "Pauses the recording of media.",
      "requestdata": "Requests a `Blob` containing the saved data received thus far (or since the last time `requestData()` was called. After calling this method, recording continues, but in a new `Blob`.",
      "resume": "Resumes recording of media after having been paused.",
      "start": "Begins recording media; this method can optionally be passed a `timeslice` argument with a value in milliseconds. If this is specified, the media will be captured in separate chunks of that duration, rather than the default behavior of recording the media in a single large chunk.",
      "state": "Returns the current state of the `MediaRecorder` object (`inactive`, `recording`, or `paused`.)",
      "stop": "Stops recording, at which point a `dataavailable` event containing the final `Blob` of saved data is fired. No more recording occurs.",
      "stream": "Returns the stream that was passed into the constructor when the `MediaRecorder` was created.",
      "videobitspersecond": "Returns the video encoding bit rate in use. This may differ from the bit rate specified in the constructor (if it was provided)."
    }
  },
  "MediaDevices": {
    "docs": "The **`MediaDevices`** interface provides access to connected media input devices like cameras and microphones, as well as screen sharing. In essence, it lets you obtain access to any hardware source of media data.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices."
  },
  "MediaKeySystemAccess": {
    "docs": "The **`MediaKeySystemAccess`** interface of the Encrypted Media Extensions API provides access to a Key System for decryption and/or a content protection provider. You can request an instance of this object using the `Navigator.requestMediaKeySystemAccess()` method.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemAccess.",
    "properties": {
      "createmediakeys": "Returns a `Promise` that resolves to a new `MediaKeys` object.",
      "getconfiguration": "Returns an object with the supported combination of configuration options.",
      "keysystem": "Returns a string identifying the key system being used."
    }
  },
  "MediaSource": {
    "docs": "The **`MediaSource`** interface of the Media Source Extensions API represents a source of media data for an `HTMLMediaElement` object. A `MediaSource` object can be attached to a `HTMLMediaElement` to be played in the user agent.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MediaSource.",
    "properties": {
      "activesourcebuffers": "Returns a `SourceBufferList` object containing a subset of the `SourceBuffer` objects contained within `MediaSource.sourceBuffers` â the list of objects providing the selected video track, enabled audio tracks, and shown/hidden text tracks.",
      "addsourcebuffer": "Creates a new `SourceBuffer` of the given MIME type and adds it to the `MediaSource.sourceBuffers` list.",
      "canconstructindedicatedworker": "A boolean; returns `true` if `MediaSource` worker support is implemented, providing a low-latency feature detection mechanism.",
      "clearliveseekablerange": "Clears a seekable range previously set with a call to `setLiveSeekableRange()`.",
      "duration": "Gets and sets the duration of the current media being presented.",
      "endofstream": "Signals the end of the stream.",
      "handle": "Inside a dedicated worker, returns a `MediaSourceHandle` object, a proxy for the `MediaSource` that can be transferred from the worker back to the main thread and attached to a media element via its `HTMLMediaElement.srcObject` property.",
      "istypesupported": "Returns a boolean value indicating if the given MIME type is supported by the current user agent â this is, if it can successfully create `SourceBuffer` objects for that MIME type.",
      "readystate": "Returns an enum representing the state of the current `MediaSource`, whether it is not currently attached to a media element (`closed`), attached and ready to receive `SourceBuffer` objects (`open`), or attached but the stream has been ended via `MediaSource.endOfStream()` (`ended`.)",
      "removesourcebuffer": "Removes the given `SourceBuffer` from the `MediaSource.sourceBuffers` list.",
      "setliveseekablerange": "Sets the range that the user can seek to in the media element.",
      "sourcebuffers": "Returns a `SourceBufferList` object containing the list of `SourceBuffer` objects associated with this `MediaSource`."
    }
  },
  "MediaStream": {
    "docs": "The **`MediaStream`** interface of the Media Capture and Streams API represents a stream of media content. A stream consists of several **tracks**, such as video or audio tracks. Each track is specified as an instance of `MediaStreamTrack`.\n\nYou can obtain a `MediaStream` object either by using the constructor or by calling functions such as `MediaDevices.getUserMedia()`, `MediaDevices.getDisplayMedia()`, or `HTMLCanvasElement.captureStream()` and `HTMLMediaElement.captureStream()`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MediaStream.",
    "properties": {
      "active": "A Boolean value that returns `true` if the `MediaStream` is active, or `false` otherwise.",
      "addtrack": "Stores a copy of the `MediaStreamTrack` given as argument. If the track has already been added to the `MediaStream` object, nothing happens.",
      "clone": "Returns a clone of the `MediaStream` object. The clone will, however, have a unique value for `id`.",
      "getaudiotracks": "Returns a list of the `MediaStreamTrack` objects stored in the `MediaStream` object that have their `kind` attribute set to `audio`. The order is not defined, and may not only vary from one browser to another, but also from one call to another.",
      "gettrackbyid": "Returns the track whose ID corresponds to the one given in parameters, `trackid`. If no parameter is given, or if no track with that ID does exist, it returns `null`. If several tracks have the same ID, it returns the first one.",
      "gettracks": "Returns a list of all `MediaStreamTrack` objects stored in the `MediaStream` object, regardless of the value of the `kind` attribute. The order is not defined, and may not only vary from one browser to another, but also from one call to another.",
      "getvideotracks": "Returns a list of the `MediaStreamTrack` objects stored in the `MediaStream` object that have their `kind` attribute set to `\"video\"`. The order is not defined, and may not only vary from one browser to another, but also from one call to another.",
      "id": "A string containing a 36-character universally unique identifier (UUID) for the object.",
      "removetrack": "Removes the `MediaStreamTrack` given as argument. If the track is not part of the `MediaStream` object, nothing happens."
    }
  },
  "MediaSourceHandle": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`MediaSourceHandle`** interface of the Media Source Extensions API is a proxy for a `MediaSource` that can be transferred from a dedicated worker back to the main thread and attached to a media element via its `HTMLMediaElement.srcObject` property. `MediaSource` objects are not transferable because they are event targets, hence the need for `MediaSourceHandle`s.\n\nIt can be accessed via the `MediaSource.handle` property.\n\nEach `MediaSource` object created inside a dedicated worker has its own distinct `MediaSourceHandle`. The `MediaSource.handle` getter will always return the `MediaSourceHandle` instance specific to the associated dedicated worker `MediaSource` instance. If the handle has already been transferred to the main thread using `postMessage()`, the handle instance in the worker is technically detached and can't be transferred again.\n\n**Note:** This feature is available in Web Workers\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MediaSourceHandle."
  },
  "MediaStreamAudioDestinationNode": {
    "docs": "The `MediaStreamAudioDestinationNode` interface represents an audio destination consisting of a WebRTC `MediaStream` with a single `AudioMediaStreamTrack`, which can be used in a similar way to a `MediaStream` obtained from `navigator.mediaDevices.getUserMedia()`.\n\nIt is an `AudioNode` that acts as an audio destination, created using the `AudioContext.createMediaStreamDestination()` method.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioDestinationNode.",
    "properties": {
      "stream": "A `MediaStream` containing a single `MediaStreamTrack` whose `kind` is `audio` and with the same number of channels as the node. You can use this property to get a stream out of the audio graph and feed it into another construct, such as a Media Recorder."
    }
  },
  "MediaStreamAudioSourceNode": {
    "docs": "The **`MediaStreamAudioSourceNode`** interface is a type of `AudioNode` which operates as an audio source whose media is received from a `MediaStream` obtained using the WebRTC or Media Capture and Streams APIs.\n\nThis media could be from a microphone (through `getUserMedia()`) or from a remote peer on a WebRTC call (using the `RTCPeerConnection`'s audio tracks).\n\nA `MediaStreamAudioSourceNode` has no inputs and exactly one output, and is created using the `AudioContext.createMediaStreamSource()` method.\n\nThe `MediaStreamAudioSourceNode` takes the audio from the first `MediaStreamTrack` whose `kind` attribute's value is `audio`. See Track ordering for more information about the order of tracks.\n\nThe number of channels output by the node matches the number of tracks found in the selected audio track.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioSourceNode."
  },
  "MediaStreamEvent": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\n**Non-standard:** This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n\nThe **`MediaStreamEvent`** interface represents events that occurs in relation to a `MediaStream`. Two events of this type can be thrown: `addstream` and `removestream`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamEvent.",
    "properties": {
      "stream": "Contains the `MediaStream` containing the stream associated with the event."
    }
  },
  "MediaQueryList": {
    "docs": "A **`MediaQueryList`** object stores information on a media query applied to a document, with support for both immediate and event-driven matching against the state of the document.\n\nYou can create a `MediaQueryList` by calling `matchMedia()` on the `window` object. The resulting object handles sending notifications to listeners when the media query state changes (i.e. when the media query test starts or stops evaluating to `true`).\n\nThis is very useful for adaptive design, since this makes it possible to observe a document to detect when its media queries change, instead of polling the values periodically, and allows you to programmatically make changes to a document based on media query status.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList."
  },
  "MediaStreamTrackEvent": {
    "docs": "The **`MediaStreamTrackEvent`** interface of the Media Capture and Streams API represents events which indicate that a `MediaStream` has had tracks added to or removed from the stream through calls to Media Capture and Streams API methods. These events are sent to the stream when these changes occur.\n\nThe events based on this interface are `addtrack` and `removetrack`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrackEvent.",
    "properties": {
      "track": "Returns a `MediaStreamTrack` object representing the track associated with the event."
    }
  },
  "MediaStreamTrackGenerator": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\n**Non-standard:** This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n\nThe **`MediaStreamTrackGenerator`** interface of the `Insertable Streams for MediaStreamTrack API` creates a `WritableStream` that acts as a `MediaStreamTrack` source.\n  The object consumes a stream of media frames as input, which can be audio or video frames.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrackGenerator.",
    "properties": {
      "writable": "A `WritableStream`."
    }
  },
  "MediaStreamTrack": {
    "docs": "The **`MediaStreamTrack`** interface of the Media Capture and Streams API represents a single media track within a stream; typically, these are audio or video tracks, but other track types may exist as well.\n\nSome user agents subclass this interface to provide more precise information or functionality, such as `CanvasCaptureMediaStreamTrack`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack.",
    "properties": {
      "applyconstraints": "Lets the application specify the ideal and/or ranges of acceptable values for any number of the available constrainable properties of the `MediaStreamTrack`.",
      "clone": "Returns a duplicate of the `MediaStreamTrack`.",
      "contenthint": "A string that may be used by the web application to provide a hint as to what type of content the track contains to guide how it should be treated by API consumers.",
      "enabled": "A Boolean whose value of `true` if the track is enabled, that is allowed to render the media source stream; or `false` if it is disabled, that is not rendering the media source stream but silence and blackness. If the track has been disconnected, this value can be changed but has no more effect.\n\n**Note:** You can implement standard \"mute\" functionality by setting `enabled` to `false`. The `muted` property refers to a condition in which there's no media because of a technical issue.",
      "getcapabilities": "Returns the a list of constrainable properties available for the `MediaStreamTrack`.",
      "getconstraints": "Returns a `MediaTrackConstraints` object containing the currently set constraints for the track; the returned value matches the constraints last set using `applyConstraints()`.",
      "getsettings": "Returns a `MediaTrackSettings` object containing the current values of each of the `MediaStreamTrack`'s constrainable properties.",
      "id": "Returns a string containing a unique identifier (GUID) for the track; it is generated by the browser.",
      "kind": "Returns a string set to `\"audio\"` if the track is an audio track and to `\"video\"`, if it is a video track. It doesn't change if the track is disassociated from its source.",
      "label": "Returns a string containing a user agent-assigned label that identifies the track source, as in `\"internal microphone\"`. The string may be left empty and is empty as long as no source has been connected. When the track is disassociated from its source, the label is not changed.",
      "muted": "Returns a Boolean value indicating whether the track is unable to provide media data due to a technical issue.\n\n**Note:** You can implement standard \"mute\" functionality by setting `enabled` to `false`, and unmute the media by setting it back to `true` again.",
      "readystate": "Returns an enumerated string giving the status of the track. This will be one of the following values:\n\n- `\"live\"` which indicates that an input is connected and does its best-effort in providing real-time data. In that case, the output of data can be switched on or off using the `enabled` attribute.\n- `\"ended\"` which indicates that the input is not giving any more data and will never provide new data.",
      "stop": "Stops playing the source associated to the track, both the source and the track are disassociated. The track state is set to `ended`."
    }
  },
  "MediaRecorderErrorEvent": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\n**Non-standard:** This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n\nThe **`MediaRecorderErrorEvent`** interface represents errors returned by the MediaStream Recording API. It is an `Event` object that encapsulates a reference to a `DOMException` describing the error that occurred.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorderErrorEvent."
  },
  "MediaStreamTrackProcessor": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`MediaStreamTrackProcessor`** interface of the `Insertable Streams for MediaStreamTrack API` consumes a `MediaStreamTrack` object's source and generates a stream of media frames.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrackProcessor.",
    "properties": {
      "readable": "Returns a `ReadableStream`."
    }
  },
  "MediaSession": {
    "docs": "The **`MediaSession`** interface of the Media Session API allows a web page to provide custom behaviors for standard media playback interactions, and to report metadata that can be sent by the user agent to the device or operating system for presentation in standardized user interface elements.\n\nFor example, a smartphone might have a standard panel in its lock screen that provides controls for media playback and information display. A browser on the device can use `MediaSession` to make browser playback controllable from that standard/global user interface.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MediaSession."
  },
  "MediaTrackSettings": {
    "docs": "The **`MediaTrackSettings`** dictionary is used to return the current values configured for each of a `MediaStreamTrack`'s settings. These values will adhere as closely as possible to any constraints previously described using a `MediaTrackConstraints` object and set using `applyConstraints()`, and will adhere to the default constraints for any properties whose constraints haven't been changed, or whose customized constraints couldn't be matched.\n\nTo learn more about how constraints and settings work, see Capabilities, constraints, and settings.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings."
  },
  "MerchantValidationEvent": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\n**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`MerchantValidationEvent`** interface of the Payment Request API enables a merchant to verify themselves as allowed to use a particular payment handler.\n\nLearn more about merchant validation.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MerchantValidationEvent.",
    "properties": {
      "complete": "Pass the data retrieved from the URL specified by `validationURL` into `complete()` to complete the validation process for the `PaymentRequest`.",
      "methodname": "A string providing a unique payment method identifier for the payment handler that's requiring validation. This may be either one of the standard payment method identifier strings or a URL that both identifies and handles requests for the payment handler, such as `https://apple.com/apple-pay`.",
      "validationurl": "A string specifying a URL from which the site or app can fetch payment handler specific validation information. Once this data is retrieved, the data (or a promise resolving to the validation data) should be passed into `complete()` to validate that the payment request is coming from an authorized merchant."
    }
  },
  "MessageEvent": {
    "docs": "The **`MessageEvent`** interface represents a message received by a target object.\n\nThis is used to represent messages in:\n\n- Server-sent events (see `EventSource.message_event`).\n- Web sockets (see the `onmessage` property of the WebSocket interface).\n- Cross-document messaging (see `Window.postMessage()` and `Window.message_event`).\n- Channel messaging (see `MessagePort.postMessage()` and `MessagePort.message_event`).\n- Cross-worker/document messaging (see the above two entries, but also `Worker.postMessage()`, `Worker.message_event`, `ServiceWorkerGlobalScope.message_event`, etc.)\n- Broadcast channels (see `BroadcastChannel.postMessage()`) and `BroadcastChannel.message_event`).\n- WebRTC data channels (see `onmessage`).\n\nThe action triggered by this event is defined in a function set as the event handler for the relevant `message` event (e.g. using an `onmessage` handler as listed above).\n\n**Note:** This feature is available in Web Workers\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent.",
    "properties": {
      "data": "The data sent by the message emitter.",
      "lasteventid": "A string representing a unique ID for the event.",
      "origin": "A string representing the origin of the message emitter.",
      "ports": "An array of `MessagePort` objects representing the ports associated with the channel the message is being sent through (where appropriate, e.g. in channel messaging or when sending a message to a shared worker).",
      "source": "A `MessageEventSource` (which can be a WindowProxy, `MessagePort`, or `ServiceWorker` object) representing the message emitter."
    }
  },
  "MediaStreamTrackAudioSourceNode": {
    "docs": "The **`MediaStreamTrackAudioSourceNode`** interface is a type of `AudioNode` which represents a source of audio data taken from a specific `MediaStreamTrack` obtained through the WebRTC or Media Capture and Streams APIs.\n\nThe audio itself might be input from a microphone or other audio sampling device, or might be received through a `RTCPeerConnection`, among other possible options.\n\nA `MediaStreamTrackAudioSourceNode` has no inputs and exactly one output, and is created using the `AudioContext.createMediaStreamTrackSource()` method. This interface is similar to `MediaStreamAudioSourceNode`, except it lets you specifically state the track to use, rather than assuming the first audio track on a stream.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrackAudioSourceNode."
  },
  "Metadata": {
    "docs": "**Non-standard:** This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`Metadata`** interface contains information about a file system entry. This metadata includes the file's size and modification date and time.\n\n**Note:** This interface isn't available through the global scope; instead, you obtain a `Metadata` object describing a `FileSystemEntry` using the method `FileSystemEntry.getMetadata()`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Metadata."
  },
  "MediaTrackConstraints": {
    "docs": "The **`MediaTrackConstraints`** dictionary is used to describe a set of capabilities and the value or values each can take on. A constraints dictionary is passed into `applyConstraints()` to allow a script to establish a set of exact (required) values or ranges and/or preferred values or ranges of values for the track, and the most recently-requested set of custom constraints can be retrieved by calling `getConstraints()`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints."
  },
  "MessagePort": {
    "docs": "The **`MessagePort`** interface of the Channel Messaging API represents one of the two ports of a `MessageChannel`, allowing messages to be sent from one port and listening out for them arriving at the other.\n\n`MessagePort` is a transferable object.\n\n**Note:** This feature is available in Web Workers\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MessagePort."
  },
  "MessageChannel": {
    "docs": "The **`MessageChannel`** interface of the Channel Messaging API allows us to create a new message channel and send data through it via its two `MessagePort` properties.\n\n**Note:** This feature is available in Web Workers\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel.",
    "properties": {
      "port1": "Returns port1 of the channel.",
      "port2": "Returns port2 of the channel."
    }
  },
  "MimeType": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe **`MimeType`** interface provides contains information about a MIME type associated with a particular plugin. `Navigator.mimeTypes` returns an array of this object.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MimeType.",
    "properties": {
      "description": "Returns a description of the associated plugin or an empty string if there is none.",
      "enabledplugin": "Returns an instance of `Plugin` containing information about the plugin itself.",
      "suffixes": "A string containing valid file extensions for the data displayed by the plugin, or an empty string if an extension is not valid for the particular module. For example, a browser's content decryption module may appear in the plugin list but support more file extensions than can be anticipated. It might therefore return an empty string.",
      "type": "Returns the MIME type of the associated plugin."
    }
  },
  "MutationObserver": {
    "docs": "The `MutationObserver` interface provides the ability to watch for changes being made to the DOM tree. It is designed as a replacement for the older Mutation Events feature, which was part of the DOM3 Events specification.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver."
  },
  "MediaTrackSupportedConstraints": {
    "docs": "The **`MediaTrackSupportedConstraints`** dictionary establishes the list of constrainable properties recognized by the user agent or browser in its implementation of the `MediaStreamTrack` object. An object conforming to `MediaTrackSupportedConstraints` is returned by `MediaDevices.getSupportedConstraints()`.\n\nBecause of the way interface definitions in WebIDL work, if a constraint is requested but not supported, no error will occur. Instead, the specified constraints will be applied, with any unrecognized constraints stripped from the request. That can lead to confusing and hard to debug errors, so be sure to use `getSupportedConstraints()` to retrieve this information before attempting to establish constraints if you need to know the difference between silently ignoring a constraint and a constraint being accepted.\n\nAn actual constraint set is described using an object based on the `MediaTrackConstraints` dictionary.\n\nTo learn more about how constraints work, see Capabilities, constraints, and settings.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints."
  },
  "MutationRecord": {
    "docs": "The `MutationRecord` is a read-only interface that represents an individual DOM mutation observed by a `MutationObserver`. It is the object inside the array passed to the callback of a `MutationObserver`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord.",
    "properties": {
      "addednodes": "The nodes added by a mutation. Will be an empty `NodeList` if no nodes were added.",
      "attributename": "The name of the changed attribute as a string, or `null`.",
      "attributenamespace": "The namespace of the changed attribute as a string, or `null`.",
      "nextsibling": "The next sibling of the added or removed nodes, or `null`.",
      "oldvalue": "The value depends on the `MutationRecord.type`:\n\n- For `attributes`, it is the value of the changed attribute before the change.\n- For `characterData`, it is the data of the changed node before the change.\n- For `childList`, it is `null`.",
      "previoussibling": "The previous sibling of the added or removed nodes, or `null`.",
      "removednodes": "The nodes removed by a mutation. Will be an empty `NodeList` if no nodes were removed.",
      "target": "The node the mutation affected, depending on the `MutationRecord.type`.\n\n- For `attributes`, it is the element whose attribute changed.\n- For `characterData`, it is the `CharacterData` node.\n- For `childList`, it is the node whose children changed.",
      "type": "A string representing the type of mutation: `attributes` if the mutation was an attribute mutation, `characterData` if it was a mutation to a `CharacterData` node, and `childList` if it was a mutation to the tree of nodes."
    }
  },
  "MutationEvent": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe **`MutationEvent`** interface provides event properties that are specific to modifications to the Document Object Model (DOM) hierarchy and nodes.\n\n**Note:** Using mutation events is problematic:\n- Their design is [flawed](https://lists.w3.org/Archives/Public/public-webapps/2011JulSep/0779.html).\n- Adding DOM mutation listeners to a document [profoundly degrades the performance](https://groups.google.com/d/topic/mozilla.dev.platform/L0Lx11u5Bvs?pli=1) of further DOM modifications to that document (making them 1.5 - 7 times slower!). Moreover, removing the listeners does not reverse the damage.\n- They have poor cross-browser compatibility: Safari doesn't support `DOMAttrModified` (see [WebKit bug 8191](https://webkit.org/b/8191)) and Firefox doesn't support mutation name events (like `DOMElementNameChanged` and `DOMAttributeNameChanged`).\nThey have been deprecated in favor of mutation observers. **Consider using these instead.**\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MutationEvent.",
    "properties": {
      "attrchange": "Indicates what kind of change triggered the `DOMAttrModified` event. It can be `MODIFICATION` (`1`), `ADDITION` (`2`) or `REMOVAL` (`3`). It has no meaning for other events and is then set to `0`.",
      "attrname": "Indicates the name of the node affected by the `DOMAttrModified` event. It has no meaning for other events and is then set to the empty string (`\"\"`).",
      "initmutationevent": "Constructor method that returns a new `MutationEvent` configured with the parameters given.",
      "newvalue": "In `DOMAttrModified` events, contains the new value of the modified `Attr` node. In `DOMCharacterDataModified` events, contains the new value of the modified `CharacterData` node. In all other cases, returns the empty string (`\"\"`).",
      "prevvalue": "In `DOMAttrModified` events, contains the previous value of the modified `Attr` node. In `DOMCharacterDataModified` events, contains previous new value of the modified`CharacterData` node. In all other cases, returns the empty string (`\"\"`).",
      "relatednode": "Indicates the node related to the event, like the changed node inside the subtree for `DOMSubtreeModified`."
    }
  },
  "NDEFMessage": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`NDEFMessage`** interface of the Web NFC API represents the content of an NDEF message that has been read from or could be written to an NFC tag. An instance is acquired by calling the `NDEFMessage()` constructor or from the `NDEFReadingEvent.message` property, which is passed to the `reading` event.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/NDEFMessage.",
    "properties": {
      "records": "Returns the list of NDEF records contained in the message."
    }
  },
  "MouseEvent": {
    "docs": "The **`MouseEvent`** interface represents events that occur due to the user interacting with a pointing device (such as a mouse).\n  Common events using this interface include `click`, `dblclick`, `mouseup`, `mousedown`.\n\n`MouseEvent` derives from `UIEvent`, which in turn derives from `Event`.\n  Though the `MouseEvent.initMouseEvent()` method is kept for backward compatibility, creating of a `MouseEvent` object should be done using the `MouseEvent()` constructor.\n\nSeveral more specific events are based on `MouseEvent`, including `WheelEvent`, `DragEvent`, and `PointerEvent`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent.",
    "properties": {
      "altkey": "Returns `true` if the alt key was down when the mouse event was fired.",
      "button": "The button number that was pressed (if applicable) when the mouse event was fired.",
      "buttons": "The buttons being pressed (if any) when the mouse event was fired.",
      "clientx": "The X coordinate of the mouse pointer in viewport coordinates.",
      "clienty": "The Y coordinate of the mouse pointer in viewport coordinates.",
      "ctrlkey": "Returns `true` if the control key was down when the mouse event was fired.",
      "getmodifierstate": "Returns the current state of the specified modifier key. See `KeyboardEvent.getModifierState()` for details.",
      "initmouseevent": "Initializes the value of a `MouseEvent` created. If the event has already been dispatched, this method does nothing.",
      "layerx": "Returns the horizontal coordinate of the event relative to the current layer.",
      "layery": "Returns the vertical coordinate of the event relative to the current layer.",
      "metakey": "Returns `true` if the meta key was down when the mouse event was fired.",
      "movementx": "The X coordinate of the mouse pointer relative to the position of the last `mousemove` event.",
      "movementy": "The Y coordinate of the mouse pointer relative to the position of the last `mousemove` event.",
      "mozinputsource": "The type of device that generated the event (one of the `MOZ_SOURCE_*` constants).\n      This lets you, for example, determine whether a mouse event was generated by an actual mouse or by a touch event (which might affect the degree of accuracy with which you interpret the coordinates associated with the event).",
      "offsetx": "The X coordinate of the mouse pointer relative to the position of the padding edge of the target node.",
      "offsety": "The Y coordinate of the mouse pointer relative to the position of the padding edge of the target node.",
      "pagex": "The X coordinate of the mouse pointer relative to the whole document.",
      "pagey": "The Y coordinate of the mouse pointer relative to the whole document.",
      "relatedtarget": "The secondary target for the event, if there is one.",
      "screenx": "The X coordinate of the mouse pointer in screen coordinates.",
      "screeny": "The Y coordinate of the mouse pointer in screen coordinates.",
      "shiftkey": "Returns `true` if the shift key was down when the mouse event was fired.",
      "webkit_force_at_force_mouse_down": "Minimum force necessary for a force click.",
      "webkit_force_at_mouse_down": "Minimum force necessary for a normal click.",
      "webkitforce": "The amount of pressure applied when clicking.",
      "x": "Alias for `MouseEvent.clientX`.",
      "y": "Alias for `MouseEvent.clientY`."
    }
  },
  "NDEFReader": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`NDEFReader`** interface of the Web NFC API is used to read from and write data to compatible NFC devices, e.g. NFC tags supporting NDEF, when these devices are within the reader's magnetic induction field.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/NDEFReader.",
    "properties": {
      "scan": "Activates a reading device and returns a `Promise` that either resolves when an NFC tag read operation is scheduled or rejects if a hardware or permission error is encountered. This method triggers a permission prompt if the \"nfc\" permission has not been previously granted.",
      "write": "Attempts to write an NDEF message to a tag and returns a `Promise` that either resolves when a message has been written to the tag or rejects if a hardware or permission error is encountered. This method triggers a permission prompt if the \"nfc\" permission has not been previously granted."
    }
  },
  "NDEFReadingEvent": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`NDEFReadingEvent`** interface of the Web NFC API represents events dispatched on new NFC readings obtained by `NDEFReader`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/NDEFReadingEvent.",
    "properties": {
      "message": "Returns an `NDEFMessage` object containing the received message.",
      "ndefreadingevent": "Creates a new `NDEFReadingEvent`.",
      "serialnumber": "Returns the serial number of the device, which is used for anti-collision and identification, or an empty string if no serial number is available."
    }
  },
  "NDEFRecord": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`NDEFRecord`** interface of the Web NFC API provides data that can be read from, or written to, compatible NFC devices, e.g. NFC tags supporting NDEF.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/NDEFRecord.",
    "properties": {
      "data": "Returns a `DataView` containing the raw bytes of the record's payload.",
      "encoding": "Returns the encoding of a textual payload, or `null` otherwise.",
      "id": "Returns the record identifier, which is an absolute or relative URL used to identify the record.\n\n**Note:** The uniqueness of the identifier is enforced only by the generator of the record.",
      "lang": "Returns the language of a textual payload, or `null` if one was not supplied.",
      "mediatype": "Returns the MIME type of the record. This value will be `null` if `recordType` is not equal to `\"mime\"`.",
      "recordtype": "Returns the record type of the record. Records must have either a standardized well-known type name such as `\"empty\"`, `\"text\"`, `\"url\"`, `\"smart-poster\"`, `\"absolute-url\"`, `\"mime\"`, or `\"unknown\"` or else an external type name, which consists of a domain name and custom type name separated by a colon (\":\").",
      "torecords": "Converts `NDEFRecord.data` to a sequence of records. This allows parsing the payloads of record types which may contain nested records, such as smart poster and external type records."
    }
  },
  "NamedNodeMap": {
    "docs": "The **`NamedNodeMap`** interface represents a collection of `Attr` objects. Objects inside a `NamedNodeMap` are not in any particular order, unlike `NodeList`, although they may be accessed by an index as in an array.\n\nA `NamedNodeMap` object is live and will thus be auto-updated if changes are made to its contents internally or elsewhere.\n\n**Note:** Although called `NamedNodeMap`, this interface doesn't deal with `Node` objects but with `Attr` objects, which are a specialized class of `Node` objects.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap.",
    "properties": {
      "getnameditem": "Returns an `Attr`, corresponding to the given name.",
      "getnameditemns": "Returns an `Attr` identified by a namespace and related local name.",
      "item": "Returns the `Attr` at the given index, or `null` if the index is higher or equal to the number of nodes.",
      "length": "Returns the amount of objects in the map.",
      "removenameditem": "Removes the `Attr` identified by the given map.",
      "removenameditemns": "Removes the `Attr` identified by the given namespace and related local name.",
      "setnameditem": "Replaces, or adds, the `Attr` identified in the map by the given name.",
      "setnameditemns": "Replaces, or adds, the `Attr` identified in the map by the given namespace and related local name."
    }
  },
  "NavigateEvent": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`NavigateEvent`** interface of the Navigation API is the event object for the `navigate` event, which fires when [any type of navigation](https://github.com/WICG/navigation-api#appendix-types-of-navigations) is initiated (this includes usage of History API features like `History.go()`). `NavigateEvent` provides access to information about that navigation, and allows developers to intercept and control the navigation handling.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/NavigateEvent."
  },
  "NavigationCurrentEntryChangeEvent": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`NavigationCurrentEntryChangeEvent`** interface of the Navigation API is the event object for the `currententrychange` event, which fires when the `Navigation.currentEntry` has changed.\n\nThis event will fire for same-document navigations (e.g. `back()` or `traverseTo()`), replacements (i.e. a `navigate()` call with `history` set to `replace`), or other calls that change the entry's state (e.g. `updateCurrentEntry()`, or the History API's `History.replaceState()`).\n\nThis event fires after the navigation is committed, meaning that the visible URL has changed and the `NavigationHistoryEntry` update has occurred. It is useful for migrating from usage of older API features like the `hashchange` or `popstate` events.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/NavigationCurrentEntryChangeEvent."
  },
  "MimeTypeArray": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe **`MimeTypeArray`** interface returns an array of `MimeType` instances, each of which contains information about a supported browser plugins. This object is returned by `Navigator.mimeTypes`.\n\n**Note:** This interface was an [attempt to create an unmodifiable list](https://stackoverflow.com/questions/74630989/why-use-domstringlist-rather-than-an-array/74641156#74641156) and only continues to be supported to not break code that's already using it. Modern APIs use types that wrap around ECMAScript array types instead, so you can treat them like ECMAScript arrays, and at the same time impose additional semantics on their usage (such as making their items read-only).\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MimeTypeArray.",
    "properties": {
      "item": "Returns the `MimeType` object with the specified index.",
      "length": "The number of items in the array.",
      "nameditem": "Returns the `MimeType` object with the specified name."
    }
  },
  "MouseScrollEvent": {
    "docs": "**Non-standard:** This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n\n**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe **`MouseScrollEvent`** interface represents events that occur due to the user moving a mouse wheel or similar input device.\n\n**Warning:** Do not use this interface for wheel events.\nLike `MouseWheelEvent`, this interface is non-standard and deprecated. It was used in Gecko-based browsers only. Instead use the standard `WheelEvent`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/MouseScrollEvent."
  },
  "Navigation": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`Navigation`** interface of the Navigation API allows control over all navigation actions for the current `window` in one central place, including initiating navigations programmatically, examining navigation history entries, and managing navigations as they happen.\n\nIt is accessed via the `Window.navigation` property.\n\nThe Navigation API only exposes history entries created in the current browsing context that have the same origin as the current page (e.g. not navigations inside embedded `<iframe>`s, or cross-origin navigations), providing an accurate list of all previous history entries just for your app. This makes traversing the history a much less fragile proposition than with the older History API.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Navigation."
  },
  "NavigationTransition": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`NavigationTransition`** interface of the Navigation API represents an ongoing navigation, that is, a navigation that hasn't yet reached the `navigatesuccess` or `navigateerror` stage.\n\nIt is accessed via the `Navigation.transition` property.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/NavigationTransition."
  },
  "Navigator": {
    "docs": "The **`Navigator`** interface represents the state and the identity of the user agent. It allows scripts to query it and to register themselves to carry on some activities.\n\nA `Navigator` object can be retrieved using the read-only `window.navigator` property.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Navigator.",
    "properties": {
      "activevrdisplays": "Returns an array containing every `VRDisplay` object that is currently presenting (`VRDisplay.ispresenting` is `true`).",
      "appcodename": "Always returns `'Mozilla'`, in any browser.",
      "appname": "Always returns `'Netscape'`, in any browser.",
      "appversion": "Returns the version of the browser as a string. Do not rely on this property to return the correct value.",
      "bluetooth": "Returns a `Bluetooth` object for the current document, providing access to Web Bluetooth API functionality.",
      "buildid": "Returns the build identifier of the browser. In modern browsers this property now returns a fixed timestamp as a privacy measure, e.g. `20181001000000` in Firefox 64 onwards.",
      "canshare": "Returns `true` if a call to `Navigator.share()` would succeed.",
      "clearappbadge": "Clears a badge on the current app's icon and returns a `Promise` that resolves with `undefined`.",
      "clipboard": "Returns a `Clipboard` object that provides read and write access to the system clipboard.",
      "connection": "Returns a `NetworkInformation` object containing information about the network connection of a device.",
      "contacts": "Returns a `ContactsManager` interface which allows users to select entries from their contact list and share limited details of the selected entries with a website or application.",
      "cookieenabled": "Returns false if setting a cookie will be ignored and true otherwise.",
      "credentials": "Returns the `CredentialsContainer` interface which exposes methods to request credentials and notify the user agent when interesting events occur such as successful sign in or sign out.",
      "devicememory": "Returns the amount of device memory in gigabytes. This value is an approximation given by rounding to the nearest power of 2 and dividing that number by 1024.",
      "donottrack": "Reports the value of the user's do-not-track preference. When this value is \"1\", your website or application should not track the user.",
      "geolocation": "Returns a `Geolocation` object allowing accessing the location of the device.",
      "getautoplaypolicy": "Returns a value indicating whether the specified media element, audio context, or media feature \"type\" is allowed to autoplay.",
      "getbattery": "Returns a promise that resolves with a `BatteryManager` object that returns information about the battery charging status.",
      "getgamepads": "returns an array of `Gamepad` objects, one for each gamepad connected to the device.",
      "getinstalledrelatedapps": "Returns a promise that resolves with an array of objects representing any related native or Progressive Web Applications that the user has installed.",
      "getusermedia": "After having prompted the user for permission, returns the audio or video stream associated to a camera or microphone on the local computer.",
      "getvrdisplays": "Returns a promise that resolves to an array of `VRDisplay` objects representing any available VR devices connected to the computer.",
      "globalprivacycontrol": "Returns a boolean indicating a user's consent to their information being shared or sold.",
      "gpu": "Returns the `GPU` object for the current browsing context. The entry point for the WebGPU API.",
      "hardwareconcurrency": "Returns the number of logical processor cores available.",
      "hid": "Returns an `HID` object providing methods for connecting to HID devices, listing attached HID devices, and event handlers for connected HID devices.",
      "ink": "Returns an `Ink` object for the current document, providing access to Ink API functionality.",
      "javaenabled": "Always returns false.",
      "keyboard": "Returns a `Keyboard` object which provides access to functions that retrieve keyboard layout maps and toggle capturing of key presses from the physical keyboard.",
      "language": "Returns a string representing the preferred language of the user, usually the language of the browser UI. The `null` value is returned when this is unknown.",
      "languages": "Returns an array of strings representing the languages known to the user, by order of preference.",
      "locks": "Returns a `LockManager` object that provides methods for requesting a new `Lock` object and querying for an existing `Lock` object.",
      "maxtouchpoints": "Returns the maximum number of simultaneous touch contact points are supported by the current device.",
      "mediacapabilities": "Returns a `MediaCapabilities` object that can expose information about the decoding and encoding capabilities for a given format and output capabilities.",
      "mediadevices": "Returns a reference to a `MediaDevices` object which can then be used to get information about available media devices (`MediaDevices.enumerateDevices()`), find out what constrainable properties are supported for media on the user's computer and user agent (`MediaDevices.getSupportedConstraints()`), and to request access to media using `MediaDevices.getUserMedia()`.",
      "mediasession": "Returns `MediaSession` object which can be used to provide metadata that can be used by the browser to present information about the currently-playing media to the user, such as in a global media controls UI.",
      "mimetypes": "Returns an `MimeTypeArray` listing the MIME types supported by the browser.",
      "online": "Returns a boolean value indicating whether the browser is working online.",
      "oscpu": "Returns a string that represents the current operating system.",
      "pdfviewerenabled": "Returns `true` if the browser can display PDF files inline when navigating to them, and `false` otherwise.",
      "permissions": "Returns a `Permissions` object that can be used to query and update permission status of APIs covered by the Permissions API.",
      "platform": "Returns a string representing the platform of the browser. Do not rely on this function to return a significant value.",
      "plugins": "Returns a `PluginArray` listing the plugins installed in the browser.",
      "presentation": "Returns a reference to the `Presentation` API.",
      "product": "Always returns `'Gecko'`, in any browser.",
      "productsub": "Returns either the string `'20030107'`, or `'\"20100101'`.",
      "registerprotocolhandler": "Allows websites to register themselves as a possible handler for a given protocol.",
      "requestmediakeysystemaccess": "Returns a `Promise` for a MediaKeySystemAccess object.",
      "requestmidiaccess": "Returns a `Promise` representing a request for access to MIDI devices on the user's system.",
      "scheduling": "Returns a `Scheduling` object for the current document.",
      "sendbeacon": "Used to asynchronously transfer a small amount of data using HTTP from the User Agent to a web server.",
      "serial": "Returns a `Serial` object, which represents the entry point into the `Web Serial API` to enable the control of serial ports.",
      "serviceworker": "Returns a `ServiceWorkerContainer` object, which provides access to registration, removal, upgrade, and communication with the `ServiceWorker` objects for the [associated document](https://html.spec.whatwg.org/multipage/browsers.html#concept-document-window).",
      "setappbadge": "Sets a badge on the icon associated with this app and returns a `Promise` that resolves with `undefined`.",
      "share": "Invokes the native sharing mechanism of the current platform.",
      "standalone": "Returns a boolean indicating whether the browser is running in standalone mode. Available on Apple's iOS Safari only.",
      "storage": "Returns the singleton `StorageManager` object used for managing persistence permissions and estimating available storage on a site-by-site/app-by-app basis.",
      "taintenabled": "Returns `false`. JavaScript taint/untaint functions removed in JavaScript 1.2.",
      "unregisterprotocolhandler": "Unregister a website that is a handler for a given protocol.",
      "usb": "Returns a `USB` object for the current document, providing access to WebUSB API functionality.",
      "useractivation": "Returns a `UserActivation` object containing information about the current window's user activation state.",
      "useragent": "Returns the user agent string for the current browser.",
      "useragentdata": "Returns a `NavigatorUAData` object, which gives access to information about the browser and operating system of the user.",
      "vendor": "Returns either the empty string, `'Apple Computer Inc.'`, or `'Google Inc.'`.",
      "vendorsub": "Always returns the empty string.",
      "vibrate": "Causes vibration on devices with support for it. Does nothing if vibration support isn't available.",
      "virtualkeyboard": "Returns a reference to the `VirtualKeyboard` API, to take control of the on-screen virtual keyboard.",
      "wakelock": "Returns a `WakeLock` interface you can use to request screen wake locks and prevent screen from dimming, turning off, or showing a screen saver.",
      "webdriver": "Indicates whether the user agent is controlled by automation.",
      "windowcontrolsoverlay": "Returns the `WindowControlsOverlay` interface which exposes information about the geometry of the title bar in desktop Progressive Web Apps, and an event to know whenever it changes.",
      "xr": "Returns `XRSystem` object, which represents the entry point into the WebXR API."
    }
  },
  "NetworkInformation": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`NetworkInformation`** interface of the Network Information API provides information about the connection a device is using to communicate with the network and provides a means for scripts to be notified if the connection type changes.\n  The `NetworkInformation` interface cannot be instantiated. It is instead accessed through the `connection` property of the `Navigator` interface.\n\n**Note:** This feature is available in Web Workers\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation.",
    "properties": {
      "downlink": "Returns the effective bandwidth estimate in megabits per second, rounded to the nearest multiple of 25 kilobits per seconds.",
      "downlinkmax": "Returns the maximum downlink speed, in megabits per second (Mbps), for the underlying connection technology.",
      "effectivetype": "Returns the effective type of the connection meaning one of 'slow-2g', '2g', '3g', or '4g'. This value is determined using a combination of recently observed round-trip time and downlink values.",
      "rtt": "Returns the estimated effective round-trip time of the current connection, rounded to the nearest multiple of 25 milliseconds.",
      "savedata": "Returns `true` if the user has set a reduced data usage option on the user agent.",
      "type": "Returns the type of connection a device is using to communicate with the network. It will be one of the following values:\n\n- `bluetooth`\n- `cellular`\n- `ethernet`\n- `none`\n- `wifi`\n- `wimax`\n- `other`\n- `unknown`"
    }
  },
  "NavigationDestination": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`NavigationDestination`** interface of the Navigation API represents the destination being navigated to in the current navigation.\n\nIt is accessed via the `NavigateEvent.destination` property.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/NavigationDestination."
  },
  "Node": {
    "docs": "The DOM **`Node`** interface is an abstract base\n  class upon which many other DOM API objects are based, thus letting those object types\n  to be used similarly and often interchangeably. As an abstract class, there is\n  no such thing as a plain `Node` object. All objects that implement\n  `Node` functionality are based on one of its subclasses. Most notable are\n  `Document`, `Element`, and `DocumentFragment`.\n\nIn addition, every kind of DOM node is represented by an interface based on\n  `Node`. These include `Attr`, `CharacterData`\n  (which `Text`, `Comment`, `CDATASection` and\n  `ProcessingInstruction` are all based on), and `DocumentType`.\n\nIn some cases, a particular feature of the base `Node` interface may not\n  apply to one of its child interfaces; in that case, the inheriting node may\n  return `null` or throw an exception, depending on circumstances. For example,\n  attempting to add children to a node type that cannot have children will throw an\n  exception.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Node.",
    "properties": {
      "appendchild": "Adds the specified `childNode` argument as the last child to the current node.\n      If the argument referenced an existing node on the DOM tree, the node will be detached\n      from its current position and attached at the new position.",
      "baseuri": "Returns a string representing the base URL of the document\n      containing the `Node`.",
      "childnodes": "Returns a live `NodeList` containing all the children of this node\n      (including elements, text and comments). `NodeList` being live means that\n      if the children of the `Node` change, the `NodeList` object is\n      automatically updated.",
      "clonenode": "Clone a `Node`, and optionally, all of its contents. By default, it\n      clones the content of the node.",
      "comparedocumentposition": "Compares the position of the current node against another node in any other document.",
      "contains": "Returns `true` or `false` value indicating whether or not a node is a\n      descendant of the calling node.",
      "firstchild": "Returns a `Node` representing the first direct child node of the node,\n      or `null` if the node has no child.",
      "getrootnode": "Returns the context object's root which optionally includes the shadow root if it is available.",
      "haschildnodes": "Returns a boolean value indicating whether or not the element has any child nodes.",
      "insertbefore": "Inserts a `Node` before the reference node as a child of a specified\n      parent node.",
      "isconnected": "A boolean indicating whether or not the Node is connected (directly or indirectly)\n      to the context object, e.g. the `Document` object in the case of the\n      normal DOM, or the `ShadowRoot` in the case of a shadow DOM.",
      "isdefaultnamespace": "Accepts a namespace URI as an argument and returns a boolean value with a\n      value of `true` if the namespace is the default namespace on the given node\n      or `false` if not.",
      "isequalnode": "Returns a boolean value which indicates whether or not two nodes are of the\n      same type and all their defining data points match.",
      "issamenode": "Returns a boolean value indicating whether or not the two nodes are\n      the same (that is, they reference the same object).",
      "lastchild": "Returns a `Node` representing the last direct child node of the node,\n      or `null` if the node has no child.",
      "lookupnamespaceuri": "Accepts a prefix and returns the namespace URI associated with it on the given node\n      if found (and `null` if not). Supplying `null` for the prefix\n      will return the default namespace.",
      "lookupprefix": "Returns a string containing the prefix for a given namespace URI,\n      if present, and `null` if not. When multiple prefixes are possible, the\n      result is implementation-dependent.",
      "nextsibling": "Returns a `Node` representing the next node in the tree, or\n      `null` if there isn't such node.",
      "nodename": "Returns a string containing the name of the `Node`. The\n      structure of the name will differ with the node type. E.g. An\n      `HTMLElement` will contain the name of the corresponding tag, like\n      `'audio'` for an `HTMLAudioElement`, a `Text`\n      node will have the `'#text'` string, or a `Document` node will\n      have the `'#document'` string.",
      "nodetype": "Returns an `unsigned short` representing the type of the node. Possible\n      values are:",
      "nodevalue": "Returns / Sets the value of the current node.",
      "normalize": "Clean up all the text nodes under this element (merge adjacent, remove empty).",
      "ownerdocument": "Returns the `Document` that this node belongs to. If the node is itself\n      a document, returns `null`.",
      "parentelement": "Returns an `Element` that is the parent of this node. If the node has\n      no parent, or if that parent is not an `Element`, this property returns\n      `null`.",
      "parentnode": "Returns a `Node` that is the parent of this node. If there is no such\n      node, like if this node is the top of the tree or if doesn't participate in a tree,\n      this property returns `null`.",
      "previoussibling": "Returns a `Node` representing the previous node in the tree, or\n      `null` if there isn't such node.",
      "removechild": "Removes a child node from the current element, which must be a child of the current\n      node.",
      "replacechild": "Replaces one child `Node` of the current one with the second one given\n      in parameter.",
      "textcontent": "Returns / Sets the textual content of an element and all its descendants."
    }
  },
  "NodeList": {
    "docs": "**`NodeList`** objects are collections of nodes, usually returned by properties such as `Node.childNodes` and methods such as `document.querySelectorAll()`.\n\n**Note:** Although `NodeList` is not an `Array`, it is possible to iterate over it with `forEach()`. It can also be converted to a real `Array` using `Array.from()`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/NodeList.",
    "properties": {
      "entries": "Returns an `iterator`, allowing code to go through all key/value pairs contained in the collection. (In this case, the keys are integers starting from `0` and the values are nodes.)",
      "foreach": "Executes a provided function once per `NodeList` element, passing the element as an argument to the function.",
      "item": "Returns an item in the list by its index, or `null` if the index is out-of-bounds.\n\nAn alternative to accessing `nodeList[i]` (which instead returns `undefined` when `i` is out-of-bounds). This is mostly useful for non-JavaScript DOM implementations.",
      "keys": "Returns an `iterator`, allowing code to go through all the keys of the key/value pairs contained in the collection. (In this case, the keys are integers starting from `0`.)",
      "length": "The number of nodes in the `NodeList`.",
      "values": "Returns an `iterator` allowing code to go through all values (nodes) of the key/value pairs contained in the collection."
    }
  },
  "NavigationHistoryEntry": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`NavigationHistoryEntry`** interface of the Navigation API represents a single navigation history entry.\n\nThese objects are commonly accessed via the `Navigation.currentEntry` property and `Navigation.entries()` method.\n\nThe Navigation API only exposes history entries created in the current browsing context that have the same origin as the current page (e.g. not navigations inside embedded `<iframe>`s, or cross-origin navigations), providing an accurate list of all previous history entries just for your app. This makes traversing the history a much less fragile proposition than with the older History API.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/NavigationHistoryEntry."
  },
  "NavigatorUAData": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\n**Note:** This feature is available in Web Workers\n\nThe **`NavigatorUAData`** interface of the `User-Agent Client Hints API` returns information about the browser and operating system of a user.\n\nAn instance of this object is returned by calling `Navigator.userAgentData`. Therefore, this interface has no constructor.\n\n**Note:** The terms high entropy and low entropy refer to the amount of information these values reveal about the browser. The values returned as properties are deemed low entropy, and unlikely to identify a user. The values returned by `NavigatorUAData.getHighEntropyValues()` could potentially reveal more information. These values are therefore retrieved via a `Promise`, allowing time for the browser to request user permission, or make other checks.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/NavigatorUAData.",
    "properties": {
      "brands": "Returns an array of brand information containing the browser name and version.",
      "gethighentropyvalues": "Returns a `Promise` that resolves with a dictionary object containing the high entropy values the user-agent returns.",
      "mobile": "Returns `true` if the user-agent is running on a mobile device.",
      "platform": "Returns the platform brand the user-agent is running on.",
      "tojson": "A serializer that returns a JSON representation of the low entropy properties of the `NavigatorUAData` object."
    }
  },
  "Notification": {
    "docs": "**Note:** This feature is available in Web Workers\n\n**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`Notification`** interface of the Notifications API is used to configure and display desktop notifications to the user.\n\nThese notifications' appearance and specific functionality vary across platforms but generally they provide a way to asynchronously provide information to the user.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Notification.",
    "properties": {
      "actions": "The actions array of the notification as specified in the constructor's `options` parameter.",
      "badge": "A string containing the URL of an image to represent the notification when there is not enough space to display the notification itself such as for example, the Android Notification Bar. On Android devices, the badge should accommodate devices up to 4x resolution, about 96 by 96 px, and the image will be automatically masked.",
      "body": "The body string of the notification as specified in the constructor's `options` parameter.",
      "close": "Programmatically closes a notification instance.",
      "data": "Returns a structured clone of the notification's data.",
      "dir": "The text direction of the notification as specified in the constructor's `options` parameter.",
      "icon": "The URL of the image used as an icon of the notification as specified in the constructor's `options` parameter.",
      "image": "The URL of an image to be displayed as part of the notification, as specified in the constructor's `options` parameter.",
      "lang": "The language code of the notification as specified in the constructor's `options` parameter.",
      "maxactions": "The maximum number of actions supported by the device and the User Agent.",
      "permission": "A string representing the current permission to display notifications. Possible values are:\n\n- `denied` â The user refuses to have notifications displayed.\n- `granted` â The user accepts having notifications displayed.\n- `default` â The user choice is unknown and therefore the browser will act as if the value were denied.",
      "renotify": "Specifies whether the user should be notified after a new notification replaces an old one.",
      "requestpermission": "Requests permission from the user to display notifications.",
      "requireinteraction": "A boolean value indicating that a notification should remain active until the user clicks or dismisses it, rather than closing automatically.",
      "silent": "Specifies whether the notification should be silent â i.e., no sounds or vibrations should be issued, regardless of the device settings.",
      "tag": "The ID of the notification (if any) as specified in the constructor's `options` parameter.",
      "timestamp": "Specifies the time at which a notification is created or applicable (past, present, or future).",
      "title": "The title of the notification as specified in the first parameter of the constructor.",
      "vibrate": "Specifies a vibration pattern for devices with vibration hardware to emit."
    }
  },
  "NotifyAudioAvailableEvent": {
    "docs": "**Non-standard:** This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n\n**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe non-standard, obsolete, **`NotifyAudioAvailableEvent`** interface defines the event sent to audio elements when the audio buffer is full.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/NotifyAudioAvailableEvent."
  },
  "OES_draw_buffers_indexed": {
    "docs": "The **`OES_draw_buffers_indexed`** extension is part of the WebGL API and enables the use of different blend options when writing to multiple color buffers simultaneously.\n\nWebGL extensions are available using the `WebGLRenderingContext.getExtension()` method. For more information, see also Using Extensions in the WebGL tutorial.\n\n**Note:** This extension is only available to WebGL2 contexts.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/OES_draw_buffers_indexed.",
    "properties": {
      "blendequationioes": "Sets both the RGB and alpha blend equations for a particular draw buffer.",
      "blendequationseparateioes": "Sets the RGB and alpha blend equations separately for a particular draw buffer.",
      "blendfuncioes": "Defines which function is used when blending pixels for a particular draw buffer.",
      "blendfuncseparateioes": "Defines which function is used when blending pixels for RGB and alpha components separately for a particular draw buffer.",
      "colormaskioes": "Sets which color components to enable or to disable when drawing or rendering for a particular draw buffer.",
      "disableioes": "Disables blending for a particular draw buffer.",
      "enableioes": "Enables blending for a particular draw buffer."
    }
  },
  "OTPCredential": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`OTPCredential`** interface of the WebOTP API is returned when a WebOTP `navigator.credentials.get()` call (i.e. invoked with an `otp` option) fulfills. It includes a `code` property that contains the retrieved one-time password (OTP).\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/OTPCredential.",
    "properties": {
      "code": "The OTP.",
      "id": "Inherited from `Credential`. The ID of the credential type.",
      "type": "Inherited from `Credential`. Always set to `otp` for `OTPCredential` instances."
    }
  },
  "NotificationEvent": {
    "docs": "The **`NotificationEvent`** interface of the Notifications API represents a notification event dispatched on the `ServiceWorkerGlobalScope` of a `ServiceWorker`.\n\nThis interface inherits from the `ExtendableEvent` interface.\n\n> \n  **Note**: Only persistent notification events, fired at the `ServiceWorkerGlobalScope` object, implement the `NotificationEvent` interface. Non-persistent notification events, fired at the `Notification` object, implement the `Event` interface.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/NotificationEvent.",
    "properties": {
      "action": "Returns the string ID of the notification button the user clicked. This value returns an empty string if the user clicked the notification somewhere other than an action button, or the notification does not have a button.",
      "notification": "Returns a `Notification` object representing the notification that was clicked to fire the event."
    }
  },
  "NavigationPreloadManager": {
    "docs": "The **`NavigationPreloadManager`** interface of the Service Worker API provides methods for managing the preloading of resources in parallel with service worker bootup.\n\nIf supported, an object of this type is returned by `ServiceWorkerRegistration.navigationPreload`.\n  The result of a preload fetch request is waited on using the promise returned by `FetchEvent.preloadResponse`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/NavigationPreloadManager.",
    "properties": {
      "disable": "Disables navigation preloading, returning a `Promise` that resolves with `undefined`.",
      "enable": "Enables navigation preloading, returning a `Promise` that resolves with `undefined`.",
      "getstate": "Returns a `Promise` that resolves to an object with properties that indicate whether preloading is enabled, and what value will be sent in the `Service-Worker-Navigation-Preload` HTTP header in preloading requests.",
      "setheadervalue": "Sets the value of the `Service-Worker-Navigation-Preload` HTTP header sent in preloading requests and returns an empty `Promise`."
    }
  },
  "OffscreenCanvas": {
    "docs": "When using the `<canvas>` element or the Canvas API, rendering, animation, and user interaction usually happen on the main execution thread of a web application.\n  The computation relating to canvas animations and rendering can have a significant impact on application performance.\n\nThe **`OffscreenCanvas`** interface provides a canvas that can be rendered off screen, decoupling the DOM and the Canvas API so that the `<canvas>` element is no longer entirely dependent on the DOM.\n  Rendering operations can also be run inside a worker context, allowing you to run some tasks in a separate thread and avoid heavy work on the main thread.\n\n`OffscreenCanvas` is a transferable object.\n\n**Note:** This feature is available in Web Workers\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas.",
    "properties": {
      "converttoblob": "Creates a `Blob` object representing the image contained in the canvas.",
      "getcontext": "Returns a rendering context for the offscreen canvas.",
      "height": "The height of the offscreen canvas.",
      "transfertoimagebitmap": "Creates an `ImageBitmap` object from the most recently rendered image of the `OffscreenCanvas`. See the `API description` for important notes on managing this `ImageBitmap`.",
      "width": "The width of the offscreen canvas."
    }
  },
  "OrientationSensor": {
    "docs": "The **`OrientationSensor`** interface of the Sensor APIs is the base class for orientation sensors. This interface cannot be used directly. Instead it provides properties and methods accessed by interfaces that inherit from it.\n\nThis feature may be blocked by a Permissions Policy set on your server.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/OrientationSensor.",
    "properties": {
      "populatematrix": "Populates the given object with the rotation matrix based on the latest sensor reading.",
      "quaternion": "Returns a four element `Array` whose elements contain the components of the unit quaternion representing the device's orientation."
    }
  },
  "OscillatorNode": {
    "docs": "The **`OscillatorNode`** interface represents a periodic waveform, such as a sine wave. It is an `AudioScheduledSourceNode` audio-processing module that causes a specified frequency of a given wave to be createdâin effect, a constant tone.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode.",
    "properties": {
      "detune": "An a-rate `AudioParam` representing detuning of oscillation in cents (though the `AudioParam` returned is read-only, the value it represents is not). The default value is 0.",
      "frequency": "An a-rate `AudioParam` representing the frequency of oscillation in hertz (though the `AudioParam` returned is read-only, the value it represents is not). The default value is 440 Hz (a standard middle-A note).",
      "setperiodicwave": "Sets a `PeriodicWave` which describes a periodic waveform to be used instead of one of the standard waveforms; calling this sets the `type` to `custom`.",
      "type": "A string which specifies the shape of waveform to play; this can be one of a number of standard values, or `custom` to use a `PeriodicWave` to describe a custom waveform. Different waves will produce different tones. Standard values are `\"sine\"`, `\"square\"`, `\"sawtooth\"`, `\"triangle\"` and `\"custom\"`. The default is `\"sine\"`."
    }
  },
  "NodeIterator": {
    "docs": "The **`NodeIterator`** interface represents an iterator to traverse nodes of a DOM subtree in document order.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator.",
    "properties": {
      "detach": "This is a legacy method, and no longer has any effect. Previously it served to mark a\n      `NodeIterator` as disposed, so it could be reclaimed by garbage collection.",
      "filter": "Returns a `NodeFilter` used to select the relevant nodes.",
      "nextnode": "Returns the next `Node` in the document, or `null` if there are none.",
      "pointerbeforereferencenode": "Returns a boolean indicating whether or not the `NodeIterator` is anchored before the `NodeIterator.referenceNode`. If `false`, it indicates that the iterator is anchored after the reference node.",
      "previousnode": "Returns the previous `Node` in the document, or `null` if there are none.",
      "root": "Returns a `Node` representing the root node, as specified when the\n      `NodeIterator` was created.",
      "whattoshow": "Returns an `unsigned long` bitmask that describes the types of `Node`\n      to be matched. Non-matching nodes are skipped, but relevant child nodes may be included.\n\nThe possible bitmask values are constants from the `NodeFilter` interface:"
    }
  },
  "OffscreenCanvasRenderingContext2D": {
    "docs": "The **`OffscreenCanvasRenderingContext2D`** interface is a `CanvasRenderingContext2D` rendering context for drawing to the bitmap of an `OffscreenCanvas` object.\n  It is similar to the `CanvasRenderingContext2D` object, with the following differences:\n\n- there is no support for user-interface features (`drawFocusIfNeeded`, and `scrollPathIntoView`)\n- its `canvas` attribute refers to an `OffscreenCanvas` object rather than a `<canvas>` element\n- it has a `commit()` method for pushing rendered images to the context's `OffscreenCanvas` object's placeholder `<canvas>` element\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D."
  },
  "PageTransitionEvent": {
    "docs": "The **`PageTransitionEvent`** event object is available inside handler functions for the `pageshow` and `pagehide` events, fired when a document is being loaded or unloaded.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/PageTransitionEvent.",
    "properties": {
      "persisted": "Indicates if the document is loading from a cache."
    }
  },
  "PasswordCredential": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\n**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe interface of the Credential Management API provides information about a username/password pair. In supporting browsers an instance of this class may be passed in the `credential` member of the `init` object for global `fetch()`.\n\n**Note:** This interface is restricted to top-level contexts and cannot be used from an `<iframe>`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/PasswordCredential.",
    "properties": {
      "iconurl": "A string containing a URL pointing to an image for an icon. This image is intended for display in a credential chooser. The URL must be accessible without authentication.",
      "name": "A human-readable string that provides public name for display in a credential chooser.",
      "password": "A string containing the password of the credential."
    }
  },
  "OfflineAudioCompletionEvent": {
    "docs": "The Web Audio API `OfflineAudioCompletionEvent` interface represents events that occur when the processing of an `OfflineAudioContext` is terminated. The `complete` event uses this interface.\n\n**Note:** This interface is marked as deprecated; it is still supported for legacy reasons, but it will soon be superseded when the promise version of `OfflineAudioContext.startRendering` is supported in browsers, which will no longer need it.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioCompletionEvent.",
    "properties": {
      "renderedbuffer": "An `AudioBuffer` containing the result of processing an `OfflineAudioContext`."
    }
  },
  "OfflineAudioContext": {
    "docs": "The `OfflineAudioContext` interface is an `AudioContext` interface representing an audio-processing graph built from linked together `AudioNode`s. In contrast with a standard `AudioContext`, an `OfflineAudioContext` doesn't render the audio to the device hardware; instead, it generates it, as fast as it can, and outputs the result to an `AudioBuffer`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext.",
    "properties": {
      "length": "An integer representing the size of the buffer in sample-frames.",
      "resume": "Resumes the progression of time in an audio context that has previously been suspended.",
      "startrendering": "Starts rendering the audio, taking into account the current connections and the current scheduled changes. This page covers both the event-based version and the promise-based version.",
      "suspend": "Schedules a suspension of the time progression in the audio context at the specified time and returns a promise."
    }
  },
  "PaymentAddress": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\n**Non-standard:** This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n\nThe **`PaymentAddress`** interface of the Payment Request API is used to store shipping or payment address information.\n\nIt may be useful to refer to the Universal Postal Union website's [Addressing S42 standard](https://www.upu.int/en/Postal-Solutions/Programmes-Services/Addressing-Solutions#addressing-s42-standard) materials, which provide information about international standards for postal addresses.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/PaymentAddress.",
    "properties": {
      "addressline": "An array of strings providing each line of the address not included among the other properties. The exact size and content varies by country or location and can include, for example, a street name, house number, apartment number, rural delivery route, descriptive instructions, or post office box number.",
      "city": "A string which contains the city or town portion of the address.",
      "country": "A string specifying the country in which the address is located, using the [ISO-3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) standard. The string is always given in its canonical upper-case form. Some examples of valid `country` values: `\"US\"`, `\"GB\"`, `\"CN\"`, or `\"JP\"`.",
      "dependentlocality": "A string giving the dependent locality or sublocality within a city, for example, a neighborhood, borough, district, or UK dependent locality.",
      "organization": "A string specifying the name of the organization, firm, company, or institution at the payment address.",
      "phone": "A string specifying the telephone number of the recipient or contact person.",
      "postalcode": "A string specifying a code used by a jurisdiction for mail routing, for example, the ZIP code in the United States or the PIN code in India.",
      "recipient": "A string giving the name of the recipient, purchaser, or contact person at the payment address.",
      "region": "A string containing the top level administrative subdivision of the country, for example a state, province, oblast, or prefecture.",
      "sortingcode": "A string providing a postal sorting code such as is used in France.",
      "tojson": "A standard serializer that returns a JSON representation of the `PaymentAddress` object's properties."
    }
  },
  "PaymentMethodChangeEvent": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`PaymentMethodChangeEvent`** interface of the Payment Request API describes the `paymentmethodchange` event which is fired by some payment handlers when the user switches payment instruments (e.g., a user selects a \"store\" card to make a purchase while using Apple Pay).\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/PaymentMethodChangeEvent."
  },
  "PaintWorkletGlobalScope": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`PaintWorkletGlobalScope`** interface of the CSS Painting API represents the global object available inside a paint `Worklet`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/PaintWorkletGlobalScope.",
    "properties": {
      "devicepixelratio": "Returns the current device's ratio of physical pixels to logical pixels.",
      "registerpaint": "Registers a class to programmatically generate an image where a CSS property expects a file."
    }
  },
  "PannerNode": {
    "docs": "The `PannerNode` interface defines an audio-processing object that represents the location, direction, and behavior of an audio source signal in a simulated physical space. This `AudioNode` uses right-hand Cartesian coordinates to describe the source's position as a vector and its orientation as a 3D directional cone.\n\nA `PannerNode` always has exactly one input and one output: the input can be mono or stereo but the output is always stereo (2 channels); you can't have panning effects without at least two audio channels!\n\n\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/PannerNode.",
    "properties": {
      "coneinnerangle": "A double value describing the angle, in degrees, of a cone inside of which there will be no volume reduction.",
      "coneouterangle": "A double value describing the angle, in degrees, of a cone outside of which the volume will be reduced by a constant value, defined by the `coneOuterGain` property.",
      "coneoutergain": "A double value describing the amount of volume reduction outside the cone defined by the `coneOuterAngle` attribute. Its default value is `0`, meaning that no sound can be heard.",
      "distancemodel": "An enumerated value determining which algorithm to use to reduce the volume of the audio source as it moves away from the listener. Possible values are `\"linear\"`, `\"inverse\"` and `\"exponential\"`. The default value is `\"inverse\"`.",
      "maxdistance": "A double value representing the maximum distance between the audio source and the listener, after which the volume is not reduced any further.",
      "orientationx": "Represents the horizontal position of the audio source's vector in a right-hand Cartesian coordinate system. While this `AudioParam` cannot be directly changed, its value can be altered using its `value` property. The default is value is 1.",
      "orientationy": "Represents the vertical position of the audio source's vector in a right-hand Cartesian coordinate system. The default is 0. While this `AudioParam` cannot be directly changed, its value can be altered using its `value` property. The default is value is 0.",
      "orientationz": "Represents the longitudinal (back and forth) position of the audio source's vector in a right-hand Cartesian coordinate system. The default is 0. While this `AudioParam` cannot be directly changed, its value can be altered using its `value` property. The default is value is 0.",
      "panningmodel": "An enumerated value determining which spatialization algorithm to use to position the audio in 3D space.",
      "positionx": "Represents the horizontal position of the audio in a right-hand Cartesian coordinate system. The default is 0. While this `AudioParam` cannot be directly changed, its value can be altered using its `value` property. The default is value is 0.",
      "positiony": "Represents the vertical position of the audio in a right-hand Cartesian coordinate system. The default is 0. While this `AudioParam` cannot be directly changed, its value can be altered using its `value` property. The default is value is 0.",
      "positionz": "Represents the longitudinal (back and forth) position of the audio in a right-hand Cartesian coordinate system. The default is 0. While this `AudioParam` cannot be directly changed, its value can be altered using its `value` property. The default is value is 0.",
      "refdistance": "A double value representing the reference distance for reducing volume as the audio source moves further from the listener. For distances greater than this the volume will be reduced based on `rolloffFactor` and `distanceModel`.",
      "rollofffactor": "A double value describing how quickly the volume is reduced as the source moves away from the listener. This value is used by all distance models.",
      "setorientation": "Defines the direction the audio source is playing in.",
      "setposition": "Defines the position of the audio source relative to the listener (represented by an `AudioListener` object stored in the `BaseAudioContext.listener` attribute.)"
    }
  },
  "PaymentRequestEvent": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`PaymentRequestEvent`** interface of the Payment Request API is the object passed to a payment handler when a `PaymentRequest` is made.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/PaymentRequestEvent."
  },
  "Path2D": {
    "docs": "The **`Path2D`** interface of the Canvas 2D API is used to declare a path that can then be used on a `CanvasRenderingContext2D` object. The path methods of the `CanvasRenderingContext2D` interface are also present on this interface, which gives you the convenience of being able to retain and replay your path whenever desired.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Path2D.",
    "properties": {
      "addpath": "Adds a path to the current path.",
      "arc": "Adds an arc to the path which is centered at (`x, y`) position with radius `r` starting at `startAngle` and ending at `endAngle` going in the given direction by `counterclockwise` (defaulting to clockwise).",
      "arcto": "Adds a circular arc to the path with the given control points and radius, connected to the previous point by a straight line.",
      "beziercurveto": "Adds a cubic BÃ©zier curve to the path. It requires three points. The first two points are control points and the third one is the end point. The starting point is the last point in the current path, which can be changed using `moveTo()` before creating the BÃ©zier curve.",
      "closepath": "Causes the point of the pen to move back to the start of the current sub-path. It tries to draw a straight line from the current point to the start. If the shape has already been closed or has only one point, this function does nothing.",
      "ellipse": "Adds an elliptical arc to the path which is centered at (`x, y`) position with the radii `radiusX` and `radiusY` starting at `startAngle` and ending at `endAngle` going in the given direction by `counterclockwise` (defaulting to clockwise).",
      "lineto": "Connects the last point in the subpath to the (`x, y`) coordinates with a straight line.",
      "moveto": "Moves the starting point of a new sub-path to the (`x, y`) coordinates.",
      "quadraticcurveto": "Adds a quadratic BÃ©zier curve to the current path.",
      "rect": "Creates a path for a rectangle at position (`x, y`) with a size that is determined by `width` and `height`.",
      "roundrect": "Creates a path for a rounded rectangle at position (`x, y`) with a size that is determined by `width` and `height` and the radii of the circular arc to be used for the corners of the rectangle is determined by `radii`."
    }
  },
  "PaymentManager": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`PaymentManager`** interface of the Payment Handler API is used to manage various aspects of payment app functionality.\n\nIt is accessed via the `ServiceWorkerRegistration.paymentManager` property.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/PaymentManager."
  },
  "OverconstrainedError": {
    "docs": "The **`OverconstrainedError`** interface of the Media Capture and Streams API indicates that the set of desired capabilities for the current `MediaStreamTrack` cannot currently be met. When this event is thrown on a MediaStreamTrack, it is muted until either the current constraints can be established or until satisfiable constraints are applied.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/OverconstrainedError.",
    "properties": {
      "constraint": "Returns the constraint that was supplied in the constructor, meaning the constraint that was not satisfied."
    }
  },
  "PaymentResponse": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`PaymentResponse`** interface of the Payment Request API is returned after a user selects a payment method and approves a payment request.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/PaymentResponse.",
    "properties": {
      "complete": "Notifies the user agent that the user interaction is over. This causes any remaining user interface to be closed. This method should only be called after the Promise returned by the `PaymentRequest.show()` method.",
      "details": "Returns a JSON-serializable object that provides a payment method specific message used by the merchant to process the transaction and determine successful fund transfer. The contents of the object depend on the payment method being used. Developers need to consult whomever controls the URL for the expected shape of the details object.",
      "methodname": "Returns the payment method identifier for the payment method that the user selected, for example, Visa, Mastercard, Paypal, etc.",
      "payeremail": "Returns the email address supplied by the user. This option is only present when the `requestPayerEmail` option is set to `true` in the `options` parameter of the `PaymentRequest()` constructor.",
      "payername": "Returns the name supplied by the user. This option is only present when the `requestPayerName` option is set to true in the `options` parameter of the `PaymentRequest()` constructor.",
      "payerphone": "Returns the phone number supplied by the user. This option is only present when the `requestPayerPhone` option is set to `true` in the `options` parameter of the `PaymentRequest()` constructor.",
      "requestid": "Returns the identifier of the `PaymentRequest` that produced the current response. This is the same value supplied in the `PaymentRequest()` constructor by `details.id`.",
      "retry": "If something is wrong with the payment response's data (and there is a recoverable error), this method allows a merchant to request that the user retry the payment. The method takes an object as argument, which is used to signal to the user exactly what is wrong with the payment response so they can try to correct any issues.",
      "shippingaddress": "Returns the shipping Address supplied by the user. This option is only present when the `requestShipping` option is set to `true` in the `options` parameter of the `PaymentRequest()` constructor.",
      "shippingoption": "Returns the ID attribute of the shipping option selected by the user. This option is only present when the `requestShipping` option is set to `true` in the `options` parameter of the `PaymentRequest()` constructor.",
      "tojson": "Returns a JSON object representing this `PaymentResponse` object."
    }
  },
  "Pbkdf2Params": {
    "docs": "The **`Pbkdf2Params`** dictionary of the Web Crypto API represents the object that should be passed as the `algorithm` parameter into `SubtleCrypto.deriveKey()`, when using the PBKDF2 algorithm.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Pbkdf2Params."
  },
  "Performance": {
    "docs": "The **`Performance`** interface provides access to performance-related information for the current page.\n\nAn object of this type can be obtained by calling `window.performance` or `self.performance` in workers. Note that Performance entries are per context. If you create a mark on the main thread (or other worker), you cannot see it in a worker thread, and vice versa. See `self.performance` for which APIs are available in window and worker contexts.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Performance.",
    "properties": {
      "clearmarks": "Removes the given mark from the browser's performance entry buffer.",
      "clearmeasures": "Removes the given measure from the browser's performance entry buffer.",
      "clearresourcetimings": "Removes all `performance entries` with a `entryType` of \"`resource`\" from the browser's performance data buffer.",
      "eventcounts": "An `EventCounts` map containing the number of events which have been dispatched per event type.",
      "getentries": "Returns a list of `PerformanceEntry` objects based on the given filter.",
      "getentriesbyname": "Returns a list of `PerformanceEntry` objects based on the given name and entry type.",
      "getentriesbytype": "Returns a list of `PerformanceEntry` objects of the given entry type.",
      "mark": "Creates a `timestamp` in the browser's performance entry buffer with the given name.",
      "measure": "Creates a named `timestamp` in the browser's performance entry buffer between two specified marks (known as the start mark and end mark, respectively).",
      "measureuseragentspecificmemory": "Estimates the memory usage of a web application including all its iframes and workers.",
      "memory": "A non-standard extension added in Chrome, this property provides an object with basic memory usage information. You **should not use** this non-standard API.",
      "navigation": "A legacy `PerformanceNavigation` object that provides useful context about the operations included in the times listed in `timing`, including whether the page was a load or a refresh, how many redirections occurred, and so forth.",
      "now": "Returns a `DOMHighResTimeStamp` representing the number of milliseconds elapsed since a reference instant.",
      "setresourcetimingbuffersize": "Sets the browser's resource timing buffer size to the specified number of \"`resource`\" `type` `performance entry` objects.",
      "timeorigin": "Returns the high resolution timestamp of the start time of the performance measurement.",
      "timing": "A legacy `PerformanceTiming` object containing latency-related performance information.",
      "tojson": "Returns a JSON representation of the `Performance` object."
    }
  },
  "PerformanceElementTiming": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`PerformanceElementTiming`** interface contains render timing information for image and text node elements the developer annotated with an `elementtiming` attribute for observation.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/PerformanceElementTiming.",
    "properties": {
      "element": "An `Element` representing the element we are returning information about.",
      "id": "A string which is the `id` of the element.",
      "identifier": "A string which is the value of the `elementtiming` attribute on the element.",
      "intersectionrect": "A `DOMRectReadOnly` which is the rectangle of the element within the viewport.",
      "loadtime": "A `DOMHighResTimeStamp` with the loadTime of the element.",
      "naturalheight": "An unsigned 32-bit integer (unsigned long) which is the intrinsic height of the image if this is applied to an image, 0 for text.",
      "naturalwidth": "An unsigned 32-bit integer (unsigned long) which is the intrinsic width of the image if this is applied to an image, 0 for text.",
      "rendertime": "A `DOMHighResTimeStamp` with the renderTime of the element.",
      "tojson": "Returns a JSON representation of the `PerformanceElementTiming` object.",
      "url": "A string which is the initial URL of the resources request for images, 0 for text."
    }
  },
  "PaymentRequest": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe Payment Request API's **`PaymentRequest`** interface is the primary access point into the API, and lets web content and apps accept payments from the end user on behalf of the operator of the site or the publisher of the app.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/PaymentRequest.",
    "properties": {
      "abort": "Causes the user agent to end the payment request and to remove any user interface that might be shown.",
      "canmakepayment": "Indicates whether the `PaymentRequest` object can make a payment before calling `show()`.",
      "id": "A unique identifier for a particular `PaymentRequest`, which can be set via `details.id`. When none is set, it defaults to a UUID.",
      "shippingaddress": "If requested via payment options, returns the shipping address chosen by the user for the purposes of calculating shipping. This property is only populated if the constructor is called with the `requestShipping` flag set to true. Additionally, in some browsers, the parts of the address will be redacted for privacy until the user indicates they are ready to complete the transaction (i.e., they hit \"Pay\").",
      "shippingoption": "Returns the identifier of the selected shipping option. This property is only populated if the constructor is called with the `requestShipping` flag set to true.",
      "shippingtype": "Returns the type of shipping used to fulfill the transaction. This will be one of `shipping`, `delivery`, `pickup`, or `null` if a value was not provided in the constructor.",
      "show": "Causes the user agent to begin the user interaction for the payment request."
    }
  },
  "PerformanceEventTiming": {
    "docs": "The `PerformanceEventTiming` interface of the Event Timing API provides insights into the latency of certain event types triggered by user interaction.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEventTiming.",
    "properties": {
      "cancelable": "Returns the associated event's `cancelable` property.",
      "interactionid": "Returns the ID that uniquely identifies the user interaction which triggered the associated event.",
      "processingend": "Returns a `DOMHighResTimeStamp` representing the time at which the event dispatch ended. To measure the time the event handler took to run, calculate `processingEnd-processingStart`.",
      "processingstart": "Returns a `DOMHighResTimeStamp` representing the time at which event dispatch started. To measure the time between a user action and the time the event handler starts to run, calculate `processingStart-startTime`.",
      "target": "Returns the associated event's last target, if it is not removed.",
      "tojson": "Returns a JSON representation of the `PerformanceEventTiming` object."
    }
  },
  "PerformanceMark": {
    "docs": "**`PerformanceMark`** is an interface for `PerformanceEntry` objects with an `entryType` of \"`mark`\".\n\nEntries of this type are typically created by calling `performance.mark()` to add a named `DOMHighResTimeStamp` (the mark) to the browser's performance timeline. To create a performance mark that isn't added to the browser's performance timeline, use the constructor.\n\n**Note:** This feature is available in Web Workers\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/PerformanceMark.",
    "properties": {
      "detail": "Returns arbitrary metadata that has been included in the mark upon construction."
    }
  },
  "PerformanceEntry": {
    "docs": "**Note:** This feature is available in Web Workers\n\nThe **`PerformanceEntry`** object encapsulates a single performance metric that is part of the browser's performance timeline.\n\nThe Performance API offers built-in metrics which are specialized subclasses of `PerformanceEntry`. This includes entries for resource loading, event timing, first input delay (FID), and more.\n\nA performance entry can also be created by calling the `Performance.mark()` or `Performance.measure()` methods at an explicit point in an application. This allows you to add your own metrics to the performance timeline.\n\nThe `PerformanceEntry` instances will always be one of the following subclasses:\n\n- `LargestContentfulPaint`\n- `LayoutShift`\n- `PerformanceEventTiming`\n- `PerformanceLongTaskTiming`\n- `PerformanceMark`\n- `PerformanceMeasure`\n- `PerformanceNavigationTiming`\n- `PerformancePaintTiming`\n- `PerformanceResourceTiming`\n- `PerformanceServerTiming`\n- `TaskAttributionTiming`\n- `VisibilityStateEntry`\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry.",
    "properties": {
      "duration": "A `DOMHighResTimeStamp` representing the duration of the performance entry.",
      "entrytype": "A string representing the type of performance metric. For example, \"`mark`\" when `PerformanceMark` is used.",
      "name": "A string representing the name for a performance entry. The value depends on the subtype.",
      "starttime": "A `DOMHighResTimeStamp` representing the starting time for the performance metric.",
      "tojson": "Returns a JSON representation of the `PerformanceEntry` object."
    }
  },
  "PerformanceLongTaskTiming": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`PerformanceLongTaskTiming`** interface provides information about tasks that occupy the UI thread for 50 milliseconds or more.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/PerformanceLongTaskTiming.",
    "properties": {
      "attribution": "Returns a sequence of `TaskAttributionTiming` instances.",
      "tojson": "Returns a JSON representation of the `PerformanceLongTaskTiming` object."
    }
  },
  "PaymentRequestUpdateEvent": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`PaymentRequestUpdateEvent`** interface is used for events sent to a `PaymentRequest` instance when changes are made to shipping-related information for a pending `PaymentRequest`. Those events are:\n\n| --- | --- |\n| `shippingaddresschange` | Dispatched whenever the user changes their shipping address. |\n| `shippingoptionchange` | Dispatched whenever the user changes a shipping option. |\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/PaymentRequestUpdateEvent.",
    "properties": {
      "updatewith": "If the event handler determines that information included in the payment request needs to be changed, or that new information needs to be added, it calls `updateWith()` with the information that needs to be replaced or added."
    }
  },
  "PerformanceObserver": {
    "docs": "**Note:** This feature is available in Web Workers\n\nThe **`PerformanceObserver`** interface is used to observe performance measurement events and be notified of new performance entries as they are recorded in the browser's performance timeline.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver.",
    "properties": {
      "disconnect": "Stops the performance observer callback from receiving performance entries.",
      "observe": "Specifies the set of entry types to observe. The performance observer's callback function will be invoked when performance entry is recorded for one of the specified `entryTypes`.",
      "supportedentrytypes": "Returns an array of the `entryType` values supported by the user agent.",
      "takerecords": "Returns the current list of performance entries stored in the performance observer, emptying it out."
    }
  },
  "PerformanceNavigationTiming": {
    "docs": "The **`PerformanceNavigationTiming`** interface provides methods and properties to store and retrieve metrics regarding the browser's document navigation events. For example, this interface can be used to determine how much time it takes to load or unload a document.\n\nOnly the current document is included in the performance timeline, so there is only one `PerformanceNavigationTiming` object in the performance timeline. It inherits all of the properties and methods of `PerformanceResourceTiming` and `PerformanceEntry`.\n\nThe following diagram shows all of the timestamp properties defined in `PerformanceNavigationTiming`.\n\n\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigationTiming.",
    "properties": {
      "activationstart": "A `DOMHighResTimeStamp` representing the time between when a document starts prerendering and when it is activated.",
      "domcomplete": "A `DOMHighResTimeStamp` representing the time immediately before the user agent sets the document's `readyState` to `\"complete\"`.",
      "domcontentloadedeventend": "A `DOMHighResTimeStamp` representing the time immediately after the current document's `DOMContentLoaded` event handler completes.",
      "domcontentloadedeventstart": "A `DOMHighResTimeStamp` representing the time immediately before the current document's `DOMContentLoaded` event handler starts.",
      "dominteractive": "A `DOMHighResTimeStamp` representing the time immediately before the user agent sets the document's `readyState` to `\"interactive\"`.",
      "loadeventend": "A `DOMHighResTimeStamp` representing the time immediately after the current document's `load` event handler completes.",
      "loadeventstart": "A `DOMHighResTimeStamp` representing the time immediately before the current document's `load` event handler starts.",
      "redirectcount": "A number representing the number of redirects since the last non-redirect navigation in the current browsing context.",
      "tojson": "Returns a JSON representation of the `PerformanceNavigationTiming` object.",
      "type": "A string representing the navigation type. Either `\"navigate\"`, `\"reload\"`, `\"back_forward\"` or `\"prerender\"`.",
      "unloadeventend": "A `DOMHighResTimeStamp` representing the time immediately after the current document's `unload` event handler completes.",
      "unloadeventstart": "A `DOMHighResTimeStamp` representing the time immediately before the current document's `unload` event handler starts."
    }
  },
  "PerformancePaintTiming": {
    "docs": "The **`PerformancePaintTiming`** interface provides timing information about \"paint\" (also called \"render\") operations during web page construction. \"Paint\" refers to conversion of the render tree to on-screen pixels.\n\nThere are two key paint moments this API provides:\n\n- First paint (FP): Time when anything is rendered. Note that the marking of the first paint is optional, not all user agents report it.\n- First contentful paint (FCP): Time when the first bit of DOM text or image content is rendered.\n\nA third key paint moment is provided by the `LargestContentfulPaint` API:\n\n- Largest contentful paint (LCP): Render time of the largest image or text block visible within the viewport, recorded from when the page first begins to load.\n\nThe data this API provides helps you minimize the time that users have to wait before they can see the site's content start to appear. Decreasing the time until these key paint moments make sites feel more responsive, performant, and engaging for your users.\n\nLike other Performance APIs, this API extends `PerformanceEntry`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/PerformancePaintTiming."
  },
  "PerformanceResourceTiming": {
    "docs": "**Note:** This feature is available in Web Workers\n\nThe **`PerformanceResourceTiming`** interface enables retrieval and analysis of detailed network timing data regarding the loading of an application's resources. An application can use the timing metrics to determine, for example, the length of time it takes to fetch a specific resource, such as an `XMLHttpRequest`, `<SVG>`, image, or script.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming.",
    "properties": {
      "connectend": "A `DOMHighResTimeStamp` immediately after the browser finishes establishing the connection to the server to retrieve the resource.",
      "connectstart": "A `DOMHighResTimeStamp` immediately before the browser starts to establish the connection to the server to retrieve the resource.",
      "decodedbodysize": "A number that is the size (in octets) received from the fetch (HTTP or cache) of the message body, after removing any applied content encoding.",
      "deliverytype": "Indicates how the resource was delivered â for example from the cache or from a navigational prefetch.",
      "domainlookupend": "A `DOMHighResTimeStamp` representing the time immediately after the browser finishes the domain name lookup for the resource.",
      "domainlookupstart": "A `DOMHighResTimeStamp` immediately before the browser starts the domain name lookup for the resource.",
      "encodedbodysize": "A number representing the size (in octets) received from the fetch (HTTP or cache), of the payload body, before removing any applied content encodings.",
      "fetchstart": "A `DOMHighResTimeStamp` immediately before the browser starts to fetch the resource.",
      "firstinterimresponsestart": "A `DOMHighResTimeStamp` that represents the interim response time (for example, 100 Continue or 103 Early Hints).",
      "initiatortype": "A string representing the web platform feature that initiated the performance entry.",
      "nexthopprotocol": "A string representing the network protocol used to fetch the resource, as identified by the [ALPN Protocol ID (RFC7301)](https://datatracker.ietf.org/doc/html/rfc7301).",
      "redirectend": "A `DOMHighResTimeStamp` immediately after receiving the last byte of the response of the last redirect.",
      "redirectstart": "A `DOMHighResTimeStamp` that represents the start time of the fetch which initiates the redirect.",
      "renderblockingstatus": "A string representing the render-blocking status. Either \"`blocking`\" or \"`non-blocking`\".",
      "requeststart": "A `DOMHighResTimeStamp` immediately before the browser starts requesting the resource from the server.",
      "responseend": "A `DOMHighResTimeStamp` immediately after the browser receives the last byte of the resource or immediately before the transport connection is closed, whichever comes first.",
      "responsestart": "A `DOMHighResTimeStamp` immediately after the browser receives the first byte of the response from the server.",
      "responsestatus": "A number representing the HTTP response status code returned when fetching the resource.",
      "secureconnectionstart": "A `DOMHighResTimeStamp` immediately before the browser starts the handshake process to secure the current connection.",
      "servertiming": "An array of `PerformanceServerTiming` entries containing server timing metrics.",
      "tojson": "Returns a JSON representation of the `PerformanceResourceTiming` object.",
      "transfersize": "A number representing the size (in octets) of the fetched resource. The size includes the response header fields plus the response payload body.",
      "workerstart": "Returns a `DOMHighResTimeStamp` immediately before dispatching the `FetchEvent` if a Service Worker thread is already running, or immediately before starting the Service Worker thread if it is not already running. If the resource is not intercepted by a Service Worker the property will always return 0."
    }
  },
  "PerformanceMeasure": {
    "docs": "**`PerformanceMeasure`** is an abstract interface for `PerformanceEntry` objects with an `entryType` of \"`measure`\". Entries of this type are created by calling `performance.measure()` to add a named `DOMHighResTimeStamp` (the measure) between two marks to the browser's performance timeline.\n\n**Note:** This feature is available in Web Workers\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/PerformanceMeasure.",
    "properties": {
      "detail": "Contains arbitrary metadata about the measure."
    }
  },
  "PerformanceTiming": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\n**Warning:** This interface is deprecated in the [Navigation Timing Level 2 specification](https://w3c.github.io/navigation-timing/#obsolete). Please use the `PerformanceNavigationTiming` interface instead.\n\nThe **`PerformanceTiming`** interface is a legacy interface kept for backwards compatibility and contains properties that offer performance timing information for various events which occur during the loading and use of the current page. You get a `PerformanceTiming` object describing your page using the `window.performance.timing` property.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming.",
    "properties": {
      "connectend": "When the connection is opened network. If the transport layer reports an error and the connection establishment is started again, the last connection establishment end time is given. If a persistent connection is used, the value will be the same as `PerformanceTiming.fetchStart`. A connection is considered as opened when all secure connection handshake, or SOCKS authentication, is terminated.",
      "connectstart": "When the request to open a connection is sent to the network. If the transport layer reports an error and the connection establishment is started again, the last connection establishment start time is given. If a persistent connection is used, the value will be the same as `PerformanceTiming.fetchStart`.",
      "domainlookupend": "When the domain lookup is finished. If a persistent connection is used, or the information is stored in a cache or a local resource, the value will be the same as `PerformanceTiming.fetchStart`.",
      "domainlookupstart": "When the domain lookup starts. If a persistent connection is used, or the information is stored in a cache or a local resource, the value will be the same as `PerformanceTiming.fetchStart`.",
      "domcomplete": "When the parser finished its work on the main document, that is when its `Document.readyState` changes to `'complete'` and the corresponding `readystatechange` event is thrown.",
      "domcontentloadedeventend": "Right after all the scripts that need to be executed as soon as possible, in order or not, have been executed.",
      "domcontentloadedeventstart": "Right before the parser sent the `DOMContentLoaded` event, that is right after all the scripts that need to be executed right after parsing have been executed.",
      "dominteractive": "When the parser finished its work on the main document, that is when its `Document.readyState` changes to `'interactive'` and the corresponding `readystatechange` event is thrown.",
      "domloading": "When the parser started its work, that is when its `Document.readyState` changes to `'loading'` and the corresponding `readystatechange` event is thrown.",
      "fetchstart": "When the browser is ready to fetch the document using an HTTP request. This moment is before the check to any application cache.",
      "loadeventend": "When the `load` event handler terminated, that is when the load event is completed. If this event has not yet been sent, or is not yet completed, it returns `0.`",
      "loadeventstart": "When the `load` event was sent for the current document. If this event has not yet been sent, it returns `0.`",
      "navigationstart": "When the prompt for unload terminates on the previous document in the same browsing context. If there is no previous document, this value will be the same as `PerformanceTiming.fetchStart`.",
      "redirectend": "When the last HTTP redirect is completed, that is when the last byte of the HTTP response has been received. If there is no redirect, or if one of the redirects is not of the same origin, the value returned is `0`.",
      "redirectstart": "When the first HTTP redirect starts. If there is no redirect, or if one of the redirects is not of the same origin, the value returned is `0`.",
      "requeststart": "When the browser sent the request to obtain the actual document, from the server or from a cache. If the transport layer fails after the start of the request and the connection is reopened, this property will be set to the time corresponding to the new request.",
      "responseend": "When the browser received the last byte of the response, or when the connection is closed if this happened first, from the server, the cache, or from a local resource.",
      "responsestart": "When the browser received the first byte of the response, from the server from a cache, or from a local resource.",
      "secureconnectionstart": "When the secure connection handshake starts. If no such connection is requested, it returns `0`.",
      "tojson": "Returns a JSON object representing this `PerformanceTiming` object.",
      "unloadeventend": "When the `unload` event handler finishes. If there is no previous document, or if the previous document, or one of the needed redirects, is not of the same origin, the value returned is `0`.",
      "unloadeventstart": "When the `unload` event has been thrown, indicating the time at which the previous document in the window began to unload. If there is no previous document, or if the previous document or one of the needed redirects is not of the same origin, the value returned is `0`."
    }
  },
  "PeriodicSyncEvent": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`PeriodicSyncEvent`** interface of the `Web Periodic Background Synchronization API` provides a way to run tasks in the service worker with network connectivity.\n\nAn instance of this event is passed to the `periodicsync` handler. This happens periodically, at an interval greater than or equal to that set in the `PeriodicSyncManager.register()` method. Other implementation-specific factors such as the user's engagement with the site decide the actual interval.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/PeriodicSyncEvent.",
    "properties": {
      "periodicsyncevent": "Creates a new `PeriodicSyncEvent` object. This constructor is not typically used. The browser creates these objects itself and provides them to `onperiodicsync` callback.",
      "tag": "Returns the developer-defined identifier for this `PeriodicSyncEvent`. Multiple tags can be used by the web app to run different periodic tasks at different frequencies."
    }
  },
  "PeriodicSyncManager": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`PeriodicSyncManager`** interface of the `Web Periodic Background Synchronization API` provides a way to register tasks to be run in a service worker at periodic intervals with network connectivity. These tasks are referred to as periodic background sync requests. Access `PeriodicSyncManager` through the `ServiceWorkerRegistration.periodicSync`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/PeriodicSyncManager.",
    "properties": {
      "gettags": "Returns a `Promise` that resolves with a list of `strings` representing the tags that are currently registered for periodic syncing.",
      "register": "Registers a periodic sync request with the browser with the specified tag and options. Returns a `Promise` that resolves when the registration completes.",
      "unregister": "Unregisters the periodic sync request corresponding to the specified tag and returns a `Promise` that resolves when unregistration completes."
    }
  },
  "PerformanceNavigation": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe legacy **`PerformanceNavigation`** interface represents information about how the navigation to the current document was done.\n\n**Warning:** This interface is deprecated in the [Navigation Timing Level 2 specification](https://w3c.github.io/navigation-timing/#obsolete).\n    Please use the `PerformanceNavigationTiming` interface instead.\n\nAn object of this type can be obtained by calling the `Performance.navigation` read-only attribute.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigation.",
    "properties": {
      "redirectcount": "An `unsigned short` representing the number of REDIRECTs done before reaching the page.",
      "tojson": "A serializer returning a JSON object representing the `PerformanceNavigation` object.",
      "type": "An `unsigned short` which indicates how the navigation to this page was done. Possible values are:\n\n| --- | --- |\n| `TYPE_NAVIGATE` (0) | The page was accessed by following a link, a bookmark, a form submission, or a script, or by typing the URL in the address bar. |\n| `TYPE_RELOAD` (1) | The page was accessed by clicking the Reload button or via the `Location.reload()` method. |\n| `TYPE_BACK_FORWARD` (2) | The page was accessed by navigating into the history. |\n| `TYPE_RESERVED` (255) | Any other way. |"
    }
  },
  "PermissionStatus": {
    "docs": "**Note:** This feature is available in Web Workers\n\nThe **`PermissionStatus`** interface of the Permissions API provides the state of an object and an event handler for monitoring changes to said state.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/PermissionStatus.",
    "properties": {
      "name": "Returns the name of a requested permission, identical to the `name` passed to `Permissions.query`.",
      "state": "Returns the state of a requested permission; one of `'granted'`, `'denied'`, or `'prompt'`.",
      "status": "Returns the state of a requested permission; one of `'granted'`, `'denied'`, or `'prompt'`. Later versions of the specification replace this with `PermissionStatus.state`."
    }
  },
  "Permissions": {
    "docs": "**Note:** This feature is available in Web Workers\n\nThe Permissions interface of the Permissions API provides the core Permission API functionality, such as methods for querying and revoking permissions\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Permissions.",
    "properties": {
      "query": "Returns the user permission status for a given API.",
      "request": "Requests permission to use a given API. This is not currently supported in any browser.",
      "requestall": "Requests permission to use a given set of APIs. This is not currently supported in any browser.",
      "revoke": "Revokes the permission currently set on a given API."
    }
  },
  "Plugin": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe `Plugin` interface provides information about a browser plugin.\n\n**Note:** Own properties of `Plugin` objects are no longer enumerable in the latest browser versions.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Plugin.",
    "properties": {
      "description": "A human-readable description of the plugin.",
      "filename": "The filename of the plugin file.",
      "item": "Returns the MIME type of a supported content type, given the index number into a list of supported types.",
      "name": "The name of the plugin.",
      "nameditem": "Returns the MIME type of a supported item."
    }
  },
  "PictureInPictureWindow": {
    "docs": "The **`PictureInPictureWindow`** interface represents an object able to programmatically obtain the **`width`** and **`height`** and **`resize event`** of the floating video window.\n\nAn object with this interface is obtained using the `HTMLVideoElement.requestPictureInPicture()` promise return value.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/PictureInPictureWindow.",
    "properties": {
      "height": "Determines the height of the floating video window.",
      "width": "Determines the width of the floating video window."
    }
  },
  "PerformanceServerTiming": {
    "docs": "**Note:** This feature is available in Web Workers\n\n**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`PerformanceServerTiming`** interface surfaces server metrics that are sent with the response in the `Server-Timing` HTTP header.\n\nThis interface is restricted to the same origin, but you can use the `Timing-Allow-Origin` header to specify the domains that are allowed to access the server metrics. Note that this interface is only available in secure contexts (HTTPS) in some browsers.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/PerformanceServerTiming.",
    "properties": {
      "description": "A string value of the server-specified metric description, or an empty string.",
      "duration": "A double that contains the server-specified metric duration, or value `0.0`.",
      "name": "A string value of the server-specified metric name.",
      "tojson": "Returns a JSON representation of the `PerformanceServerTiming` object."
    }
  },
  "PerformanceObserverEntryList": {
    "docs": "The **`PerformanceObserverEntryList`** interface is a list of performance events that were explicitly observed via the `observe()` method.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserverEntryList.",
    "properties": {
      "getentries": "Returns a list of all explicitly observed `PerformanceEntry` objects.",
      "getentriesbyname": "Returns a list of all explicitly observed `PerformanceEntry` objects based on the given name and entry type.",
      "getentriesbytype": "Returns a list of all explicitly observed `PerformanceEntry` objects of the given entry type."
    }
  },
  "PluginArray": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe `PluginArray` interface is used to store a list of `Plugin` objects describing the available plugins; it's returned by the `navigator.plugins` property. The `PluginArray` is not a JavaScript array, but has the `length` property and supports accessing individual items using bracket notation (`plugins[2]`), as well as via `item(index)` and `namedItem(\"name\")` methods.\n\n**Note:** Own properties of `PluginArray` objects are no longer enumerable in the latest browser versions.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/PluginArray.",
    "properties": {
      "item": "Returns the `Plugin` at the specified index into the array.",
      "length": "The number of plugins in the array.",
      "nameditem": "Returns the `Plugin` with the specified name.",
      "refresh": "Refreshes all plugins on the current page, optionally reloading documents."
    }
  },
  "PointerEvent": {
    "docs": "The **`PointerEvent`** interface represents the state of a DOM event produced by a pointer such as the geometry of the contact point, the device type that generated the event, the amount of pressure that was applied on the contact surface, etc.\n\nA pointer is a hardware agnostic representation of input devices (such as a mouse, pen or contact point on a touch-enable surface). The pointer can target a specific coordinate (or set of coordinates) on the contact surface such as a screen.\n\nA pointer's hit test is the process a browser uses to determine the target element for a pointer event. Typically, this is determined by considering the pointer's location and also the visual layout of elements in a document on screen media.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent.",
    "properties": {
      "altitudeangle": "Represents the angle between a transducer (a pointer or stylus) axis and the X-Y plane of a device screen.",
      "azimuthangle": "Represents the angle between the Y-Z plane and the plane containing both the transducer (a pointer or stylus) axis and the Y axis.",
      "getcoalescedevents": "Returns a sequence of all `PointerEvent` instances that were coalesced into the dispatched `pointermove` event.",
      "getpredictedevents": "Returns a sequence of `PointerEvent` instances that the browser predicts will follow the dispatched `pointermove` event's coalesced events.",
      "height": "The height (magnitude on the Y axis), in CSS pixels, of the contact geometry of the pointer.",
      "isprimary": "Indicates if the pointer represents the primary pointer of this pointer type.",
      "pointerid": "A unique identifier for the pointer causing the event.",
      "pointertype": "Indicates the device type that caused the event (mouse, pen, touch, etc.).",
      "pressure": "The normalized pressure of the pointer input in the range `0` to `1`, where `0` and `1` represent the minimum and maximum pressure the hardware is capable of detecting, respectively.",
      "tangentialpressure": "The normalized tangential pressure of the pointer input (also known as barrel pressure or [cylinder stress](https://en.wikipedia.org/wiki/Cylinder_stress)) in the range `-1` to `1`, where `0` is the neutral position of the control.",
      "tiltx": "The plane angle (in degrees, in the range of `-90` to `90`) between the YâZ plane and the plane containing both the pointer (e.g. pen stylus) axis and the Y axis.",
      "tilty": "The plane angle (in degrees, in the range of `-90` to `90`) between the XâZ plane and the plane containing both the pointer (e.g. pen stylus) axis and the X axis.",
      "twist": "The clockwise rotation of the pointer (e.g. pen stylus) around its major axis in degrees, with a value in the range `0` to `359`.",
      "width": "The width (magnitude on the X axis), in CSS pixels, of the contact geometry of the pointer."
    }
  },
  "PeriodicWave": {
    "docs": "The **`PeriodicWave`** interface defines a periodic waveform that can be used to shape the output of an `OscillatorNode`.\n\n`PeriodicWave` has no inputs or outputs; it is used to define custom oscillators when calling `OscillatorNode.setPeriodicWave()`. The `PeriodicWave` itself is created/returned by `BaseAudioContext.createPeriodicWave`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/PeriodicWave."
  },
  "Presentation": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\n**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`Presentation`** can be defined as two possible user agents in the context: Controlling user agent and Receiving user agent.\n\nIn controlling browsing context, the `Presentation` interface provides a mechanism to override the browser default behavior of launching presentation to external screen. In receiving browsing context, `Presentation` interface provides the access to the available presentation connections.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Presentation.",
    "properties": {
      "defaultrequest": "In a [controlling user agent](https://www.w3.org/TR/presentation-api/#dfn-controlling-user-agent), the `defaultRequest` attribute MUST return the [default presentation request](https://www.w3.org/TR/presentation-api/#dfn-default-presentation-request) if any, `null` otherwise. In a [receiving browsing context](https://www.w3.org/TR/presentation-api/#dfn-receiving-browsing-context), it MUST return `null`.",
      "receiver": "In a [receiving user agent](https://www.w3.org/TR/presentation-api/#dfn-receiving-user-agent), the `receiver` attribute MUST return the `PresentationReceiver` instance associated with the [receiving browsing context](https://www.w3.org/TR/presentation-api/#dfn-receiving-browsing-context) and created by the [receiving user agent](https://www.w3.org/TR/presentation-api/#dfn-receiving-user-agent) when the [receiving browsing context](https://www.w3.org/TR/presentation-api/#dfn-receiving-browsing-context) is created."
    }
  },
  "PopStateEvent": {
    "docs": "**`PopStateEvent`** is an interface for the `popstate` event.\n\nA `popstate` event is dispatched to the window every time the active history\n  entry changes between two history entries for the same document. If the history entry\n  being activated was created by a call to `history.pushState()` or was\n  affected by a call to `history.replaceState()`, the `popstate`\n  event's `state` property contains a copy of the history entry's state object.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/PopStateEvent.",
    "properties": {
      "state": "Returns a copy of the information that was provided to `pushState()` or `replaceState()`."
    }
  },
  "PresentationAvailability": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\n**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nA **`PresentationAvailability`** object is associated with available [presentation displays](https://www.w3.org/TR/presentation-api/#dfn-presentation-display) and represents the presentation display availability for a presentation request. If the [controlling user agent](https://www.w3.org/TR/presentation-api/#dfn-controlling-user-agent) can [monitor the list of available presentation displays](https://www.w3.org/TR/presentation-api/#dfn-monitor-the-list-of-available-presentation-displays) in the background (without a pending request to `start()`), the `PresentationAvailability` object MUST be implemented in a [controlling browsing context](https://www.w3.org/TR/presentation-api/#dfn-controlling-browsing-context).\n\nThe `value` attribute MUST return the last value it was set to. The value is updated by the [monitor the list of available presentation displays](https://www.w3.org/TR/presentation-api/#dfn-monitor-the-list-of-available-presentation-displays) algorithm.\n\nThe `onchange` attribute is an [event handler](https://www.w3.org/TR/presentation-api/#dfn-event-handler) whose corresponding [event handler event type](https://www.w3.org/TR/presentation-api/#dfn-event-handler-event-type) is `change`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/PresentationAvailability.",
    "properties": {
      "value": "A boolean value indicating whether the given presentation display is available. The `value` attribute MUST return the last value it was set to."
    }
  },
  "PresentationConnection": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\n**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`PresentationConnection`** interface of the Presentation API provides methods and properties for managing a single presentation. Each [presentation connection](https://www.w3.org/TR/presentation-api/#dfn-presentation-connection) is represented by a `PresentationConnection` object. Both the [controlling user agent](https://www.w3.org/TR/presentation-api/#dfn-controlling-user-agent) and [receiving user agent](https://www.w3.org/TR/presentation-api/#dfn-receiving-user-agent) MUST implement `PresentationConnection`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/PresentationConnection.",
    "properties": {
      "binarytype": "Returns either blob or arrayBuffer. When a `PresentationConnection` object is created, its [`binaryType`](https://www.w3.org/TR/presentation-api/#idl-def-presentationconnection-binarytype) IDL attribute MUST be set to the string \" [`arraybuffer`](https://www.w3.org/TR/presentation-api/#dom-binarytype-arraybuffer)\".",
      "close": "Closes the current connection and sends a `PresentationConnectionCloseEvent` to `PresentationConnection.onclosed`.",
      "id": "Provides the presentation connection identifier.",
      "onclose": "Fired when there is a call to `PresentationConnection.close()`.",
      "onconnect": "Fired when a presentation connection is established.",
      "onmessage": "Fired when there is a call to `PresentationConnection.send()`.",
      "onterminated": "Fired when there is a call to `PresentationConnection.terminate()`.",
      "send": "Sends either binary or text data between a controlling browsing context and a presenting browsing context.",
      "state": "Returns the [presentation connection](https://www.w3.org/TR/presentation-api/#dfn-presentation-connection)'s current state.",
      "terminate": "Terminates the current connection and fires `PresentationConnection.onterminated`.",
      "url": "Returns the URL used to create or reconnect to the presentation."
    }
  },
  "PresentationConnectionAvailableEvent": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\n**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`PresentationConnectionAvailableEvent`** interface of the Presentation API is fired on a `PresentationRequest` when a connection associated with the object is created.\n\nA [controlling user agent](https://www.w3.org/TR/presentation-api/#dfn-controlling-user-agent) [fires](https://www.w3.org/TR/presentation-api/#dfn-firing-an-event) a [trusted event](https://www.w3.org/TR/presentation-api/#dfn-trusted-event) named [`connectionavailable`](https://www.w3.org/TR/presentation-api/#dfn-connectionavailable) on a [`PresentationRequest`](https://www.w3.org/TR/presentation-api/#idl-def-presentationrequest) when a connection associated with the object is created. It is fired at the `PresentationRequest` instance, using the [`PresentationConnectionAvailableEvent`](https://www.w3.org/TR/presentation-api/#idl-def-presentationconnectionavailableevent) interface, with the [`connection`](https://www.w3.org/TR/presentation-api/#idl-def-presentationconnectionavailableevent-connection) attribute set to the [`PresentationConnection`](https://www.w3.org/TR/presentation-api/#idl-def-presentationconnection) object that was created. The event is fired for each connection that is created for the [controller](https://www.w3.org/TR/presentation-api/#dfn-controller), either by the [controller](https://www.w3.org/TR/presentation-api/#dfn-controller) calling `start()` or `reconnect()`, or by the [controlling user agent](https://www.w3.org/TR/presentation-api/#dfn-controlling-user-agent) creating a connection on the controller's behalf via [`defaultRequest`](https://www.w3.org/TR/presentation-api/#dom-presentation-defaultrequest).\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/PresentationConnectionAvailableEvent.",
    "properties": {
      "connection": "Returns a references to the `PresentationConnection` object that fired the event."
    }
  },
  "PresentationRequest": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\n**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nA `PresentationRequest` object is used to initiate or reconnect to a presentation made by a [controlling browsing context](https://www.w3.org/TR/presentation-api/#dfn-controlling-browsing-context). The `PresentationRequest` object MUST be implemented in a [controlling browsing context](https://www.w3.org/TR/presentation-api/#dfn-controlling-browsing-context) provided by a [controlling user agent](https://www.w3.org/TR/presentation-api/#dfn-controlling-user-agent).\n\nWhen a `PresentationRequest` is constructed, the given `urls` MUST be used as the list of presentation request URLs which are each a possible [presentation URL](https://www.w3.org/TR/presentation-api/#dfn-presentation-url) for the `PresentationRequest` instance.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/PresentationRequest.",
    "properties": {
      "getavailability": "When the `getAvailability()` method is called, the user agent MUST run the steps as the link.",
      "reconnect": "When the `reconnect(presentationId)` method is called on a `PresentationRequest` presentationRequest, the [user agent](https://www.w3.org/TR/presentation-api/#dfn-user-agents) MUST run the following steps to reconnect to a presentation.",
      "start": "Returns a `Promise` that resolves with a `PresentationConnection` after the user agent prompts the user to select a display and grant permission to use that display."
    }
  },
  "PictureInPictureEvent": {
    "docs": "The **`PictureInPictureEvent`** interface represents picture-in-picture-related events, including `enterpictureinpicture`, `leavepictureinpicture` and `resize`\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/PictureInPictureEvent.",
    "properties": {
      "pictureinpicturewindow": "Returns the `PictureInPictureWindow` the event relates to."
    }
  },
  "ProcessingInstruction": {
    "docs": "The **`ProcessingInstruction`** interface represents a [processing instruction](https://www.w3.org/TR/xml/#sec-pi); that is, a `Node` which embeds an instruction targeting a specific application but that can be ignored by any other applications which don't recognize the instruction.\n\n**Warning:** `ProcessingInstruction` nodes are only supported in XML documents, not in HTML documents. In these, a process instruction will be considered as a comment and be represented as a `Comment` object in the tree.\n\nA processing instruction may be different than the XML declaration.\n\n**Note:** User-defined processing instructions cannot begin with \"`xml`\", as `xml`-prefixed processing-instruction target names are reserved by the XML specification for particular, standard uses (see, for example, `<?xml-stylesheet ?>`.\n\nFor example:\n\n```\n<?xml version=\"1.0\"?>\n```\n\nis a processing instruction whose `target` is `xml`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ProcessingInstruction.",
    "properties": {
      "sheet": "Returns the associated `StyleSheet` object, if any; or `null` if none.",
      "target": "A name identifying the application to which the instruction is targeted."
    }
  },
  "PresentationReceiver": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`PresentationReceiver`** interface of the Presentation API provides a means for a receiving browsing context to access controlling browsing contexts and communicate with them.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/PresentationReceiver.",
    "properties": {
      "connectionlist": "Returns a `Promise` that resolves with a `PresentationConnectionList` object containing a list of incoming presentation connections."
    }
  },
  "PositionSensorVRDevice": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\n**Non-standard:** This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n\nThe **`PositionSensorVRDevice`** interface of the WebVR API represents VR hardware's position sensor. You can access information such as the current position and orientation of the sensor in relation to the head mounted display through the `PositionSensorVRDevice.getState()` method.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/PositionSensorVRDevice.",
    "properties": {
      "getimmediatestate": "Returns the current instantaneous position sensor state. This is intended to only be used rarely, for certain special uses, for example sampling the immediate position of a hand orientation sensor â or at least it will be, in the future.",
      "getstate": "Returns the current state of the position sensor for the current frame (e.g. within the current `window.requestAnimationFrame` callback) or for the previous frame, contained with a `VRPose` object. This is the method you'd normally want to use, versus `getImmediateState()`.",
      "resetsensor": "Can be used to reset the sensor if desired, returning the position and orientation values to zero."
    }
  },
  "PresentationConnectionCloseEvent": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\n**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`PresentationConnectionCloseEvent`** interface of the Presentation API is fired on a `PresentationConnection` when it is closed.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/PresentationConnectionCloseEvent.",
    "properties": {
      "message": "A human-readable message that provides more information about why the connection was closed.",
      "reason": "Indicates why the connection was closed. This property takes one of the following values: `error`, `closed`, or `wentaway`."
    }
  },
  "PromiseRejectionEvent": {
    "docs": "The **`PromiseRejectionEvent`** interface represents events which are sent to the global script context when JavaScript `Promise`s are rejected. These events are particularly useful for telemetry and debugging purposes.\n\nFor details, see Promise rejection events.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent.",
    "properties": {
      "promise": "The JavaScript `Promise` that was rejected.",
      "reason": "A value or `Object` indicating why the promise was rejected, as passed to `Promise.reject()`."
    }
  },
  "PushManager": {
    "docs": "The **`PushManager`** interface of the Push API provides a way to receive notifications from third-party servers as well as request URLs for push notifications.\n\nThis interface is accessed via the `ServiceWorkerRegistration.pushManager` property.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/PushManager.",
    "properties": {
      "getsubscription": "Retrieves an existing push subscription. It returns a `Promise` that resolves to a `PushSubscription` object containing details of an existing subscription. If no existing subscription exists, this resolves to a `null` value.",
      "haspermission": "Returns a `Promise` that resolves to the `PushPermissionStatus` of the requesting webapp, which will be one of `granted`, `denied`, or `default`. Replaced by `PushManager.permissionState()`.",
      "permissionstate": "Returns a `Promise` that resolves to the permission state of the current `PushManager`, which will be one of `'granted'`, `'denied'`, or `'prompt'`.",
      "register": "Subscribes to a push subscription. Replaced by `PushManager.subscribe()`.",
      "registrations": "Retrieves existing push subscriptions. Replaced by `PushManager.getSubscription()`.",
      "subscribe": "Subscribes to a push service. It returns a `Promise` that resolves to a `PushSubscription` object containing details of a push subscription. A new push subscription is created if the current service worker does not have an existing subscription.",
      "supportedcontentencodings": "Returns an array of supported content codings that can be used to encrypt the payload of a push message.",
      "unregister": "Unregisters and deletes a specified subscription endpoint. In the updated API, a subscription is unregistered by calling the `PushSubscription.unsubscribe()` method."
    }
  },
  "PushMessageData": {
    "docs": "The **`PushMessageData`** interface of the Push API provides methods which let you retrieve the push data sent by a server in various formats.\n\nUnlike the similar methods in the Fetch API, which only allow the method to be invoked once, these methods can be called multiple times.\n\nMessages received through the Push API are sent encrypted by push services and then automatically decrypted by browsers before they are made accessible through the methods of the `PushMessageData` interface.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/PushMessageData.",
    "properties": {
      "arraybuffer": "Extracts the data as an `ArrayBuffer` object.",
      "blob": "Extracts the data as a `Blob` object.",
      "json": "Extracts the data as a JSON object.",
      "text": "Extracts the data as a plain text string."
    }
  },
  "PushEvent": {
    "docs": "The **`PushEvent`** interface of the Push API represents a push message that has been received. This event is sent to the global scope of a `ServiceWorker`. It contains the information sent from an application server to a `PushSubscription`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/PushEvent.",
    "properties": {
      "data": "Returns a reference to a `PushMessageData` object containing data sent to the `PushSubscription`."
    }
  },
  "PresentationConnectionList": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\n`PresentationConnectionList` is the collection of incoming presentation connections.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/PresentationConnectionList.",
    "properties": {
      "connections": "Returns the non-terminated set of `PresentationConnection`s in the [set of presentation controllers](https://www.w3.org/TR/presentation-api/#dfn-set-of-presentation-controllers).",
      "onconnectionavailable": "Fired whenever a new [presentation connection](https://www.w3.org/TR/presentation-api/#dfn-presentation-connection) becomes available."
    }
  },
  "PushSubscriptionOptions": {
    "docs": "The **`PushSubscriptionOptions`** interface of the Push API represents the options associated with a push subscription.\n\nThe read-only `PushSubscriptionOptions` object is returned by calling `PushSubscription.options` on a `PushSubscription`. This interface has no constructor of its own.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/PushSubscriptionOptions.",
    "properties": {
      "applicationserverkey": "A public key your push server will use to send\n      messages to client apps via a push server.",
      "uservisibleonly": "A boolean value indicating that the returned push\n      subscription will only be used for messages whose effect is made visible to the user."
    }
  },
  "RTCCertificateStats": {
    "docs": "The **`RTCCertificateStats`** dictionary of the WebRTC API is used to report information about a certificate used by an `RTCDtlsTransport` and its underlying `RTCIceTransport`.\n\nThe report can be obtained by iterating the `RTCStatsReport` returned by `RTCPeerConnection.getStats()` until you find an entry with the `type` of `certificate`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/RTCCertificateStats."
  },
  "ProgressEvent": {
    "docs": "The **`ProgressEvent`** interface represents events measuring progress of an underlying process, like an HTTP request (for an `XMLHttpRequest`, or the loading of the underlying resource of an `<img>`, `<audio>`, `<video>`, `<style>` or `<link>`).\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent.",
    "properties": {
      "lengthcomputable": "A boolean flag indicating if the total work to be done, and the amount of work already done, by the underlying process is calculable. In other words, it tells if the progress is measurable or not.",
      "loaded": "A 64-bit unsigned integer value indicating the amount of work already performed by the underlying process. The ratio of work done can be calculated by dividing `total` by the value of this property. When downloading a resource using HTTP, this only counts the body of the HTTP message, and doesn't include headers and other overhead.",
      "total": "A 64-bit unsigned integer representing the total amount of work that the underlying process is in the progress of performing. When downloading a resource using HTTP, this is the `Content-Length` (the size of the body of the message), and doesn't include the headers and other overhead."
    }
  },
  "RTCDTMFSender": {
    "docs": "The **`RTCDTMFSender`** interface provides a mechanism for transmitting DTMF codes on a WebRTC `RTCPeerConnection`. You gain access to the connection's `RTCDTMFSender` through the `RTCRtpSender.dtmf` property on the audio track you wish to send DTMF with.\n\nThe primary purpose for WebRTC's DTMF support is to allow WebRTC-based communication clients to be connected to a [public-switched telephone network (PSTN)](https://en.wikipedia.org/wiki/Public_switched_telephone_network) or other legacy telephone service, including extant voice over IP (VoIP) services. For that reason, DTMF can't be used between two WebRTC-based devices, because there is no mechanism provided by WebRTC for receiving DTMF codes.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/RTCDTMFSender.",
    "properties": {
      "insertdtmf": "Given a string describing a set of DTMF codes and, optionally, the duration of and inter-tone gap between the tones, `insertDTMF()` starts sending the specified tones. Calling `insertDTMF()` replaces any already-pending tones from the `toneBuffer`. You can abort sending queued tones by specifying an empty string (`\"\"`) as the set of tones to play.",
      "tonebuffer": "A string which contains the list of DTMF tones currently in the queue to be transmitted (tones which have already been played are no longer included in the string). See `toneBuffer` for details on the format of the tone buffer."
    }
  },
  "RTCDTMFToneChangeEvent": {
    "docs": "The **`RTCDTMFToneChangeEvent`** interface represents events sent to indicate that DTMF tones have started or finished playing. This interface is used by the `tonechange` event.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/RTCDTMFToneChangeEvent.",
    "properties": {
      "tone": "A string specifying the tone which has begun playing, or an empty string (`\"\"`) if the previous tone has finished playing."
    }
  },
  "RTCCertificate": {
    "docs": "The **`RTCCertificate`** interface of the WebRTC API provides an object representing a certificate that an `RTCPeerConnection` uses to authenticate.\n\n`RTCCertificate` is a serializable object, so it can be cloned with `structuredClone()` or copied between Workers using `postMessage()`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/RTCCertificate.",
    "properties": {
      "expires": "Returns the expiration date of the certificate.",
      "getfingerprints": "Returns an array of certificate fingerprints, calculated using the different algorithms supported by the browser."
    }
  },
  "PublicKeyCredential": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`PublicKeyCredential`** interface provides information about a public key / private key pair, which is a credential for logging in to a service using an un-phishable and data-breach resistant asymmetric key pair instead of a password. It inherits from `Credential`, and is part of the Web Authentication API extension to the Credential Management API.\n\n**Note:** This API is restricted to top-level contexts. Use from within an `<iframe>` element will not have any effect.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredential.",
    "properties": {
      "authenticatorattachment": "A string that indicates the mechanism by which the WebAuthn implementation is attached to the authenticator at the time the associated `navigator.credentials.create()` or `navigator.credentials.get()` call completes.",
      "getclientextensionresults": "If any extensions were requested, this method will return the results of processing those extensions.",
      "id": "Inherited from `Credential` and overridden to be the base64url encoding of `PublicKeyCredential.rawId`.",
      "isconditionalmediationavailable": "Returns a `Promise` which resolves to `true` if conditional mediation is available.",
      "isuserverifyingplatformauthenticatoravailable": "Returns a `Promise` which resolves to `true` if an authenticator bound to the platform is capable of verifying the user.",
      "parsecreationoptionsfromjson": "Convenience method for deserializing server-sent credential registration data when registering a user with credentials.",
      "parserequestoptionsfromjson": "Convenience method for deserializing server-sent credential request data when authenticating a (registered) user.",
      "rawid": "An `ArrayBuffer` that holds the globally unique identifier for this `PublicKeyCredential`. This identifier can be used to look up credentials for future calls to `navigator.credentials.get()`.",
      "response": "An instance of an `AuthenticatorResponse` object. It is either of type `AuthenticatorAttestationResponse` if the `PublicKeyCredential` was the results of a `navigator.credentials.create()` call, or of type `AuthenticatorAssertionResponse` if the `PublicKeyCredential` was the result of a `navigator.credentials.get()` call.",
      "tojson": "Convenience method for creating a JSON string representation of a `PublicKeyCredential` for sending to the server when registering a user with credentials and authenticating a registered user.",
      "type": "Inherited from `Credential`. Always set to `public-key` for `PublicKeyCredential` instances."
    }
  },
  "PushSubscription": {
    "docs": "The `PushSubscription` interface of the Push API provides a subscription's URL endpoint and allows unsubscribing from a push service.\n\nAn instance of this interface can be serialized.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription.",
    "properties": {
      "endpoint": "A string containing the endpoint associated with the push subscription.",
      "expirationtime": "A `DOMHighResTimeStamp` of the subscription expiration time associated with the push subscription, if there is one, or null otherwise.",
      "getkey": "Returns an `ArrayBuffer` which contains the client's public key, which can then be sent to a server and used in encrypting push message data.",
      "options": "An object containing the options used to create the subscription.",
      "subscriptionid": "A string containing the subscription ID associated with the push subscription.",
      "tojson": "Standard serializer â returns a JSON representation of the subscription properties.",
      "unsubscribe": "Starts the asynchronous process of unsubscribing from the push service, returning a `Promise` that resolves to a boolean value when the current subscription is successfully unregistered."
    }
  },
  "RTCDtlsTransport": {
    "docs": "The **`RTCDtlsTransport`** interface provides access to information about the Datagram Transport Layer Security (**DTLS**) transport over which a `RTCPeerConnection`'s RTP and RTCP packets are sent and received by its `RTCRtpSender` and `RTCRtpReceiver` objects.\n\nA `RTCDtlsTransport` object is also used to provide information about SCTP packets transmitted and received by a connection's data channels.\n\nFeatures of the DTLS transport include the addition of security to the underlying transport; the `RTCDtlsTransport` interface can be used to obtain information about the underlying transport and the security added to it by the DTLS layer.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/RTCDtlsTransport."
  },
  "RTCDataChannelEvent": {
    "docs": "The **`RTCDataChannelEvent`** interface\n  represents an event related to a specific `RTCDataChannel`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannelEvent."
  },
  "RTCError": {
    "docs": "The **`RTCError`** interface describes an error which has occurred while handling WebRTC operations. It's based upon the standard `DOMException` interface that describes general DOM errors.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/RTCError."
  },
  "RTCAudioSourceStats": {
    "docs": "The WebRTC API's **`RTCAudioSourceStats`** dictionary provides information about an audio track that is attached to one or more senders.\n\nThese statistics can be obtained by iterating the `RTCStatsReport` returned by `RTCRtpSender.getStats()` or `RTCPeerConnection.getStats()` until you find a report with the `type` of `media-source` and a `kind` of `audio`.\n\n**Note:** For audio information about remotely sourced tracks (that are being received), see `RTCInboundRtpStreamStats`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/RTCAudioSourceStats."
  },
  "RTCErrorEvent": {
    "docs": "The WebRTC API's **`RTCErrorEvent`** interface represents an error sent to a WebRTC object. It's based on the standard `Event` interface, but adds RTC-specific information describing the error, as shown below.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/RTCErrorEvent."
  },
  "RTCDataChannel": {
    "docs": "The **`RTCDataChannel`** interface represents a network channel which can be used for bidirectional peer-to-peer transfers of arbitrary data. Every data channel is associated with an `RTCPeerConnection`, and each peer connection can have up to a theoretical maximum of 65,534 data channels (the actual limit may vary from browser to browser).\n\nTo create a data channel and ask a remote peer to join you, call the `RTCPeerConnection`'s `createDataChannel()` method. The peer being invited to exchange data receives a `datachannel` event (which has type `RTCDataChannelEvent`) to let it know the data channel has been added to the connection.\n\n`RTCDataChannel` is a transferable object.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel."
  },
  "RTCIceCandidatePairStats": {
    "docs": "The **`RTCIceCandidatePairStats`** dictionary of the WebRTC API is used to report statistics that provide insight into the quality and performance of an `RTCPeerConnection` while connected and configured as described by the specified pair of ICE candidates.\n\nThe statistics can be obtained by iterating the `RTCStatsReport` returned by `RTCPeerConnection.getStats()` until you find an entry with the `type` of `\"candidate-pair\"`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats."
  },
  "RTCEncodedAudioFrame": {
    "docs": "The **`RTCEncodedAudioFrame`** of the WebRTC API represents an encoded audio frame in the WebRTC receiver or sender pipeline, which may be modified using a WebRTC Encoded Transform.\n\nThe interface provides methods and properties to get metadata about the frame, allowing its format and order in the sequence of frames to be determined.\n  The `data` property gives access to the encoded frame data as a buffer, which might be encrypted, or otherwise modified by a transform.\n\n**Note:** This feature is available in Dedicated Web Workers.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/RTCEncodedAudioFrame.",
    "properties": {
      "data": "Return a buffer containing the encoded frame data.",
      "getmetadata": "Returns the metadata associated with the frame.",
      "timestamp": "Returns the timestamp at which sampling of the frame started."
    }
  },
  "RTCIceCandidateStats": {
    "docs": "The **`RTCIceCandidateStats`** dictionary of the WebRTC API is used to report statistics related to an `RTCIceCandidate`.\n\nThe statistics can be obtained by iterating the `RTCStatsReport` returned by `RTCPeerConnection.getStats()` until you find a report with the `type` of `local-candidate`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidateStats."
  },
  "RTCIceCandidate": {
    "docs": "The **`RTCIceCandidate`** interfaceâpart of the WebRTC APIârepresents a candidate Interactive Connectivity Establishment (ICE) configuration which may be used to establish an `RTCPeerConnection`.\n\nAn ICE candidate describes the protocols and routing needed for WebRTC to be able to communicate with a remote device. When starting a WebRTC peer connection, typically a number of candidates are proposed by each end of the connection, until they mutually agree upon one which describes the connection they decide will be best. WebRTC then uses that candidate's details to initiate the connection.\n\nFor details on how the ICE process works, see Lifetime of a WebRTC session. The article WebRTC connectivity provides additional useful details.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate."
  },
  "RTCEncodedVideoFrame": {
    "docs": "The **`RTCEncodedVideoFrame`** of the WebRTC API represents an encoded video frame in the WebRTC receiver or sender pipeline, which may be modified using a WebRTC Encoded Transform.\n\n**Note:** This feature is available in Dedicated Web Workers.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/RTCEncodedVideoFrame.",
    "properties": {
      "data": "Return a buffer containing the encoded frame data.",
      "getmetadata": "Returns the metadata associated with the frame.",
      "timestamp": "Returns the timestamp at which sampling of the frame started.",
      "type": "Returns whether the current frame is a key frame, delta frame, or empty frame."
    }
  },
  "RTCIceTransport": {
    "docs": "The **`RTCIceTransport`** interface provides access to information about the ICE transport layer over which the data is being sent and received.\n  This is particularly useful if you need to access state information about the connection.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport."
  },
  "RTCIdentityAssertion": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`RTCIdentityAssertion`** interface of the WebRTC API represents the identity of a remote peer of the current connection. If no peer has yet been set and verified, then this interface returns `null`. Once set it can't be changed.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/RTCIdentityAssertion.",
    "properties": {
      "idp": "Indicates the provider of the identity assertion.",
      "name": "Indicates the name of the identity assertion provider."
    }
  },
  "RTCInboundRtpStreamStats": {
    "docs": "The **`RTCInboundRtpStreamStats`** dictionary of the WebRTC API is used to report statistics related to the receiving end of an RTP stream on the local end of the `RTCPeerConnection`.\n\nThe statistics can be obtained by iterating the `RTCStatsReport` returned by `RTCPeerConnection.getStats()` or `RTCRtpReceiver.getStats()` until you find a report with the `type` of `inbound-rtp`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/RTCInboundRtpStreamStats."
  },
  "RTCOutboundRtpStreamStats": {
    "docs": "The **`RTCOutboundRtpStreamStats`** dictionary of the WebRTC API is used to report metrics and statistics related to an outbound RTP stream being sent by an `RTCRtpSender`.\n\nThe statistics can be obtained by iterating the `RTCStatsReport` returned by `RTCPeerConnection.getStats()` or `RTCRtpSender.getStats()` until you find a report with the `type` of `outbound-rtp`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/RTCOutboundRtpStreamStats."
  },
  "RTCPeerConnectionIceEvent": {
    "docs": "The **`RTCPeerConnectionIceEvent`** interface represents events that occur in relation to ICE candidates with the target, usually an `RTCPeerConnection`.\n\nOnly one event is of this type: `icecandidate`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnectionIceEvent.",
    "properties": {
      "candidate": "Contains the `RTCIceCandidate` containing the candidate associated with the event, or `null` if this event indicates that there are no further candidates to come."
    }
  },
  "RTCPeerConnectionStats": {
    "docs": "The **`RTCPeerConnectionStats`** dictionary of the WebRTC API provides information about the high level peer connection (`RTCPeerConnection`).\n\nIn particular, it provides the number of unique data channels that have been opened, and the number of opened channels that have been closed.\n  This allows the current number of open channels to be calculated.\n\nThese statistics can be obtained by iterating the `RTCStatsReport` returned by `RTCPeerConnection.getStats()` until you find a report with the `type` of `peer-connection`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnectionStats."
  },
  "RTCPeerConnection": {
    "docs": "The **`RTCPeerConnection`** interface represents a WebRTC connection between the local computer and a remote peer.\n  It provides methods to connect to a remote peer, maintain and monitor the connection, and close the connection once it's no longer needed.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection.",
    "properties": {
      "generatecertificate": "Creates an X.509 certificate and its corresponding private key, returning a `Promise` that resolves with the new `RTCCertificate` once it is generated."
    }
  },
  "RTCIceCandidatePair": {
    "docs": "The **`RTCIceCandidatePair`** dictionary describes a pair of ICE candidates which together comprise a description of a viable connection between two WebRTC endpoints. It is used as the return value from `RTCIceTransport.getSelectedCandidatePair()` to identify the currently-selected candidate pair identified by the ICE agent.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePair."
  },
  "RTCRemoteOutboundRtpStreamStats": {
    "docs": "The **`RTCRemoteOutboundRtpStreamStats`** dictionary of the WebRTC API is used to report statistics from remote endpoint of its outbound RTP stream, which corresponds to an inbound stream that is currently received by an `RTCPeerConnection` object.\n\nThe statistics can be obtained by iterating the `RTCStatsReport` returned by `RTCPeerConnection.getStats()` until you find a report with the `type` of `remote-outbound-rtp`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/RTCRemoteOutboundRtpStreamStats."
  },
  "RTCIceParameters": {
    "docs": "The **`RTCIceParameters`** dictionary specifies the username fragment and password assigned to an ICE session.\n\nDuring ICE negotiation, each peer's username fragment and password are recorded in an `RTCIceParameters` object, which can be obtained from the `RTCIceTransport` by calling its `getLocalParameters()` or `getRemoteParameters()` method, depending on which end interests you.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/RTCIceParameters."
  },
  "RTCRtpCodecParameters": {
    "docs": "The `RTCRtpCodecParameters` dictionary, part of the WebRTC API, is used to describe the configuration parameters for a single media codec.\n\nIt's used in `RTCRtpSender.getParameters()`, `RTCRtpSender.setParameters()` and `RTCRtpReceiver.getParameters()`.\n  Its also use used when calling `RTCRtpTransceiver.setCodecPreferences()` to configure a transceiver's codecs before beginning the offer/answer process to establish a WebRTC peer connection.\n\nMost of the fields in this property take values which are defined and maintained by the Internet Assigned Numbers Authority (IANA). References to relevant IANA documents are provided in the see also section at the end of this article.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpCodecParameters."
  },
  "RTCRtpReceiver": {
    "docs": "The **`RTCRtpReceiver`** interface of the WebRTC API manages the reception and decoding of data for a `MediaStreamTrack` on an `RTCPeerConnection`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpReceiver.",
    "properties": {
      "getcapabilities": "Returns the most optimistic view of the capabilities of the system for receiving media of the given kind.",
      "getcontributingsources": "Returns an array that contains an object for each unique CSRC (contributing source) identifier received by the current `RTCRtpReceiver` in the last ten seconds.",
      "getparameters": "Returns an object that contains information about how the RTC data is to be decoded.",
      "getstats": "Returns a `Promise` whose fulfillment handler receives a `RTCStatsReport` which contains statistics about the incoming streams and their dependencies.",
      "getsynchronizationsources": "Returns an array that contains an object for each unique SSRC (synchronization source) identifier received by the current `RTCRtpReceiver` in the last ten seconds.",
      "track": "Returns the `MediaStreamTrack` associated with the current `RTCRtpReceiver` instance.",
      "transform": "An `RTCRtpScriptTransform` is used to insert a transform stream (`TransformStream`) running in a worker thread into the receiver pipeline, allowing stream transforms to be applied to incoming encoded video and audio frames.",
      "transport": "Returns the `RTCDtlsTransport` instance over which the media for the receiver's track is received."
    }
  },
  "RTCRtpScriptTransform": {
    "docs": "The **`RTCRtpScriptTransform`** interface of the WebRTC API is used to insert a WebRTC Encoded Transform (a `TransformStream` running in a worker thread) into the WebRTC sender and receiver pipelines.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpScriptTransform."
  },
  "RTCRtpScriptTransformer": {
    "docs": "The **`RTCRtpScriptTransformer`** interface of the WebRTC API provides a worker-side Stream API interface that a WebRTC Encoded Transform can use to modify encoded media frames in the incoming and outgoing WebRTC pipelines.\n\n**Note:** This feature is available in Dedicated Web Workers.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpScriptTransformer.",
    "properties": {
      "generatekeyframe": "Requests a video encoder generate a key frame. May be called by a transformer in the sender pipeline when processing outgoing frames.",
      "options": "Options passed from the `RTCRtpScriptTransform` constructor, which are used to configure transform code based on whether incoming or outgoing frames are being processed.",
      "readable": "A `ReadableStream` on which encoded frames from the WebRTC sender or receiver pipelines may be enqueued.",
      "sendkeyframerequest": "Requests the sender send a key frame. May be called by a transformer in the receiver pipeline when processing incoming encoded video frames.",
      "writable": "A `WritableStream` that encoded frames should be piped to."
    }
  },
  "RTCRtpSender": {
    "docs": "The **`RTCRtpSender`** interface provides the ability to control and obtain details about how a particular `MediaStreamTrack` is encoded and sent to a remote peer.\n\nWith it, you can configure the encoding used for the corresponding track, get information about the device's media capabilities, and so forth. You can also obtain access to an `RTCDTMFSender` which can be used to send DTMF codes (to simulate the user pressing buttons on a telephone's dial pad) to the remote peer.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender.",
    "properties": {
      "dtmf": "An `RTCDTMFSender` which can be used to send DTMF tones using `telephone-event` payloads on the RTP session represented by the `RTCRtpSender` object. If `null`, the track and/or the connection doesn't support DTMF. Only audio tracks can support DTMF.",
      "getcapabilities": "Returns an object describing the system's capabilities for sending a specified kind of media data.",
      "getparameters": "Returns an object describing the current configuration for the encoding and transmission of media on the `track`.",
      "getstats": "Returns a `Promise` which is fulfilled with a `RTCStatsReport` which provides statistics data for all outbound streams being sent using this `RTCRtpSender`.",
      "replacetrack": "Attempts to replace the track currently being sent by the `RTCRtpSender` with another track, without performing renegotiation. This method can be used, for example, to toggle between the front- and rear-facing cameras on a device.",
      "setparameters": "Applies changes to parameters which configure how the `track` is encoded and transmitted to the remote peer.",
      "setstreams": "Sets the `MediaStream`(s) associated with the `track` being transmitted by this sender.",
      "track": "The `MediaStreamTrack` which is being handled by the `RTCRtpSender`. If `track` is `null`, the `RTCRtpSender` doesn't transmit anything.",
      "transform": "An `RTCRtpScriptTransform` is used to insert a transform stream (`TransformStream`) running in a worker thread into the sender pipeline, allowing stream transforms to be applied to encoded video and audio frames after they are output by a codec, and before they are sent.",
      "transport": "The `RTCDtlsTransport` over which the sender is exchanging the RTP and RTCP packets used to manage transmission of media and control data. This value is `null` until the transport is established. When bundling is in use, more than transceiver may be sharing the same transport object."
    }
  },
  "RTCSessionDescription": {
    "docs": "The **`RTCSessionDescription`** interface describes one end of a connectionâor potential connectionâand how it's configured. Each `RTCSessionDescription` consists of a description `type` indicating which part of the offer/answer negotiation process it describes and of the SDP descriptor of the session.\n\nThe process of negotiating a connection between two peers involves exchanging `RTCSessionDescription` objects back and forth, with each description suggesting one combination of connection configuration options that the sender of the description supports. Once the two peers agree upon a configuration for the connection, negotiation is complete.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/RTCSessionDescription.",
    "properties": {
      "sdp": "A string containing the SDP describing the session.",
      "tojson": "Returns a JSON description of the object. The values of both properties, `type` and `sdp`, are contained in the generated JSON.",
      "type": "An enum describing the session description's type."
    }
  },
  "RTCPeerConnectionIceErrorEvent": {
    "docs": "The **`RTCPeerConnectionIceErrorEvent`** interfaceâbased upon the `Event` interfaceâprovides details pertaining to an ICE error announced by sending an `icecandidateerror` event to the `RTCPeerConnection` object.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnectionIceErrorEvent."
  },
  "RTCStatsReport": {
    "docs": "The **`RTCStatsReport`** interface of the WebRTC API provides a statistics report for a `RTCPeerConnection`, `RTCRtpSender`, or `RTCRtpReceiver`.\n\nAn `RTCStatsReport` instance is a read-only `Map`-like object, in which each key is an identifier for an object for which statistics are being reported, and the corresponding value is a dictionary object providing the statistics.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/RTCStatsReport.",
    "properties": {
      "entries": "Returns a new Iterator object that contains a two-member array of `[id, statistic-dictionary]` for each element in the `RTCStatsReport` object, in insertion order.",
      "foreach": "Calls `callbackFn` once for each key-value pair present in the `RTCStatsReport` object, in insertion order.\n      If a `thisArg` parameter is provided to `forEach`, it will be used as the `this` value for each callback.",
      "get": "Returns the statistics dictionary associated with the passed `id`, or `undefined` if there is none.",
      "has": "Returns a boolean indicating whether the `RTCStatsReport` contains a statistics dictionary associated with the specified `id`.",
      "iterator": "Returns a new Iterator object that contains a two-member array of `[id, statistic-dictionary]` for each element in the `RTCStatsReport` object, in insertion order.",
      "keys": "Returns a new Iterator object that contains the keys (IDs) for each element in the `RTCStatsReport` object, in insertion order.",
      "size": "Returns the number of items in the `RTCStatsReport` object.",
      "values": "Returns a new Iterator object that contains the values (statistics object) for each element in the `RTCStatsReport` object, in insertion order."
    }
  },
  "RTCRtpStreamStats": {
    "docs": "The `RTCRtpStreamStats` dictionary is returned by the `RTCPeerConnection.getStats()`, `RTCRtpSender.getStats()`, and `RTCRtpReceiver.getStats()` methods to provide detailed statistics about WebRTC connectivity.\n\nWhile the dictionary has a base set of properties that are present in each of these cases, there are also additional properties added depending on which interface the method is called on.\n\n`RTCRtpStreamStats` is the base class for all RTP-related statistics reports.\n\n**Note:** This interface was called `RTCRTPStreamStats` until a specification update in the spring of 2017.\n    Check the Browser compatibility table to know if and when the name change was implemented in specific browsers.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpStreamStats."
  },
  "RTCTransformEvent": {
    "docs": "The **`RTCTransformEvent`** of the WebRTC API represent an event that is fired in a dedicated worker when an encoded frame has been queued for processing by a WebRTC Encoded Transform.\n\nThe interface has a `transformer` property that exposes a readable stream and a writable stream.\n  A worker should read encoded frames from `transformer.readable`, modify them as needed, and write them to `transformer.writable` in the same order and without any duplication.\n\nAt time of writing there is just one event based on `RTCTransformEvent`: `rtctransform`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/RTCTransformEvent.",
    "properties": {
      "transformer": "Returns the `RTCRtpScriptTransformer` associated with the event."
    }
  },
  "RTCTransportStats": {
    "docs": "The **`RTCTransportStats`** dictionary of the WebRTC API provides information about the transport (`RTCDtlsTransport` and its underlying `RTCIceTransport`) used by a particular candidate pair.\n\nThe BUNDLE feature is an SDP extension that allows negotiation to use a single transport for sending and receiving media described by multiple SDP media descriptions.\n  If the remote endpoint is aware of this feature, all `MediaStreamTrack` and data channels are bundled onto a single transport at the completion of negotiation.\n  This is true for current browsers, but if connecting to an older endpoint that is not BUNDLE-aware, then separate transports might be used for different media.\n  The policy to use in the negotiation is configured in the `RTCPeerConnection` constructor.\n\nThese statistics can be obtained by iterating the `RTCStatsReport` returned by `RTCPeerConnection.getStats()` until you find a report with the `type` of `transport`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/RTCTransportStats."
  },
  "RTCRtpTransceiver": {
    "docs": "The WebRTC interface **`RTCRtpTransceiver`** describes a permanent pairing of an `RTCRtpSender` and an `RTCRtpReceiver`, along with some shared state.\n\nEach SDP media section describes one bidirectional SRTP (\"Secure Real Time Protocol\") stream (excepting the media section for `RTCDataChannel`, if present).\n  This pairing of send and receive SRTP streams is significant for some applications, so `RTCRtpTransceiver` is used to represent this pairing, along with other important state from the media section.\n  Each non-disabled SRTP media section is always represented by exactly one transceiver.\n\nA transceiver is uniquely identified using its `mid` property, which is the same as the media ID (`mid`) of its corresponding m-line. An `RTCRtpTransceiver` is **associated** with an m-line if its `mid` is non-null; otherwise it's considered disassociated.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpTransceiver."
  },
  "Range": {
    "docs": "The **`Range`** interface represents a fragment of a document that can contain nodes and parts of text nodes.\n\nA range can be created by using the `Document.createRange()` method. Range objects can also be retrieved by using the `getRangeAt()` method of the `Selection` object or the `caretRangeFromPoint()` method of the `Document` object.\n\nThere also is the `Range()` constructor available.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Range.",
    "properties": {
      "clonecontents": "Returns a `DocumentFragment` copying the nodes of a `Range`.",
      "clonerange": "Returns a `Range` object with boundary points identical to the cloned `Range`.",
      "collapse": "Collapses the `Range` to one of its boundary points.",
      "collapsed": "Returns a boolean value indicating whether the range's start and end points are at the same position.",
      "commonancestorcontainer": "Returns the deepest `Node` that contains the `startContainer` and `endContainer` nodes.",
      "compareboundarypoints": "Compares the boundary points of the `Range` with another `Range`.",
      "comparenode": "Returns a constant representing whether the `Node` is before, after, inside, or surrounding the range.",
      "comparepoint": "Returns -1, 0, or 1 indicating whether the point occurs before, inside, or after the `Range`.",
      "createcontextualfragment": "Returns a `DocumentFragment` created from a given string of code.",
      "deletecontents": "Removes the contents of a `Range` from the `Document`.",
      "detach": "Does nothing. Kept for compatibility.",
      "endcontainer": "Returns the `Node` within which the `Range` ends.",
      "endoffset": "Returns a number representing where in the `endContainer` the `Range` ends.",
      "extractcontents": "Moves contents of a `Range` from the document tree into a `DocumentFragment`.",
      "getboundingclientrect": "Returns a `DOMRect` object which bounds the entire contents of the `Range`; this would be the union of all the rectangles returned by `range.getClientRects()`.",
      "getclientrects": "Returns a list of `DOMRect` objects that aggregates the results of `Element.getClientRects()` for all the elements in the `Range`.",
      "insertnode": "Insert a `Node` at the start of a `Range`.",
      "intersectsnode": "Returns a `boolean` indicating whether the given node intersects the `Range`.",
      "ispointinrange": "Returns a `boolean` indicating whether the given point is in the `Range`.",
      "selectnode": "Sets the `Range` to contain the `Node` and its contents.",
      "selectnodecontents": "Sets the `Range` to contain the contents of a `Node`.",
      "setend": "Sets the end position of a `Range`.",
      "setendafter": "Sets the end position of a `Range` relative to another `Node`.",
      "setendbefore": "Sets the end position of a `Range` relative to another `Node`.",
      "setstart": "Sets the start position of a `Range`.",
      "setstartafter": "Sets the start position of a `Range` relative to another `Node`.",
      "setstartbefore": "Sets the start position of a `Range` relative to another `Node`.",
      "startcontainer": "Returns the `Node` within which the `Range` starts.",
      "startoffset": "Returns a number representing where in the `startContainer` the `Range` starts.",
      "surroundcontents": "Moves content of a `Range` into a new `Node`.",
      "tostring": "Returns the text of the `Range`."
    }
  },
  "ReadableStream": {
    "docs": "The `ReadableStream` interface of the Streams API represents a readable stream of byte data. The Fetch API offers a concrete instance of a `ReadableStream` through the `body` property of a `Response` object.\n\n`ReadableStream` is a transferable object.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream.",
    "properties": {
      "cancel": "Returns a `Promise` that resolves when the stream is canceled. Calling this method signals a loss of interest in the stream by a consumer. The supplied `reason` argument will be given to the underlying source, which may or may not use it.",
      "from": "Returns `ReadableStream` from a provided iterable or async iterable object, such as an array, a set, an async generator, and so on.",
      "getreader": "Creates a reader and locks the stream to it. While the stream is locked, no other reader can be acquired until this one is released.",
      "locked": "Returns a boolean indicating whether or not the readable stream is locked to a reader.",
      "pipethrough": "Provides a chainable way of piping the current stream through a transform stream or any other writable/readable pair.",
      "pipeto": "Pipes the current ReadableStream to a given `WritableStream` and returns a `Promise` that fulfills when the piping process completes successfully, or rejects if any errors were encountered.",
      "tee": "The `tee` method [tees](https://streams.spec.whatwg.org/#tee-a-readable-stream) this readable stream, returning a two-element array containing the two resulting branches as new `ReadableStream` instances. Each of those streams receives the same incoming data."
    }
  },
  "RTCSctpTransport": {
    "docs": "The **`RTCSctpTransport`** interface provides information which describes a Stream Control Transmission Protocol (**SCTP**) transport. This provides information about limitations of the transport, but also provides a way to access the underlying Datagram Transport Layer Security (**DTLS**) transport over which SCTP packets for all of an `RTCPeerConnection`'s data channels are sent and received.\n\nYou don't create `RTCSctpTransport` objects yourself; instead, you get access to the `RTCSctpTransport` for a given `RTCPeerConnection` through its **`sctp`** property.\n\nPossibly the most useful property on this interface is its `maxMessageSize` property, which you can use to determine the upper limit on the size of messages you can send over a data channel on the peer connection.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/RTCSctpTransport.",
    "properties": {
      "maxchannels": "An integer value indicating the maximum number of `RTCDataChannel` objects that can be opened simultaneously.",
      "maxmessagesize": "An integer value indicating the maximum size, in bytes, of a message which can be sent using the `RTCDataChannel.send()` method.",
      "state": "A string enumerated value indicating the state of the SCTP transport.",
      "transport": "An `RTCDtlsTransport` object representing the DTLS transport used for the transmission and receipt of data packets."
    }
  },
  "RTCTrackEvent": {
    "docs": "The WebRTC API interface **`RTCTrackEvent`** represents the `track` event, which is sent when a new `MediaStreamTrack` is added to an `RTCRtpReceiver` which is part of the `RTCPeerConnection`.\n\nThe target is the `RTCPeerConnection` object to which the track is being added.\n\nThis event is sent by the WebRTC layer to the website or application, so you will not typically need to instantiate an `RTCTrackEvent` yourself.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/RTCTrackEvent."
  },
  "ReadableStreamDefaultReader": {
    "docs": "The **`ReadableStreamDefaultReader`** interface of the Streams API represents a default reader that can be used to read stream data supplied from a network (such as a fetch request).\n\nA `ReadableStreamDefaultReader` can be used to read from a `ReadableStream` that has an underlying source of any type (unlike a `ReadableStreamBYOBReader`, which can only be used with readable streams that have an underlying byte source).\n\nNote however that zero-copy transfer from an underlying source is only supported for underlying byte sources that autoallocate buffers.\n  In other words, the stream must have been constructed specifying both `type=\"bytes\"` and `autoAllocateChunkSize`.\n  For any other underlying source, the stream will always satisfy read requests with data from internal queues.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamDefaultReader.",
    "properties": {
      "cancel": "Returns a `Promise` that resolves when the stream is canceled. Calling this method signals a loss of interest in the stream by a consumer. The supplied `reason` argument will be given to the underlying source, which may or may not use it.",
      "closed": "Returns a `Promise` that fulfills when the stream closes, or rejects if the stream throws an error or the reader's lock is released. This property enables you to write code that responds to an end to the streaming process.",
      "read": "Returns a promise providing access to the next chunk in the stream's internal queue.",
      "releaselock": "Releases the reader's lock on the stream."
    }
  },
  "RadioNodeList": {
    "docs": "The **`RadioNodeList`** interface represents a collection of elements in a `<form>` or a `<fieldset>` element, returned by a call to `HTMLFormControlsCollection.namedItem()`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/RadioNodeList.",
    "properties": {
      "value": "If the underlying element collection contains radio buttons, the `value` property represents the checked radio button. On retrieving the `value` property, the `value` of the currently `checked` radio button is returned as a string. If the collection does not contain any radio buttons or none of the radio buttons in the collection is in `checked` state, the empty string is returned. On setting the `value` property, the first radio button input element whose `value` property is equal to the new value will be set to `checked`."
    }
  },
  "ReadableByteStreamController": {
    "docs": "The **`ReadableByteStreamController`** interface of the Streams API represents a controller for a readable byte stream.\n  It allows control of the state and internal queue of a `ReadableStream` with an underlying byte source, and enables efficient zero-copy transfer of data from the underlying source to a consumer when the stream's internal queue is empty.\n\nAn instance of this controller type is created if an `underlyingSource` object with the property `type=\"bytes\"` is passed as an argument to the `ReadableStream()` constructor.\n  The `underlyingSource` object may also define `start()` and `pull()` callback functions.\n  These are called with the controller as a parameter, in order to set up the underlying source, and request data when needed.\n\nThe underlying source uses the controller to supply data to the stream via its `byobRequest` property or `enqueue()` method.\n  `byobRequest` is a `ReadableStreamBYOBRequest` object that represents a pending request from a consumer to make a zero-copy transfer of data direct to a consumer.\n  `byobRequest` must be used to copy data if it exists (do not use `enqueue()` in this case)!\n  If the underlying source needs to pass data to the stream and `byobRequest` is `null` then the source can call `enqueue()` to add the data to the stream's internal queues.\n\nNote that the `byobRequest` is only created in \"BYOB mode\" when there is a request from a reader and the stream's internal queue is empty.\n  \"BYOB mode\" is enabled when using a `ReadableStreamBYOBReader` (typically constructed by calling `ReadableStream.getReader()` with the argument `{ mode: 'byob' }`).\n  It is also enabled when using a default reader and `autoAllocateChunkSize` is specified in the `ReadableController()` constructor.\n\nAn underlying byte source can also use the controller to `close()` the stream when all the data has been sent and report errors from the underlying source using `error()`.\n  The controller's `desiredSize` property is used to apply \"backpressure\", informing the underlying source of the size of the internal queue (small values indicate that the queue is filling up, hinting to the underlying source that it is be desirable to pause or throttle the inflow).\n\nNote that even though the controller is primarily used by the underlying byte source, there is no reason it cannot be stored used by other parts of the system to signal the stream.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ReadableByteStreamController.",
    "properties": {
      "byobrequest": "Returns the current BYOB pull request, or `null` if there no outstanding request.",
      "close": "Closes the associated stream.",
      "desiredsize": "Returns the desired size required to fill the stream's internal queue.",
      "enqueue": "Enqueues a given chunk in the associated stream.",
      "error": "Causes any future interactions with the associated stream to error."
    }
  },
  "RemotePlayback": {
    "docs": "The **`RemotePlayback`** interface of the Remote Playback API allows the page to detect availability of remote playback devices, then connect to and control playing on these devices.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/RemotePlayback.",
    "properties": {
      "cancelwatchavailability": "Cancels the request to monitor the availability of remote playback devices.",
      "prompt": "Prompts the user to select and give permission to connect to a remote playback device.",
      "state": "Represents the `RemotePlayback` connection's state. One of:\n\n| --- | --- |\n| `\"connecting\"` | The user agent is attempting to initiate remote playback with the selected device. |\n| `\"connected\"` | The transition from local to remote playback has happened, all commands will now take place on the remote device. |\n| `\"disconnected\"` | The remote playback has not been initiated, has failed to initiate, or has been stopped. |",
      "watchavailability": "A `Promise` that resolves with a `callbackId` of an available remote playback device."
    }
  },
  "ReadableStreamDefaultController": {
    "docs": "The **`ReadableStreamDefaultController`** interface of the Streams API represents a controller allowing control of a `ReadableStream`'s state and internal queue. Default controllers are for streams that are not byte streams.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamDefaultController.",
    "properties": {
      "close": "Closes the associated stream.",
      "desiredsize": "Returns the desired size required to fill the stream's internal queue.",
      "enqueue": "Enqueues a given chunk in the associated stream.",
      "error": "Causes any future interactions with the associated stream to error."
    }
  },
  "Report": {
    "docs": "The `Report` interface of the Reporting API represents a single report.\n\nReports can be accessed in a number of ways:\n\n- Via the `ReportingObserver.takeRecords()` method â this returns all reports in an observer's report queue, and then empties the queue.\n- Via the `reports` parameter of the callback function passed into the `ReportingObserver()` constructor upon creation of a new observer instance. This contains the list of reports currently contained in the observer's report queue.\n- By sending requests to the endpoints defined via the `Report-To` HTTP header.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Report.",
    "properties": {
      "body": "The body of the report, which is a `ReportBody` object containing the detailed report information.",
      "type": "The type of report generated, e.g. `deprecation` or `intervention`.",
      "url": "The URL of the document that generated the report."
    }
  },
  "ReadableStreamBYOBRequest": {
    "docs": "The **`ReadableStreamBYOBRequest`** interface of the Streams API represents a \"pull request\" for data from an underlying source that will made as a zero-copy transfer to a consumer (bypassing the stream's internal queues).\n\n`ReadableStreamBYOBRequest` objects are created in \"BYOB mode\" when a consumer makes a request for data and the stream's internal queue is empty.\n  (The stream will resolve the consumer's request directly if it already has buffered data).\n  An underlying byte source can access active BYOB requests through its controller's `ReadableByteStreamController.byobRequest` property, which will be set to `null` if there is no outstanding request.\n\nAn underlying source that supports \"BYOB mode\" should check for `ReadableByteStreamController.byobRequest` and must use it for transferring data, if present.\n  If data arrives from the underlying source when `ReadableByteStreamController.byobRequest` is `null`, it can be queued using `ReadableByteStreamController.enqueue()`.\n  This might happen when an underlying push source receives new data when the stream's internal buffers are not empty.\n\nAn underlying source uses the request by writing data to the BYOB request's `view` and then calling `respond()`, or by calling `respondWithNewView()` and passing a new view as an argument.\n  Note that the \"new view\" must actually be a view over the same buffer as the original `view`, starting at the same offset.\n  This might be used to return a shorter buffer if the underlying source is unable to fill the entire original view.\n\nNote that a `ReadableByteStreamController` is only created for underlying sources when `type=\"bytes\"` is specified for the source in the `ReadableStream()` constructor.\n  \"BYOB mode\" is enabled when either `autoAllocateChunkSize` is specified in the `ReadableController()` constructor or when using a `ReadableStreamBYOBReader` (typically constructed by calling `ReadableStream.getReader()` with the argument `{ mode: 'byob' }`).\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamBYOBRequest.",
    "properties": {
      "respond": "Signals the associated readable byte stream that the specified number of bytes were written into the current `view`, which then causes the pending request from the consumer to be resolved.\n      Note that after this method is called the `view` is transferred and no longer modifiable.",
      "respondwithnewview": "Signals to the associated readable byte stream view passed as an argument should be transferred to the consumer of the readable byte stream.\n      This new view must use the same buffer as the original `view`, start at the same offset, and be the same length or shorter.\n      Note that after this method is called the `view` is transferred and no longer modifiable.",
      "view": "Returns the current view.\n      This is a view on a buffer that will be transferred to the consumer when `ReadableStreamBYOBRequest.respond()` is called."
    }
  },
  "Request": {
    "docs": "The **`Request`** interface of the Fetch API represents a resource request.\n\nYou can create a new `Request` object using the `Request()` constructor, but you are more likely to encounter a `Request` object being returned as the result of another API operation, such as a service worker `FetchEvent.request`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Request.",
    "properties": {
      "arraybuffer": "Returns a promise that resolves with an `ArrayBuffer` representation of the request body.",
      "blob": "Returns a promise that resolves with a `Blob` representation of the request body.",
      "body": "A `ReadableStream` of the body contents.",
      "bodyused": "Stores `true` or `false` to indicate whether or not the body has been used in a request yet.",
      "cache": "Contains the cache mode of the request (e.g., `default`, `reload`, `no-cache`).",
      "clone": "Creates a copy of the current `Request` object.",
      "credentials": "Contains the credentials of the request (e.g., `omit`, `same-origin`, `include`). The default is `same-origin`.",
      "destination": "A string describing the type of content being requested.",
      "formdata": "Returns a promise that resolves with a `FormData` representation of the request body.",
      "headers": "Contains the associated `Headers` object of the request.",
      "integrity": "Contains the subresource integrity value of the request (e.g., `sha256-BpfBw7ivV8q2jLiT13fxDYAe2tJllusRSZ273h2nFSE=`).",
      "json": "Returns a promise that resolves with the result of parsing the request body as `JSON`.",
      "method": "Contains the request's method (`GET`, `POST`, etc.)",
      "mode": "Contains the mode of the request (e.g., `cors`, `no-cors`, `same-origin`, `navigate`.)",
      "redirect": "Contains the mode for how redirects are handled. It may be one of `follow`, `error`, or `manual`.",
      "referrer": "Contains the referrer of the request (e.g., `client`).",
      "referrerpolicy": "Contains the referrer policy of the request (e.g., `no-referrer`).",
      "signal": "Returns the `AbortSignal` associated with the request",
      "text": "Returns a promise that resolves with a text representation of the request body.",
      "url": "Contains the URL of the request."
    }
  },
  "ReportBody": {
    "docs": "The **`ReportBody`** interface of the Reporting API represents the body of a report. Individual report types inherit from this interface, adding specific attributes relevant to the particular report.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ReportBody.",
    "properties": {
      "tojson": "A serializer which returns a JSON representation of the `ReportBody` object."
    }
  },
  "ResizeObserver": {
    "docs": "The **`ResizeObserver`** interface reports changes to the dimensions of an `Element`'s content or border box, or the bounding box of an `SVGElement`.\n\n**Note:** The content box is the box in which content can be placed, meaning the border box minus the padding and border width. The border box encompasses the content, padding, and border. See The box model for further explanation.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver.",
    "properties": {
      "disconnect": "Unobserves all observed `Element` targets of a particular observer.",
      "observe": "Initiates the observing of a specified `Element`.",
      "unobserve": "Ends the observing of a specified `Element`."
    }
  },
  "ReadableStreamBYOBReader": {
    "docs": "The `ReadableStreamBYOBReader` interface of the Streams API defines a reader for a `ReadableStream` that supports zero-copy reading from an underlying byte source.\n  It is used for efficient copying from underlying sources where the data is delivered as an \"anonymous\" sequence of bytes, such as files.\n\nAn instance of this reader type should usually be obtained by calling `ReadableStream.getReader()` on the stream, specifying `mode: \"byob\"` in the options parameter.\n  The readable stream must have an underlying byte source. In other words, it must have been constructed specifying an underlying source with `type: \"bytes\"`).\n\nUsing this kind of reader, a `read()` request when the readable stream's internal queues are empty will result in a zero copy transfer from the underlying source (bypassing the stream's internal queues).\n  If the internal queues are not empty, a `read()` will satisfy the request from the buffered data.\n\nNote that the methods and properties are similar to those for the default reader (`ReadableStreamDefaultReader`).\n  The `read()` method differs in that it provide a view into which data should be written.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamBYOBReader.",
    "properties": {
      "cancel": "Returns a `Promise` that resolves when the stream is canceled. Calling this method signals a loss of interest in the stream by a consumer. The supplied `reason` argument will be given to the underlying source, which may or may not use it.",
      "closed": "Returns a `Promise` that fulfills when the stream closes, or rejects if the stream throws an error or the reader's lock is released. This property enables you to write code that responds to an end to the streaming process.",
      "read": "Passes a view into which data must be written, and returns a `Promise` that resolves with the next chunk in the stream or rejects with an indication that the stream is closed or has errored.",
      "releaselock": "Releases the reader's lock on the stream."
    }
  },
  "ResizeObserverEntry": {
    "docs": "The **`ResizeObserverEntry`** interface represents the object passed to the `ResizeObserver()` constructor's callback function, which allows you to access the new dimensions of the `Element` or `SVGElement` being observed.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserverEntry.",
    "properties": {
      "borderboxsize": "An array of objects containing the new border box size of the observed element when the callback is run.",
      "contentboxsize": "An array of objects containing the new content box size of the observed element when the callback is run.",
      "contentrect": "A `DOMRectReadOnly` object containing the new size of the observed element when the callback is run. Note that this is better supported than the above two properties, but it is left over from an earlier implementation of the Resize Observer API, is still included in the spec for web compat reasons, and may be deprecated in future versions.",
      "devicepixelcontentboxsize": "An array of objects containing the new content box size in device pixels of the observed element when the callback is run.",
      "target": "A reference to the `Element` or `SVGElement` being observed."
    }
  },
  "ResizeObserverSize": {
    "docs": "The **`ResizeObserverSize`** interface of the `Resize Observer API` is used by the `ResizeObserverEntry` interface to access the box sizing properties of the element being observed.\n\n**Note:** In multi-column layout, which is a fragmented context, the sizing returned by `ResizeObserverSize` will be the size of the first column.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserverSize.",
    "properties": {
      "blocksize": "The length of the observed element's border box in the block dimension. For boxes with a horizontal `writing-mode`, this is the vertical dimension, or height; if the writing-mode is vertical, this is the horizontal dimension, or width.",
      "inlinesize": "The length of the observed element's border box in the inline dimension. For boxes with a horizontal `writing-mode`, this is the horizontal dimension, or width; if the writing-mode is vertical, this is the vertical dimension, or height."
    }
  },
  "Response": {
    "docs": "The **`Response`** interface of the Fetch API represents the response to a request.\n\nYou can create a new `Response` object using the `Response()` constructor, but you are more likely to encounter a `Response` object being returned as the result of another API operationâfor example, a service worker `FetchEvent.respondWith`, or a simple `fetch()`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Response.",
    "properties": {
      "arraybuffer": "Returns a promise that resolves with an `ArrayBuffer` representation of the response body.",
      "blob": "Returns a promise that resolves with a `Blob` representation of the response body.",
      "body": "A `ReadableStream` of the body contents.",
      "bodyused": "Stores a boolean value that declares whether the body has been used in a response yet.",
      "clone": "Creates a clone of a `Response` object.",
      "error": "Returns a new `Response` object associated with a network error.",
      "formdata": "Returns a promise that resolves with a `FormData` representation of the response body.",
      "headers": "The `Headers` object associated with the response.",
      "json": "Returns a new `Response` object for returning the provided JSON encoded data.",
      "json_2": "Returns a promise that resolves with the result of parsing the response body text as `JSON`.",
      "ok": "A boolean indicating whether the response was successful (status in the range `200` â `299`) or not.",
      "redirect": "Returns a new response with a different URL.",
      "redirected": "Indicates whether or not the response is the result of a redirect (that is, its URL list has more than one entry).",
      "status": "The status code of the response. (This will be `200` for a success).",
      "statustext": "The status message corresponding to the status code. (e.g., `OK` for `200`).",
      "text": "Returns a promise that resolves with a text representation of the response body.",
      "type": "The type of the response (e.g., `basic`, `cors`).",
      "url": "The URL of the response."
    }
  },
  "ReportingObserver": {
    "docs": "The `ReportingObserver` interface of the Reporting API allows you to collect and access reports.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ReportingObserver.",
    "properties": {
      "disconnect": "Stops a reporting observer that had previously started observing from collecting reports.",
      "observe": "Instructs a reporting observer to start collecting reports in its report queue.",
      "takerecords": "Returns the current list of reports contained in the observer's report queue, and empties the queue."
    }
  },
  "RelativeOrientationSensor": {
    "docs": "The **`RelativeOrientationSensor`** interface of the Sensor APIs describes the device's physical orientation without regard to the Earth's reference coordinate system.\n\nTo use this sensor, the user must grant permission to the `'accelerometer'`, and `'gyroscope'` device sensors through the Permissions API. In addition, this feature may be blocked by a Permissions Policy set on your server.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/RelativeOrientationSensor."
  },
  "RsaHashedImportParams": {
    "docs": "The **`RsaHashedImportParams`** dictionary of the Web Crypto API represents the object that should be passed as the `algorithm` parameter into `SubtleCrypto.importKey()` or `SubtleCrypto.unwrapKey()`, when importing any RSA-based key pair: that is, when the algorithm is identified as any of RSASSA-PKCS1-v1_5, RSA-PSS, or RSA-OAEP.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/RsaHashedImportParams."
  },
  "RsaOaepParams": {
    "docs": "The **`RsaOaepParams`** dictionary of the Web Crypto API represents the object that should be passed as the `algorithm` parameter into `SubtleCrypto.encrypt()`, `SubtleCrypto.decrypt()`, `SubtleCrypto.wrapKey()`, or `SubtleCrypto.unwrapKey()`, when using the RSA_OAEP algorithm.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/RsaOaepParams."
  },
  "SVGAElement": {
    "docs": "The **`SVGAElement`** interface provides access to the properties of an `<a>` element, as well as methods to manipulate them.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGAElement.",
    "properties": {
      "download": "See `HTMLAnchorElement.download`.",
      "href": "An `SVGAnimatedString` that reflects the `href` or `xlink:href` \n  Deprecated\n attribute.",
      "hreflang": "A string that reflects the `hreflang` attribute, indicating the language of the linked resource.",
      "ping": "A string that reflects the ping attribute, containing a space-separated list of URLs to which, when the hyperlink is followed, `POST` requests with the body `PING` will be sent by the browser (in the background). Typically used for tracking.",
      "referrerpolicy": "See `HTMLAnchorElement.referrerPolicy`.",
      "rel": "See `HTMLAnchorElement.rel`.",
      "rellist": "See `HTMLAnchorElement.relList`.",
      "target": "It corresponds to the `target` attribute of the given element.",
      "text": "A string being a synonym for the `Node.textContent` property.",
      "type": "A string that reflects the `type` attribute, indicating the MIME type of the linked resource."
    }
  },
  "SVGAnimateColorElement": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe **`SVGAnimateColorElement`** interface corresponds to the `<animateColor>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimateColorElement."
  },
  "SVGAngle": {
    "docs": "The `SVGAngle` interface is used to represent a value that can be an `<angle>` or `<number>` value. An `SVGAngle` reflected through the `animVal` attribute is always read only.\n\nAn `SVGAngle` object can be designated as read only, which means that attempts to modify the object will result in an exception being thrown.\n\nAn `SVGAngle` object can be associated with a particular element. The associated element is used to determine which element's content attribute to update if the object reflects an attribute. Unless otherwise described, an `SVGAngle` object is not associated with any element.\n\nEvery `SVGAngle` object operates in one of two modes:\n\n- **Reflect the base value** of a reflected animatable attribute (being exposed through the `baseVal` member of an `SVGAnimatedAngle`),\n- **Be detached,** which is the case for `SVGAngle` objects created with `SVGSVGElement.createSVGAngle()`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGAngle."
  },
  "RsaPssParams": {
    "docs": "The **`RsaPssParams`** dictionary of the Web Crypto API represents the object that should be passed as the `algorithm` parameter into `SubtleCrypto.sign()` or `SubtleCrypto.verify()`, when using the RSA-PSS algorithm.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/RsaPssParams."
  },
  "SVGAnimateTransformElement": {
    "docs": "The `SVGAnimateTransformElement` interface corresponds to the `<animateTransform>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimateTransformElement."
  },
  "SVGAnimatedAngle": {
    "docs": "The `SVGAnimatedAngle` interface is used for attributes of basic type <angle> which can be animated.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedAngle."
  },
  "SVGAnimatedBoolean": {
    "docs": "The `SVGAnimatedBoolean` interface is used for attributes of type boolean which can be animated.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedBoolean."
  },
  "SVGAnimatedEnumeration": {
    "docs": "The **`SVGAnimatedEnumeration`** interface describes attribute values which are constants from a particular enumeration and which can be animated.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedEnumeration."
  },
  "SVGAnimatedInteger": {
    "docs": "The `SVGAnimatedInteger` interface is used for attributes of basic type <integer> which can be animated.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedInteger."
  },
  "SVGAnimatedLength": {
    "docs": "The **`SVGAnimatedLength`** interface represents attributes of type <length> which can be animated.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedLength."
  },
  "RsaHashedKeyGenParams": {
    "docs": "The **`RsaHashedKeyGenParams`** dictionary of the Web Crypto API represents the object that should be passed as the `algorithm` parameter into `SubtleCrypto.generateKey()`, when generating any RSA-based key pair: that is, when the algorithm is identified as any of RSASSA-PKCS1-v1_5, RSA-PSS, or RSA-OAEP.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/RsaHashedKeyGenParams."
  },
  "SVGAnimatedLengthList": {
    "docs": "The `SVGAnimatedLengthList` interface is used for attributes of type `SVGLengthList` which can be animated.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedLengthList."
  },
  "SVGAnimatedNumber": {
    "docs": "The `SVGAnimatedNumber` interface is used for attributes of basic type <Number> which can be animated.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedNumber."
  },
  "SVGAnimatedNumberList": {
    "docs": "The `SVGAnimatedNumber` interface is used for attributes which take a list of numbers and which can be animated.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedNumberList.",
    "properties": {
      "animval": "A read only `SVGNumberList` that represents the current animated value of the given attribute. If the given attribute is not currently being animated, then the `SVGNumberList` will have the same contents as `baseVal`. The object referenced by `animVal` will always be distinct from the one referenced by `baseVal`, even when the attribute is not animated.",
      "baseval": "A `SVGNumberList` that represents the base value of the given attribute before applying any animations."
    }
  },
  "SVGAnimatedPreserveAspectRatio": {
    "docs": "The `SVGAnimatedPreserveAspectRatio` interface is used for attributes of type `SVGPreserveAspectRatio` which can be animated.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedPreserveAspectRatio.",
    "properties": {
      "animval": "A `SVGPreserveAspectRatio` that represents the current animated value of the given attribute. If the given attribute is not currently being animated, then the `SVGPreserveAspectRatio` will have the same contents as `baseVal`. The object referenced by `animVal` is always distinct from the one referenced by `baseVal`, even when the attribute is not animated.",
      "baseval": "A `SVGPreserveAspectRatio` that represents the base value of the given attribute before applying any animations."
    }
  },
  "SVGAnimateElement": {
    "docs": "The **`SVGAnimateElement`** interface corresponds to the `<animate>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimateElement."
  },
  "SVGAnimatedString": {
    "docs": "The **`SVGAnimatedString`** interface represents string attributes which can be animated from each SVG declaration. You need to create SVG attribute before doing anything else, everything should be declared inside this.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedString.",
    "properties": {
      "animval": "This is a string representing the animation value. If the given attribute or property is being animated it contains the current animated value of the attribute or property. If the given attribute or property is not currently being animated, it contains the same value as baseVal.",
      "baseval": "This is a string representing the base value. The base value of the given attribute before applying any animations. Setter throws DOMException."
    }
  },
  "SVGAnimatedRect": {
    "docs": "The `SVGAnimatedRect` interface is used for attributes of basic `SVGRect` which can be animated.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedRect."
  },
  "SVGAnimatedTransformList": {
    "docs": "The `SVGAnimatedTransformList` interface is used for attributes which take a list of numbers and which can be animated.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedTransformList."
  },
  "SVGAnimateMotionElement": {
    "docs": "The **`SVGAnimateMotionElement`** interface corresponds to the `<animateMotion>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimateMotionElement."
  },
  "SVGCircleElement": {
    "docs": "The **`SVGCircleElement`** interface is an interface for the `<circle>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGCircleElement.",
    "properties": {
      "cx": "This property defines the x-coordinate of the center of the `<circle>` element. It is denoted by the `cx` attribute of the element.",
      "cy": "This property defines the y-coordinate of the center of the `<circle>` element. It is denoted by the `cy` attribute of the element.",
      "r": "This property defines the radius of the `<circle>` element. It is denoted by the `r` of the element."
    }
  },
  "SVGClipPathElement": {
    "docs": "The **`SVGClipPathElement`** interface provides access to the properties of `<clipPath>` elements, as well as methods to manipulate them.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGClipPathElement.",
    "properties": {
      "clippathunits": "Returns an `SVGAnimatedEnumeration` corresponding to the `clipPathUnits` attribute of the associated `<clipPath>` element. Takes one of the constants defined in `SVGUnitTypes`.",
      "transform": "Returns an `SVGAnimatedTransformList` corresponding to the `transform` attribute of the associated `<clipPath>` element."
    }
  },
  "SVGComponentTransferFunctionElement": {
    "docs": "The **`SVGComponentTransferFunctionElement`** interface defines a base interface used by the component transfer function interfaces.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGComponentTransferFunctionElement.",
    "properties": {
      "amplitude": "An `SVGAnimatedNumber` corresponding to the `amplitude` attribute of the given element.",
      "exponent": "An `SVGAnimatedNumber` corresponding to the `exponent` attribute of the given element.",
      "intercept": "An `SVGAnimatedNumber` corresponding to the `intercept` attribute of the given element.",
      "offset": "An `SVGAnimatedNumber` corresponding to the `offset` attribute of the given element.",
      "slope": "An `SVGAnimatedNumber` corresponding to the `slope` attribute of the given element.",
      "tablevalues": "An `SVGAnimatedNumberList` corresponding to the `tableValues` attribute of the given element.",
      "type": "An `SVGAnimatedEnumeration` corresponding to the `type` attribute of the given element. It takes one of the `SVG_FECOMPONENTTRANSFER_TYPE_*` constants defined on this interface."
    }
  },
  "SVGDefsElement": {
    "docs": "The **`SVGDefsElement`** interface corresponds to the `<defs>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGDefsElement."
  },
  "SVGEllipseElement": {
    "docs": "The **`SVGEllipseElement`** interface provides access to the properties of `<ellipse>` elements.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGEllipseElement.",
    "properties": {
      "cx": "This property returns a `SVGAnimatedLength` reflecting the `cx` attribute of the given `<ellipse>` element.",
      "cy": "This property returns a `SVGAnimatedLength` reflecting the `cy` attribute of the given `<ellipse>` element.",
      "rx": "This property returns a `SVGAnimatedLength` reflecting the `rx` attribute of the given `<ellipse>` element.",
      "ry": "This property returns a `SVGAnimatedLength` reflecting the `ry` attribute of the given `<ellipse>` element."
    }
  },
  "SVGElement": {
    "docs": "All of the SVG DOM interfaces that correspond directly to elements in the SVG language derive from the `SVGElement` interface.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGElement.",
    "properties": {
      "attributestylemap": "A `StylePropertyMap` representing the declarations of the element's `style` attribute.",
      "classname": "An `SVGAnimatedString` that reflects the value of the `class` attribute on the given element, or the empty string if `class` is not present. This attribute is deprecated and may be removed in a future version of this specification. Authors are advised to use `Element.classList` instead.",
      "nonce": "Returns the cryptographic number used once that is used by Content Security Policy to determine whether a given fetch will be allowed to proceed.",
      "ownersvgelement": "An `SVGSVGElement` referring to the nearest ancestor `<svg>` element. `null` if the given element is the outermost `<svg>` element.",
      "style": "A `CSSStyleDeclaration` representing the declarations of the element's `style` attribute.",
      "tabindex": "The position of the element in the tabbing order.",
      "viewportelement": "The `SVGElement` which established the current viewport. Often the nearest ancestor `<svg>` element. `null` if the given element is the outermost `<svg>` element."
    }
  },
  "SVGFEBlendElement": {
    "docs": "The **`SVGFEBlendElement`** interface corresponds to the `<feBlend>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGFEBlendElement.",
    "properties": {
      "height": "An `SVGAnimatedLength` corresponding to the `height` attribute of the given element.",
      "in1": "An `SVGAnimatedString` corresponding to the `in` attribute of the given element.",
      "in2": "An `SVGAnimatedString` corresponding to the `in2` attribute of the given element.",
      "mode": "An `SVGAnimatedEnumeration` corresponding to the `mode` attribute of the given element. It takes one of the `SVG_FEBLEND_MODE_*` constants defined on this interface.",
      "result": "An `SVGAnimatedString` corresponding to the `result` attribute of the given element.",
      "width": "An `SVGAnimatedLength` corresponding to the `width` attribute of the given element.",
      "x": "An `SVGAnimatedLength` corresponding to the `x` attribute of the given element.",
      "y": "An `SVGAnimatedLength` corresponding to the `y` attribute of the given element."
    }
  },
  "SVGAnimationElement": {
    "docs": "The **`SVGAnimationElement`** interface is the base interface for all of the animation element interfaces: `SVGAnimateElement`, `SVGSetElement`, `SVGAnimateColorElement`, `SVGAnimateMotionElement` and `SVGAnimateTransformElement`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimationElement.",
    "properties": {
      "beginelement": "Creates a begin instance time for the current time. The new instance time is added to the begin instance times list. The behavior of this method is equivalent to `beginElementAt(0)`.",
      "beginelementat": "Creates a begin instance time for the current time plus the specified offset. The new instance time is added to the begin instance times list.",
      "endelement": "Creates an end instance time for the current time. The new instance time is added to the end instance times list. The behavior of this method is equivalent to `endElementAt(0)`.",
      "endelementat": "Creates an end instance time for the current time plus the specified offset. The new instance time is added to the end instance times list.",
      "getcurrenttime": "Returns a float representing the current time in seconds relative to time zero for the given time container.",
      "getsimpleduration": "Returns a float representing the number of seconds for the simple duration for this animation. If the simple duration is undefined (e.g., the end time is indefinite), then a `DOMException` with code `NOT_SUPPORTED_ERR` is raised.",
      "getstarttime": "Returns a float representing the begin time, in seconds, for this animation element's current interval, if it exists, regardless of whether the interval has begun yet. If there is no current interval, then a `DOMException` with code `INVALID_STATE_ERR` is thrown.",
      "requiredextensions": "An `SVGStringList` reflecting the `requiredExtensions` attribute of the given element.",
      "systemlanguage": "An `SVGStringList` reflecting the `systemLanguage` attribute of the given element.",
      "targetelement": "An `SVGElement` representing the element which is being animated. If no target element is being animated (for example, because the `href` specifies an unknown element) the value returned is `null`."
    }
  },
  "SVGFEColorMatrixElement": {
    "docs": "The **`SVGFEColorMatrixElement`** interface corresponds to the `<feColorMatrix>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGFEColorMatrixElement.",
    "properties": {
      "height": "An `SVGAnimatedLength` corresponding to the `height` attribute of the given element.",
      "in1": "An `SVGAnimatedString` corresponding to the `in` attribute of the given element.",
      "result": "An `SVGAnimatedString` corresponding to the `result` attribute of the given element.",
      "type": "An `SVGAnimatedEnumeration` corresponding to the `type` attribute of the given element. It takes one of the `SVG_FECOLORMATRIX_TYPE_*` constants defined on this interface.",
      "values": "An `SVGAnimatedNumberList` corresponding to the `values` attribute of the given element.",
      "width": "An `SVGAnimatedLength` corresponding to the `width` attribute of the given element.",
      "x": "An `SVGAnimatedLength` corresponding to the `x` attribute of the given element.",
      "y": "An `SVGAnimatedLength` corresponding to the `y` attribute of the given element."
    }
  },
  "SVGDescElement": {
    "docs": "The **`SVGDescElement`** interface corresponds to the `<desc>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGDescElement."
  },
  "SVGFECompositeElement": {
    "docs": "The **`SVGFECompositeElement`** interface corresponds to the `<feComposite>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGFECompositeElement.",
    "properties": {
      "height": "An `SVGAnimatedLength` corresponding to the `height` attribute of the given element.",
      "in1": "An `SVGAnimatedString` corresponding to the `in` attribute of the given element.",
      "result": "An `SVGAnimatedString` corresponding to the `result` attribute of the given element.",
      "type": "An `SVGAnimatedEnumeration` corresponding to the `type` attribute of the given element. It takes one of the `SVG_FECOMPOSITE_OPERATOR_*` constants defined on this interface.",
      "values": "An `SVGAnimatedNumberList` corresponding to the `values` attribute of the given element.",
      "width": "An `SVGAnimatedLength` corresponding to the `width` attribute of the given element.",
      "x": "An `SVGAnimatedLength` corresponding to the `x` attribute of the given element.",
      "y": "An `SVGAnimatedLength` corresponding to the `y` attribute of the given element."
    }
  },
  "SVGFEConvolveMatrixElement": {
    "docs": "The **`SVGFEConvolveMatrixElement`** interface corresponds to the `<feConvolveMatrix>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGFEConvolveMatrixElement.",
    "properties": {
      "bias": "An `SVGAnimatedNumber` corresponding to the `bias` attribute of the given element.",
      "divisor": "An `SVGAnimatedNumber` corresponding to the `divisor` attribute of the given element.",
      "edgemode": "An `SVGAnimatedEnumeration` corresponding to the `edgeMode` attribute of the given element. Takes one of the `SVG_EDGEMODE_*` constants defined on this interface.",
      "height": "An `SVGAnimatedLength` corresponding to the `height` attribute of the given element.",
      "in1": "An `SVGAnimatedString` corresponding to the `in` attribute of the given element.",
      "kernelmatrix": "An `SVGAnimatedNumberList` corresponding to the `kernelMatrix` attribute of the given element.",
      "kernelunitlengthx": "An `SVGAnimatedNumber` corresponding to the `kernelUnitLength` attribute of the given element.",
      "kernelunitlengthy": "An `SVGAnimatedNumber` corresponding to the `kernelUnitLength` attribute of the given element.",
      "orderx": "An `SVGAnimatedInteger` corresponding to the `order` attribute of the given element.",
      "ordery": "An `SVGAnimatedInteger` corresponding to the `order` attribute of the given element.",
      "preservealpha": "An `SVGAnimatedBoolean` corresponding to the `preserveAlpha` attribute of the given element.",
      "result": "An `SVGAnimatedString` corresponding to the `result` attribute of the given element.",
      "targetx": "An `SVGAnimatedInteger` corresponding to the `targetX` attribute of the given element.",
      "targety": "An `SVGAnimatedInteger` corresponding to the `targetY` attribute of the given element.",
      "width": "An `SVGAnimatedLength` corresponding to the `width` attribute of the given element.",
      "x": "An `SVGAnimatedLength` corresponding to the `x` attribute of the given element.",
      "y": "An `SVGAnimatedLength` corresponding to the `y` attribute of the given element."
    }
  },
  "SVGFEDisplacementMapElement": {
    "docs": "The **`SVGFEDisplacementMapElement`** interface corresponds to the `<feDisplacementMap>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGFEDisplacementMapElement.",
    "properties": {
      "height": "An `SVGAnimatedLength` corresponding to the `height` attribute of the given element.",
      "in1": "An `SVGAnimatedString` corresponding to the `in` attribute of the given element.",
      "in2": "An `SVGAnimatedString` corresponding to the `in2` attribute of the given element.",
      "result": "An `SVGAnimatedString` corresponding to the `result` attribute of the given element.",
      "scale": "An `SVGAnimatedNumber` corresponding to the `scale` attribute of the given element.",
      "width": "An `SVGAnimatedLength` corresponding to the `width` attribute of the given element.",
      "x": "An `SVGAnimatedLength` corresponding to the `x` attribute of the given element.",
      "xchannelselector": "An `SVGAnimatedEnumeration` corresponding to the `xChannelSelect` attribute of the given element. It takes one of the `SVG_CHANNEL_*` constants defined on this interface.",
      "y": "An `SVGAnimatedLength` corresponding to the `y` attribute of the given element.",
      "ychannelselector": "An `SVGAnimatedEnumeration` corresponding to the `yChannelSelect` attribute of the given element. It takes one of the `SVG_CHANNEL_*` constants defined on this interface."
    }
  },
  "SVGEvent": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe `SVGEvent` interface represents the event object for most SVG-related events.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGEvent."
  },
  "SVGFEDistantLightElement": {
    "docs": "The **`SVGFEDistantLightElement`** interface corresponds to the `<feDistantLight>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGFEDistantLightElement.",
    "properties": {
      "azimuth": "An `SVGAnimatedNumber` corresponding to the `azimuth` attribute of the given element.",
      "elevation": "An `SVGAnimatedNumber` corresponding to the `elevation` attribute of the given element."
    }
  },
  "SVGCursorElement": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe **`SVGCursorElement`** interface provides access to the properties of `<cursor>` elements, as well as methods to manipulate them.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGCursorElement.",
    "properties": {
      "x": "An `SVGAnimatedLength` corresponding to the `x` attribute of the given `<cursor>` element.",
      "y": "An `SVGAnimatedLength` corresponding to the `y` attribute of the given `<cursor>` element."
    }
  },
  "SVGFEComponentTransferElement": {
    "docs": "The **`SVGFEComponentTransferElement`** interface corresponds to the `<feComponentTransfer>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGFEComponentTransferElement.",
    "properties": {
      "height": "An `SVGAnimatedLength` corresponding to the `height` attribute of the given element.",
      "in1": "An `SVGAnimatedString` corresponding to the `in` attribute of the given element.",
      "result": "An `SVGAnimatedString` corresponding to the `result` attribute of the given element.",
      "width": "An `SVGAnimatedLength` corresponding to the `width` attribute of the given element.",
      "x": "An `SVGAnimatedLength` corresponding to the `x` attribute of the given element.",
      "y": "An `SVGAnimatedLength` corresponding to the `y` attribute of the given element."
    }
  },
  "SVGFEDropShadowElement": {
    "docs": "The **`SVGFEDropShadowElement`** interface corresponds to the `<feDropShadow>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGFEDropShadowElement.",
    "properties": {
      "dx": "An `SVGAnimatedNumber` corresponding to the `dx` attribute of the given element.",
      "dy": "An `SVGAnimatedNumber` corresponding to the `dy` attribute of the given element.",
      "height": "An `SVGAnimatedLength` corresponding to the `height` attribute of the given element.",
      "in1": "An `SVGAnimatedString` corresponding to the `in` attribute of the given element.",
      "result": "An `SVGAnimatedString` corresponding to the `result` attribute of the given element.",
      "setstddeviation": "Sets the values for the `stdDeviation` attribute.",
      "stddeviationx": "An `SVGAnimatedNumber` corresponding to the (possibly automatically computed) X component of the `stdDeviationX` attribute of the given element.",
      "stddeviationy": "An `SVGAnimatedNumber` corresponding to the (possibly automatically computed) Y component of the `stdDeviationY` attribute of the given element.",
      "width": "An `SVGAnimatedLength` corresponding to the `width` attribute of the given element.",
      "x": "An `SVGAnimatedLength` corresponding to the `x` attribute of the given element.",
      "y": "An `SVGAnimatedLength` corresponding to the `y` attribute of the given element."
    }
  },
  "SVGFEFuncBElement": {
    "docs": "The **`SVGFEFuncBElement`** interface corresponds to the `<feFuncB>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGFEFuncBElement."
  },
  "SVGFEFuncRElement": {
    "docs": "The **`SVGFEFuncRElement`** interface corresponds to the `<feFuncR>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGFEFuncRElement."
  },
  "SVGFEFuncGElement": {
    "docs": "The **`SVGFEFuncGElement`** interface corresponds to the `<feFuncG>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGFEFuncGElement."
  },
  "SVGFEFuncAElement": {
    "docs": "The **`SVGFEFuncAElement`** interface corresponds to the `<feFuncA>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGFEFuncAElement."
  },
  "SVGFEGaussianBlurElement": {
    "docs": "The **`SVGFEGaussianBlurElement`** interface corresponds to the `<feGaussianBlur>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGFEGaussianBlurElement.",
    "properties": {
      "edgemode": "An `SVGAnimatedEnumeration` corresponding to the `edgeMode` attribute of the given element. Returns two identical values that are one of the following values:\n\n| --- | --- |\n| `SVG_EDGEMODE_UNKNOWN` (0) | The type is not one of predefined types. It is invalid to attempt to define a new value of this type or to attempt to switch an existing value to this type. |\n| `SVG_EDGEMODE_DUPLICATE` (1) | Corresponds to the `duplicate` value. |\n| `SVG_EDGEMODE_WRAP` (2) | Corresponds to the `wrap` value. |\n| `SVG_EDGEMODE_NONE` (3) | Corresponds to `none` value. |",
      "height": "An `SVGAnimatedLength` corresponding to the `height` attribute of the given element.",
      "in1": "An `SVGAnimatedString` corresponding to the `in` attribute of the given element.",
      "result": "An `SVGAnimatedString` corresponding to the `result` attribute of the given element.",
      "setstddeviation": "Sets the values for the `stdDeviation` attribute.",
      "stddeviationx": "An `SVGAnimatedNumber` corresponding to the (possibly automatically computed) X component of the `stdDeviation` attribute of the given element.",
      "stddeviationy": "An `SVGAnimatedNumber` corresponding to the (possibly automatically computed) Y component of the `stdDeviation` attribute of the given element.",
      "width": "An `SVGAnimatedLength` corresponding to the `width` attribute of the given element.",
      "x": "An `SVGAnimatedLength` corresponding to the `x` attribute of the given element.",
      "y": "An `SVGAnimatedLength` corresponding to the `y` attribute of the given element."
    }
  },
  "SVGFEDiffuseLightingElement": {
    "docs": "The **`SVGFEDiffuseLightingElement`** interface corresponds to the `<feDiffuseLighting>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGFEDiffuseLightingElement.",
    "properties": {
      "diffuseconstant": "An `SVGAnimatedNumber` corresponding to the `diffuseConstant` attribute of the given element.",
      "height": "An `SVGAnimatedLength` corresponding to the `height` attribute of the given element.",
      "in1": "An `SVGAnimatedString` corresponding to the `in` attribute of the given element.",
      "kernelunitlengthx": "An `SVGAnimatedNumber` corresponding to the X component of the `kernelUnitLength` attribute of the given element.",
      "kernelunitlengthy": "An `SVGAnimatedNumber` corresponding to the Y component of the `kernelUnitLength` attribute of the given element.",
      "result": "An `SVGAnimatedString` corresponding to the `result` attribute of the given element.",
      "surfacescale": "An `SVGAnimatedNumber` corresponding to the `surfaceScale` attribute of the given element.",
      "width": "An `SVGAnimatedLength` corresponding to the `width` attribute of the given element.",
      "x": "An `SVGAnimatedLength` corresponding to the `x` attribute of the given element.",
      "y": "An `SVGAnimatedLength` corresponding to the `y` attribute of the given element."
    }
  },
  "SVGFEImageElement": {
    "docs": "The **`SVGFEImageElement`** interface corresponds to the `<feImage>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGFEImageElement.",
    "properties": {
      "crossorigin": "An `SVGAnimatedString` reflects the `crossorigin` attribute of the given element, limited to only known values.",
      "height": "An `SVGAnimatedLength` corresponding to the `height` attribute of the given element.",
      "href": "An `SVGAnimatedString` that reflects the `href` or `xlink:href` \n  Deprecated\n attribute of the given element.",
      "preserveaspectratio": "An `SVGAnimatedPreserveAspectRatio` corresponding to the `preserveAspectRatio` attribute of the given element.",
      "result": "An `SVGAnimatedString` corresponding to the `result` attribute of the given element.",
      "width": "An `SVGAnimatedLength` corresponding to the `width` attribute of the given element.",
      "x": "An `SVGAnimatedLength` corresponding to the `x` attribute of the given element.",
      "y": "An `SVGAnimatedLength` corresponding to the `y` attribute of the given element."
    }
  },
  "SVGFEFloodElement": {
    "docs": "The **`SVGFEFloodElement`** interface corresponds to the `<feFlood>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGFEFloodElement.",
    "properties": {
      "height": "An `SVGAnimatedLength` corresponding to the `height` attribute of the given element.",
      "result": "An `SVGAnimatedString` corresponding to the `result` attribute of the given element.",
      "width": "An `SVGAnimatedLength` corresponding to the `width` attribute of the given element.",
      "x": "An `SVGAnimatedLength` corresponding to the `x` attribute of the given element.",
      "y": "An `SVGAnimatedLength` corresponding to the `y` attribute of the given element."
    }
  },
  "SVGFEMergeElement": {
    "docs": "The **`SVGFEMergeElement`** interface corresponds to the `<feMerge>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGFEMergeElement.",
    "properties": {
      "height": "An `SVGAnimatedLength` corresponding to the `height` attribute of the given element.",
      "result": "An `SVGAnimatedString` corresponding to the `result` attribute of the given element.",
      "width": "An `SVGAnimatedLength` corresponding to the `width` attribute of the given element.",
      "x": "An `SVGAnimatedLength` corresponding to the `x` attribute of the given element.",
      "y": "An `SVGAnimatedLength` corresponding to the `y` attribute of the given element."
    }
  },
  "SVGFEMergeNodeElement": {
    "docs": "The **`SVGFEMergeNodeElement`** interface corresponds to the `<feMergeNode>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGFEMergeNodeElement.",
    "properties": {
      "in1": "An `SVGAnimatedString` corresponding to the `in` attribute of the given element."
    }
  },
  "SVGFEMorphologyElement": {
    "docs": "The **`SVGFEMorphologyElement`** interface corresponds to the `<feMorphology>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGFEMorphologyElement.",
    "properties": {
      "height": "An `SVGAnimatedLength` corresponding to the `height` attribute of the given element.",
      "in1": "An `SVGAnimatedString` corresponding to the `in` attribute of the given element.",
      "operator": "An `SVGAnimatedEnumeration` corresponding to the `operator` attribute of the given element. It takes one of the `SVG_MORPHOLOGY_OPERATOR_*` constants defined on this interface.",
      "radiusx": "An `SVGAnimatedNumber` corresponding to the X component of the `radius` attribute of the given element.",
      "radiusy": "An `SVGAnimatedNumber` corresponding to the Y component of the `radius` attribute of the given element.",
      "result": "An `SVGAnimatedString` corresponding to the `result` attribute of the given element.",
      "width": "An `SVGAnimatedLength` corresponding to the `width` attribute of the given element.",
      "x": "An `SVGAnimatedLength` corresponding to the `x` attribute of the given element.",
      "y": "An `SVGAnimatedLength` corresponding to the `y` attribute of the given element."
    }
  },
  "SVGFEOffsetElement": {
    "docs": "The **`SVGFEOffsetElement`** interface corresponds to the `<feOffset>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGFEOffsetElement.",
    "properties": {
      "dx": "An `SVGAnimatedNumber` corresponding to the `dx` attribute of the given element.",
      "dy": "An `SVGAnimatedNumber` corresponding to the `dy` attribute of the given element.",
      "height": "An `SVGAnimatedLength` corresponding to the `height` attribute of the given element.",
      "in1": "An `SVGAnimatedString` corresponding to the `in` attribute of the given element.",
      "result": "An `SVGAnimatedString` corresponding to the `result` attribute of the given element.",
      "width": "An `SVGAnimatedLength` corresponding to the `width` attribute of the given element.",
      "x": "An `SVGAnimatedLength` corresponding to the `x` attribute of the given element.",
      "y": "An `SVGAnimatedLength` corresponding to the `y` attribute of the given element."
    }
  },
  "SVGFESpotLightElement": {
    "docs": "The **`SVGFESpotLightElement`** interface corresponds to the `<feSpotLight>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGFESpotLightElement.",
    "properties": {
      "limitingconeangle": "An `SVGAnimatedNumber` corresponding to the `limitingConeAngle` attribute of the given element.",
      "pointatx": "An `SVGAnimatedNumber` corresponding to the `pointAtX` attribute of the given element.",
      "pointaty": "An `SVGAnimatedNumber` corresponding to the `pointAtY` attribute of the given element.",
      "pointatz": "An `SVGAnimatedNumber` corresponding to the `pointAtZ` attribute of the given element.",
      "specularexponent": "An `SVGAnimatedNumber` corresponding to the `specularExponent` attribute of the given element.",
      "x": "An `SVGAnimatedNumber` corresponding to the `x` attribute of the given element.",
      "y": "An `SVGAnimatedNumber` corresponding to the `y` attribute of the given element.",
      "z": "An `SVGAnimatedNumber` corresponding to the `z` attribute of the given element."
    }
  },
  "SVGFETileElement": {
    "docs": "The **`SVGFETileElement`** interface corresponds to the `<feTile>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGFETileElement.",
    "properties": {
      "height": "An `SVGAnimatedLength` corresponding to the `height` attribute of the given element.",
      "in1": "An `SVGAnimatedString` corresponding to the `in` attribute of the given element.",
      "result": "An `SVGAnimatedString` corresponding to the `result` attribute of the given element.",
      "width": "An `SVGAnimatedLength` corresponding to the `width` attribute of the given element.",
      "x": "An `SVGAnimatedLength` corresponding to the `x` attribute of the given element.",
      "y": "An `SVGAnimatedLength` corresponding to the `y` attribute of the given element."
    }
  },
  "SVGFETurbulenceElement": {
    "docs": "The **`SVGFETurbulenceElement`** interface corresponds to the `<feTurbulence>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGFETurbulenceElement.",
    "properties": {
      "basefrequencyx": "An `SVGAnimatedNumber` corresponding to the X component of the `baseFrequency` attribute of the given element.",
      "basefrequencyy": "An `SVGAnimatedNumber` corresponding to the Y component of the `baseFrequency` attribute of the given element.",
      "height": "An `SVGAnimatedLength` corresponding to the `height` attribute of the given element.",
      "numoctaves": "An `SVGAnimatedInteger` corresponding to the `numOctaves` attribute of the given element.",
      "result": "An `SVGAnimatedString` corresponding to the `result` attribute of the given element.",
      "seed": "An `SVGAnimatedNumber` corresponding to the `seed` attribute of the given element.",
      "stitchtiles": "An `SVGAnimatedEnumeration` corresponding to the `stitchTiles` attribute of the given element. It takes one of the `SVG_STITCHTYPE_*` constants defined on this interface.",
      "type": "An `SVGAnimatedEnumeration` corresponding to the `type` attribute of the given element. It takes one of the `SVG_TURBULENCE_TYPE_*` constants defined on this interface.",
      "width": "An `SVGAnimatedLength` corresponding to the `width` attribute of the given element.",
      "x": "An `SVGAnimatedLength` corresponding to the `x` attribute of the given element.",
      "y": "An `SVGAnimatedLength` corresponding to the `y` attribute of the given element."
    }
  },
  "SVGFilterElement": {
    "docs": "The **`SVGFilterElement`** interface provides access to the properties of `<filter>` elements, as well as methods to manipulate them.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGFilterElement.",
    "properties": {
      "filterunits": "An `SVGAnimatedEnumeration` that corresponds to the `filterUnits` attribute of the given `<filter>` element. Takes one of the constants defined in `SVGUnitTypes`.",
      "height": "An `SVGAnimatedLength` that corresponds to the `height` attribute of the given `<filter>` element.",
      "href": "An `SVGAnimatedString` that corresponds to the `href` or `xlink:href` \n  Deprecated\n attribute of the given `<filter>` element.",
      "primitiveunits": "An `SVGAnimatedEnumeration` that corresponds to the `primitiveUnits` attribute of the given `<filter>` element. Takes one of the constants defined in `SVGUnitTypes`.",
      "width": "An `SVGAnimatedLength` that corresponds to the `width` attribute of the given `<filter>` element.",
      "x": "An `SVGAnimatedLength` that corresponds to the `x` attribute on the given `<filter>` element.",
      "y": "An `SVGAnimatedLength` that corresponds to the `y` attribute of the given `<filter>` element."
    }
  },
  "SVGFESpecularLightingElement": {
    "docs": "The **`SVGFESpecularLightingElement`** interface corresponds to the `<feSpecularLighting>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGFESpecularLightingElement.",
    "properties": {
      "height": "An `SVGAnimatedLength` corresponding to the `height` attribute of the given element.",
      "in1": "An `SVGAnimatedString` corresponding to the `in` attribute of the given element.",
      "kernelunitlengthx": "An `SVGAnimatedNumber` corresponding to the X component of the `kernelUnitLength` attribute of the given element.",
      "kernelunitlengthy": "An `SVGAnimatedNumber` corresponding to the Y component of the `kernelUnitLength` attribute of the given element.",
      "result": "An `SVGAnimatedString` corresponding to the `result` attribute of the given element.",
      "specularconstant": "An `SVGAnimatedNumber` corresponding to the `specularConstant` attribute of the given element.",
      "specularexponent": "An `SVGAnimatedNumber` corresponding to the `specularExponent` attribute of the given element.",
      "surfacescale": "An `SVGAnimatedNumber` corresponding to the `surfaceScale` attribute of the given element.",
      "width": "An `SVGAnimatedLength` corresponding to the `width` attribute of the given element.",
      "x": "An `SVGAnimatedLength` corresponding to the `x` attribute of the given element.",
      "y": "An `SVGAnimatedLength` corresponding to the `y` attribute of the given element."
    }
  },
  "SVGFontFaceElement": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe **`SVGFontFaceElement`** interface corresponds to the `<font-face>` elements.\n\nObject-oriented access to the attributes of the `<font-face>` element via the SVG DOM is not possible.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGFontFaceElement."
  },
  "SVGFontFaceNameElement": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe **`SVGFontFaceNameElement`** interface corresponds to the `<font-face-name>` elements.\n\nObject-oriented access to the attributes of the `<font-face-name>` element via the SVG DOM is not possible.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGFontFaceNameElement."
  },
  "SVGFontFaceSrcElement": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe **`SVGFontFaceSrcElement`** interface corresponds to the `<font-face-src>` elements.\n\nObject-oriented access to the attributes of the `<font-face-src>` element via the SVG DOM is not possible.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGFontFaceSrcElement."
  },
  "SVGFontFaceUriElement": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe **`SVGFontFaceUriElement`** interface corresponds to the `<font-face-uri>` elements.\n\nObject-oriented access to the attributes of the `<font-face-uri>` element via the SVG DOM is not possible.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGFontFaceUriElement."
  },
  "SVGFontElement": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe **`SVGFontElement`** interface corresponds to the `<font>` elements.\n\nObject-oriented access to the attributes of the `<font>` element via the SVG DOM is not possible.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGFontElement."
  },
  "SVGFontFaceFormatElement": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe **`SVGFontFaceFormatElement`** interface corresponds to the `<font-face-format>` elements.\n\nObject-oriented access to the attributes of the `<font-face-format>` element via the SVG DOM is not possible.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGFontFaceFormatElement."
  },
  "SVGGeometryElement": {
    "docs": "The `SVGGeometryElement` interface represents SVG elements whose rendering is defined by geometry with an equivalent path, and which can be filled and stroked. This includes paths and the basic shapes.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGGeometryElement.",
    "properties": {
      "getpointatlength": "Returns the point at a given distance along the path.",
      "gettotallength": "Returns the user agent's computed value for the total length of the path in user units.",
      "ispointinfill": "Determines whether a given point is within the fill shape of an element. Normal hit testing rules apply; the value of the `pointer-events` property on the element determines whether a point is considered to be within the fill.",
      "ispointinstroke": "Determines whether a given point is within the stroke shape of an element. Normal hit testing rules apply; the value of the `pointer-events` property on the element determines whether a point is considered to be within the stroke.",
      "pathlength": "This property reflects the `pathLength` attribute."
    }
  },
  "SVGGlyphElement": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe **`SVGGlyphElement`** interface corresponds to the `<glyph>` element.\n\nObject-oriented access to the attributes of the `<glyph>` element via the SVG DOM is not possible.\n\n**Warning:** This interface was removed in the SVG 2 specification.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGGlyphElement."
  },
  "SVGFEPointLightElement": {
    "docs": "The **`SVGFEPointLightElement`** interface corresponds to the `<fePointLight>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGFEPointLightElement.",
    "properties": {
      "x": "An `SVGAnimatedNumber` corresponding to the `x` attribute of the given element.",
      "y": "An `SVGAnimatedNumber` corresponding to the `y` attribute of the given element.",
      "z": "An `SVGAnimatedNumber` corresponding to the `z` attribute of the given element."
    }
  },
  "SVGGraphicsElement": {
    "docs": "The **`SVGGraphicsElement`** interface represents SVG elements whose primary purpose is to directly render graphics into a group.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGGraphicsElement.",
    "properties": {
      "getbbox": "Returns a `DOMRect` representing the computed bounding box of the current element.",
      "getctm": "Returns a `DOMMatrix` representing the matrix that transforms the current element's coordinate system to its SVG viewport's coordinate system.",
      "getscreenctm": "Returns a `DOMMatrix` representing the matrix that transforms the current element's coordinate system to the coordinate system of the SVG viewport for the SVG document fragment.",
      "requiredextensions": "An `SVGStringList` reflecting the `requiredExtensions` attribute of the given element.",
      "systemlanguage": "An `SVGStringList` reflecting the `systemLanguage` attribute of the given element.",
      "transform": "An `SVGAnimatedTransformList` reflecting the computed value of the `transform` property and its corresponding `transform` attribute of the given element."
    }
  },
  "SVGHKernElement": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe **`SVGHKernElement`** interface corresponds to the `<hkern>` elements.\n\nObject-oriented access to the attributes of the `<hkern>` element via the SVG DOM is not possible.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGHKernElement."
  },
  "SVGGElement": {
    "docs": "The **`SVGGElement`** interface corresponds to the `<g>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGGElement."
  },
  "SVGLength": {
    "docs": "The `SVGLength` interface correspond to the <length> basic data type.\n\nAn `SVGLength` object can be designated as read only, which means that attempts to modify the object will result in an exception being thrown.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGLength."
  },
  "SVGLengthList": {
    "docs": "The `SVGLengthList` defines a list of `SVGLength` objects.\n\nAn `SVGLengthList` object can be designated as read only, which means that attempts to modify the object will result in an exception being thrown.\n\nAn `SVGLengthList` is indexable and can be accessed like an array.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGLengthList."
  },
  "SVGImageElement": {
    "docs": "The **`SVGImageElement`** interface corresponds to the `<image>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGImageElement.",
    "properties": {
      "decode": "Initiates asynchronous decoding of the image data. Returns a `Promise` which resolves once the image data is ready to be used.",
      "decoding": "Represents a hint given to the browser on how it should decode the image. If this value is provided, it must be one of the possible permitted values: `\"sync\"` to decode the image synchronously, `\"async\"` to decode it asynchronously, or `\"auto\"` to indicate no preference (which is the default).",
      "height": "An `SVGAnimatedLength` corresponding to the `height` attribute of the given `<image>` element.",
      "href": "An `SVGAnimatedString` corresponding to the `href` or `xlink:href` \n  Deprecated\n attribute of the given `<image>` element.",
      "preserveaspectratio": "An `SVGAnimatedPreserveAspectRatio` corresponding to the `preserveAspectRatio` attribute of the given `<image>` element.",
      "width": "An `SVGAnimatedLength` corresponding to the `width` attribute of the given `<image>` element.",
      "x": "An `SVGAnimatedLength` corresponding to the `x` attribute of the given `<image>` element.",
      "y": "An `SVGAnimatedLength` corresponding to the `y` attribute of the given `<image>` element."
    }
  },
  "SVGForeignObjectElement": {
    "docs": "The **`SVGForeignObjectElement`** interface provides access to the properties of `<foreignObject>` elements, as well as methods to manipulate them.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGForeignObjectElement.",
    "properties": {
      "height": "An `SVGAnimatedLength` corresponding to the `height` attribute of the given `<foreignObject>` element.",
      "width": "An `SVGAnimatedLength` corresponding to the `width` attribute of the given `<foreignObject>` element.",
      "x": "An `SVGAnimatedLength` corresponding to the `x` attribute of the given `<foreignObject>` element.",
      "y": "An `SVGAnimatedLength` corresponding to the `x` attribute of the given `<foreignObject>` element."
    }
  },
  "SVGMPathElement": {
    "docs": "The **`SVGMPathElement`** interface corresponds to the `<mpath>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGMPathElement.",
    "properties": {
      "href": "An `SVGAnimatedString` that corresponds to the `href` or `xlink:href` \n  Deprecated\n attribute of the given `<mpath>` element."
    }
  },
  "SVGMarkerElement": {
    "docs": "The **`SVGMarkerElement`** interface provides access to the properties of `<marker>` elements, as well as methods to manipulate them. The `<marker>` element defines the graphics used for drawing marks on a shape.\n\nThe following properties and methods all return, or act on the attributes of the `<marker>` element represented by `SVGMarkerElement`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGMarkerElement.",
    "properties": {
      "markerheight": "Returns an `SVGAnimatedLength` object containing the height of the `<marker>` viewport.",
      "markerunits": "Returns an `SVGAnimatedEnumeration` object, with one of the following values:\n\n| --- | --- |\n| 0 | `SVG_MARKERUNITS_UNKNOWN` which means that the `markerUnits` attribute has a value other than the two predefined keywords. |\n| 1 | `SVG_MARKERUNITS_USERSPACEONUSE` which means that the `markerUnits` attribute has the keyword value `userSpaceOnUse`. |\n| 2 | `SVG_MARKERUNITS_STROKEWIDTH` which means that the `markerUnits` attribute has the keyword value `strokeWidth`. |",
      "markerwidth": "Returns an `SVGAnimatedLength` object containing the width of the `<marker>` viewport.",
      "orientangle": "Returns an `SVGAnimatedAngle` object containing the angle of the `orient` attribute.",
      "orienttype": "Returns an `SVGAnimatedEnumeration` object, with one of the following values:\n\n| --- | --- |\n| 0 | `SVG_MARKER_ORIENT_UNKNOWN` which means that the `orient` attribute has a value other than the two predefined keywords. |\n| 1 | `SVG_MARKERUNITS_ORIENT_AUTO` which means that the `orient` attribute has the keyword value `auto`. |\n| 2 | `SVG_MARKERUNITS_ORIENT_ANGLE` which means that the `orient` attribute has an `<angle>` or `<number>` value indicating the angle. |",
      "preserveaspectratio": "Returns an `SVGPreserveAspectRatio` object which contains the values set by the `preserveAspectRatio` attribute on the `<marker>` viewport.",
      "refx": "Returns an `SVGAnimatedLength` object containing the value of the `refX` attribute of the `<marker>`.",
      "refy": "Returns an `SVGAnimatedLength` object containing the value of the `refY` attribute of the `<marker>`.",
      "setorienttoangle": "Sets the value of the `orient` attribute to a specific angle value.",
      "setorienttoauto": "Sets the value of the `orient` attribute to `auto`.",
      "viewbox": "Returns an `SVGAnimatedRect` object containing an `SVGRect` which contains the values set by the `viewBox` attribute on the `<marker>`."
    }
  },
  "SVGGlyphRefElement": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe **`SVGGlyphRefElement`** interface corresponds to the `<glyphRef>` elements.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGGlyphRefElement.",
    "properties": {
      "dx": "A float corresponding to the `dx` attribute of the given element.",
      "dy": "A float corresponding to the `dy` attribute of the given element.",
      "format": "A string corresponding to the `format` attribute of the given element.",
      "glyphref": "A string corresponding to the `glyphRef` attribute of the given element.",
      "x": "A float corresponding to the `x` attribute of the given element.",
      "y": "A float corresponding to the `y` attribute of the given element."
    }
  },
  "SVGMaskElement": {
    "docs": "The **`SVGMaskElement`** interface provides access to the properties of `<mask>` elements, as well as methods to manipulate them.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGMaskElement.",
    "properties": {
      "height": "An `SVGAnimatedLength` corresponding to the `height` attribute of the given `<mask>` element.",
      "maskcontentunits": "An `SVGAnimatedEnumeration` corresponding to the `maskContentUnits` attribute of the given `<mask>` element. Takes one of the constants defined in `SVGUnitTypes`.",
      "maskunits": "An `SVGAnimatedEnumeration` corresponding to the `maskUnits` attribute of the given `<mask>` element. Takes one of the constants defined in `SVGUnitTypes`.",
      "width": "An `SVGAnimatedLength` corresponding to the `width` attribute of the given `<mask>` element.",
      "x": "An `SVGAnimatedLength` corresponding to the `x` attribute of the given `<mask>` element.",
      "y": "An `SVGAnimatedLength` corresponding to the `y` attribute of the given `<mask>` element."
    }
  },
  "SVGMissingGlyphElement": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe **`SVGMissingGlyphElement`** interface corresponds to the `<missing-glyph>` elements.\n\nObject-oriented access to the attributes of the `<missing-glyph>` element via the SVG DOM is not possible.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGMissingGlyphElement."
  },
  "SVGLineElement": {
    "docs": "The **`SVGLineElement`** interface provides access to the properties of `<line>` elements, as well as methods to manipulate them.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGLineElement.",
    "properties": {
      "x1": "Returns an `SVGAnimatedLength` that corresponds to attribute `x1` on the given `<line>` element.",
      "x2": "Returns an `SVGAnimatedLength` that corresponds to attribute `x2` on the given `<line>` element.",
      "y1": "Returns an `SVGAnimatedLength` that corresponds to attribute `y1` on the given `<line>` element.",
      "y2": "Returns an `SVGAnimatedLength` that corresponds to attribute `y2` on the given `<line>` element."
    }
  },
  "SVGLinearGradientElement": {
    "docs": "The **`SVGLinearGradientElement`** interface corresponds to the `<linearGradient>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGLinearGradientElement.",
    "properties": {
      "x1": "An `SVGAnimatedLength` corresponding to the `x1` attribute of the given `<linearGradient>` element.",
      "x2": "An `SVGAnimatedLength` corresponding to the `x2` attribute of the given `<linearGradient>` element.",
      "y1": "An `SVGAnimatedLength` corresponding to the `y1` attribute of the given `<linearGradient>` element.",
      "y2": "An `SVGAnimatedLength` corresponding to the `y2` attribute of the given `<linearGradient>` element."
    }
  },
  "SVGGradientElement": {
    "docs": "The **`SVGGradient`** interface is a base interface used by `SVGLinearGradientElement` and `SVGRadialGradientElement`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGGradientElement.",
    "properties": {
      "gradienttransform": "An `SVGAnimatedTransformList` corresponding to the `gradientTransform` attribute on the given element.",
      "gradientunits": "An `SVGAnimatedEnumeration` corresponding to the `gradientUnits` attribute on the given element. This property takes one of the constants defined in `SVGUnitTypes`.",
      "href": "An `SVGAnimatedString` corresponding to the `href` or `xlink:href` \n  Deprecated\n attribute of the given element.",
      "spreadmethod": "An `SVGAnimatedEnumeration` corresponding to the `spreadMethod` attribute on the given element. One of the spread method types defined on this interface."
    }
  },
  "SVGNumber": {
    "docs": "The **`SVGNumber`** interface corresponds to the `<number>` basic data type.\n\nAn `SVGNumber` object can be designated as read only, which means that attempts to modify the object will result in an exception being thrown.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGNumber.",
    "properties": {
      "value": "A float representing the number.\n\nNote: If the `SVGNumber` is read-only, a `DOMException` with the code NO_MODIFICATION_ALLOWED_ERR is raised on an attempt to change the value."
    }
  },
  "SVGPathElement": {
    "docs": "The **`SVGPathElement`** interface corresponds to the `<path>` element.\n\n**Note:** In SVG 2 the `getPathSegAtLength()` and `createSVGPathSeg*` methods were removed and the `pathLength` property and the `getTotalLength()` and `getPointAtLength()` methods were moved to `SVGGeometryElement`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGPathElement.",
    "properties": {
      "createsvgpathsegarcabs": "Returns a stand-alone, parentless `SVGPathSegArcAbs` object.",
      "createsvgpathsegarcrel": "Returns a stand-alone, parentless `SVGPathSegArcRel` object.",
      "createsvgpathsegclosepath": "Returns a stand-alone, parentless `SVGPathSegClosePath` object.",
      "createsvgpathsegcurvetocubicabs": "Returns a stand-alone, parentless `SVGPathSegCurvetoCubicAbs` object.",
      "createsvgpathsegcurvetocubicrel": "Returns a stand-alone, parentless `SVGPathSegCurvetoCubicRel` object.",
      "createsvgpathsegcurvetocubicsmoothabs": "Returns a stand-alone, parentless `SVGPathSegCurvetoCubicSmoothAbs` object.",
      "createsvgpathsegcurvetocubicsmoothrel": "Returns a stand-alone, parentless `SVGPathSegCurvetoCubicSmoothRel` object.",
      "createsvgpathsegcurvetoquadraticabs": "Returns a stand-alone, parentless `SVGPathSegCurvetoQuadraticAbs` object.",
      "createsvgpathsegcurvetoquadraticrel": "Returns a stand-alone, parentless `SVGPathSegCurvetoQuadraticRel` object.",
      "createsvgpathsegcurvetoquadraticsmoothabs": "Returns a stand-alone, parentless `SVGPathSegCurvetoQuadraticSmoothAbs` object.",
      "createsvgpathsegcurvetoquadraticsmoothrel": "Returns a stand-alone, parentless `SVGPathSegCurvetoQuadraticSmoothRel` object.",
      "createsvgpathseglinetoabs": "Returns a stand-alone, parentless `SVGPathSegLinetoAbs` object.",
      "createsvgpathseglinetohorizontalabs": "Returns a stand-alone, parentless `SVGPathSegLinetoHorizontalAbs` object.",
      "createsvgpathseglinetohorizontalrel": "Returns a stand-alone, parentless `SVGPathSegLinetoHorizontalRel` object.",
      "createsvgpathseglinetorel": "Returns a stand-alone, parentless `SVGPathSegLinetoRel` object.",
      "createsvgpathseglinetoverticalabs": "Returns a stand-alone, parentless `SVGPathSegLinetoVerticalAbs` object.",
      "createsvgpathseglinetoverticalrel": "Returns a stand-alone, parentless `SVGPathSegLinetoVerticalRel` object.",
      "createsvgpathsegmovetoabs": "Returns a stand-alone, parentless `SVGPathSegMovetoAbs` object.",
      "createsvgpathsegmovetorel": "Returns a stand-alone, parentless `SVGPathSegMovetoRel` object.",
      "getpathsegatlength": "Returns an unsigned long representing the index within the `pathSegList` utilizing the user agent's distance-along-a-path algorithm."
    }
  },
  "SVGPatternElement": {
    "docs": "The **`SVGPatternElement`** interface corresponds to the `<pattern>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGPatternElement.",
    "properties": {
      "height": "An `SVGAnimatedEnumeration` corresponding to the `height` attribute of the given `<pattern>` element.",
      "href": "An `SVGAnimatedString` corresponding to the `href` or `xlink:href` \n  Deprecated\n attribute of the given `<pattern>` element.",
      "patterncontentunits": "An `SVGAnimatedEnumeration` corresponding to the `patternContentUnits` attribute of the given `<pattern>` element. Takes one of the constants defined in `SVGUnitTypes`.",
      "patterntransform": "An `SVGAnimatedTransformList` corresponding to the `patternTransform` attribute of the given `<pattern>` element.",
      "patternunits": "An `SVGAnimatedEnumeration` corresponding to the `patternUnits` attribute of the given `<pattern>` element. Takes one of the constants defined in `SVGUnitTypes`.",
      "width": "An `SVGAnimatedEnumeration` corresponding to the `width` attribute of the given `<pattern>` element.",
      "x": "An `SVGAnimatedEnumeration` corresponding to the `x` attribute of the given `<pattern>` element.",
      "y": "An `SVGAnimatedEnumeration` corresponding to the `y` attribute of the given `<pattern>` element."
    }
  },
  "SVGPoint": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\n**Warning:** `SVGPoint` is deprecated.\n    Use `DOMPoint` or `DOMPointReadOnly` instead.\n\nAn `SVGPoint` represents a 2D or 3D point in the SVG coordinate system.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGPoint."
  },
  "SVGNumberList": {
    "docs": "The `SVGNumberList` defines a list of `SVGNumber` objects.\n\nAn `SVGNumberList` object can be designated as read only, which means that attempts to modify the object will result in an exception being thrown.\n\nAn `SVGNumberList` is indexable and can be accessed like an array.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGNumberList."
  },
  "SVGPolygonElement": {
    "docs": "The **`SVGPolygonElement`** interface provides access to the properties of `<polygon>` elements, as well as methods to manipulate them.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGPolygonElement.",
    "properties": {
      "animatedpoints": "A `SVGPointList` representing the animated value of the element's `points` attribute. If the `points` attribute is not being animated, it contains the same value as the `points` property.",
      "points": "A `SVGPointList` representing the base (i.e., static) value of the element's `points` attribute. Modifications via the `SVGPointList` object are reflected in the `points` attribute, and vice versa."
    }
  },
  "SVGPreserveAspectRatio": {
    "docs": "The `SVGPreserveAspectRatio` interface corresponds to the `preserveAspectRatio` attribute, which is available for some of SVG's elements.\n\nAn `SVGPreserveAspectRatio` object can be designated as read only, which means that attempts to modify the object will result in an exception being thrown.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGPreserveAspectRatio."
  },
  "SVGMetadataElement": {
    "docs": "The **`SVGMetadataElement`** interface corresponds to the `<metadata>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGMetadataElement."
  },
  "SVGRadialGradientElement": {
    "docs": "The **`SVGRadialGradientElement`** interface corresponds to the `<RadialGradient>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGRadialGradientElement.",
    "properties": {
      "cx": "An `SVGAnimatedLength` corresponding to the `cx` attribute of the given `<RadialGradient>` element.",
      "cy": "An `SVGAnimatedLength` corresponding to the `cy` attribute of the given `<RadialGradient>` element.",
      "fx": "An `SVGAnimatedLength` corresponding to the `fx` attribute of the given `<RadialGradient>` element.",
      "fy": "An `SVGAnimatedLength` corresponding to the `fy` attribute of the given `<RadialGradient>` element.",
      "r": "An `SVGAnimatedLength` corresponding to the `r` attribute of the given `<RadialGradient>` element."
    }
  },
  "SVGRectElement": {
    "docs": "The `SVGRectElement` interface provides access to the properties of `<rect>` elements, as well as methods to manipulate them.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGRectElement.",
    "properties": {
      "height": "Returns an `SVGAnimatedLength` corresponding to the `height` attribute of the given `<rect>` element.",
      "rx": "Returns an `SVGAnimatedLength` corresponding to the `rx` attribute of the given `<rect>` element.",
      "ry": "Returns an `SVGAnimatedLength` corresponding to the `ry` attribute of the given `<rect>` element.",
      "width": "Returns an `SVGAnimatedLength` corresponding to the `width` attribute of the given `<rect>` element.",
      "x": "Returns an `SVGAnimatedLength` corresponding to the `x` attribute of the given `<rect>` element.",
      "y": "Returns an `SVGAnimatedLength` corresponding to the `y` attribute of the given `<rect>` element."
    }
  },
  "SVGRenderingIntent": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe **`SVGRenderingIntent`** interface defines the enumerated list of possible values for `rendering-intent` attributes or descriptors.\n\n**Warning:** This interface was removed in the SVG 2 specification.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGRenderingIntent."
  },
  "SVGScriptElement": {
    "docs": "The **`SVGScriptElement`** interface corresponds to the SVG `<script>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGScriptElement.",
    "properties": {
      "crossorigin": "A string corresponding to the `crossorigin` attribute of the given `<script>` element.",
      "href": "An `SVGAnimatedString` corresponding to the `href` or `xlink:href` \n  Deprecated\n attribute of the given `<script>` element.",
      "type": "A string corresponding to the `type` attribute of the given `<script>` element. A `DOMException` is raised with the code `NO_MODIFICATION_ALLOWED_ERR` on an attempt to change the value of a read only attribute."
    }
  },
  "SVGPointList": {
    "docs": "The **`SVGPointList`** interface represents a list of `SVGPoint` objects.\n\nAn `SVGPointList` can be designated as read-only, which means that attempts to modify the object will result in an exception being thrown.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGPointList.",
    "properties": {
      "appenditem": "Adds an item to the end of the list.",
      "clear": "Removes all items in the list.",
      "getitem": "Gets an item from the list at a specified position.",
      "initialize": "First removes all items in the list, then adds a single value to the list.",
      "insertitembefore": "Inserts an element into the list at a specified position.",
      "length": "Returns the number of points in the list.",
      "numberofitems": "Returns the number of points in the list.",
      "removeitem": "Removes an item from the list.",
      "replaceitem": "Replaces an item in the list with a new item."
    }
  },
  "SVGPolylineElement": {
    "docs": "The **`SVGPolylineElement`** interface provides access to the properties of `<polyline>` elements, as well as methods to manipulate them.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGPolylineElement.",
    "properties": {
      "animatedpoints": "A `SVGPointList` representing the animated value of the element's `points` attribute. If the `points` attribute is not being animated, it contains the same value as the `points` property.",
      "points": "A `SVGPointList` representing the base (i.e., static) value of the element's `points` attribute. Modifications via the `SVGPointList` object are reflected in the `points` attribute, and vice versa."
    }
  },
  "SVGStringList": {
    "docs": "The `SVGStringList` defines a list of strings.\n\nAn `SVGStringList` object can be designated as read only, which means that attempts to modify the object will result in an exception being thrown.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGStringList."
  },
  "SVGSVGElement": {
    "docs": "The **`SVGSVGElement`** interface provides access to the properties of `<svg>` elements, as well as methods to manipulate them. This interface contains also various miscellaneous commonly-used utility methods, such as matrix operations and the ability to control the time of redraw on visual rendering devices.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGSVGElement.",
    "properties": {
      "animationspaused": "Returns `true` if this SVG document fragment is in a paused state.",
      "checkenclosure": "Returns `true` if the rendered content of the given element is entirely contained within the supplied rectangle. Each candidate graphics element is to be considered a match only if the same graphics element can be a target of pointer events as defined in `pointer-events` processing.",
      "checkintersection": "Returns `true` if the rendered content of the given element intersects the supplied rectangle. Each candidate graphics element is to be considered a match only if the same graphics element can be a target of pointer events as defined in `pointer-events` processing.",
      "createsvgangle": "Creates an `SVGAngle` object outside of any document trees. The object is initialized to a value of `0` degrees (unitless).",
      "createsvglength": "Creates an `SVGLength` object outside of any document trees. The object is initialized to `0` user units.",
      "createsvgmatrix": "Creates an `SVGMatrix` object outside of any document trees. The object is initialized to the identity matrix.",
      "createsvgnumber": "Creates an `SVGNumber` object outside of any document trees. The object is initialized to `0`.",
      "createsvgpoint": "Creates an `SVGPoint` object outside of any document trees. The object is initialized to the point `(0,0)` in the user coordinate system.",
      "createsvgrect": "Creates an `SVGRect` object outside of any document trees. The object is initialized such that all values are set to `0` user units.",
      "createsvgtransform": "Creates an `SVGTransform` object outside of any document trees. The object is initialized to an identity matrix transform (`SVG_TRANSFORM_MATRIX`).",
      "createsvgtransformfrommatrix": "Creates an `SVGTransform` object outside of any document trees. The object is initialized to the given matrix transform (i.e., `SVG_TRANSFORM_MATRIX`). The values from the parameter matrix are copied, the matrix parameter is not adopted as `SVGTransform::matrix`.",
      "currentscale": "On an outermost `<svg>` element, this float attribute indicates the current scale factor relative to the initial view to take into account user magnification and panning operations. DOM attributes `currentScale` and `currentTranslate` are equivalent to the 2Ã3 matrix `[a b c d e f] = [currentScale 0 0 currentScale currentTranslate.x currentTranslate.y]`. If \"magnification\" is enabled (i.e., `zoomAndPan=\"magnify\"`), then the effect is as if an extra transformation were placed at the outermost level on the SVG document fragment (i.e., outside the outermost `<svg>` element).",
      "currenttranslate": "An `SVGPoint` representing the translation factor that takes into account user \"magnification\" corresponding to an outermost `<svg>` element. The behavior is undefined for `<svg>` elements that are not at the outermost level.",
      "currentview": "An `SVGViewSpec` defining the initial view (i.e., before magnification and panning) of the current innermost SVG document fragment. The meaning depends on the situation: If the initial view was a \"standard\" view, then:\n\n- the values for `viewBox`, `preserveAspectRatio` and `zoomAndPan` within `currentView` will match the values for the corresponding DOM attributes that are on `SVGSVGElement` directly\n- the value for `transform` within `currentView` will be `null`\n\nIf the initial view was a link into a `<view>` element, then:\n\n- the values for `viewBox`, `preserveAspectRatio` and `zoomAndPan` within `currentView` will correspond to the corresponding attributes for the given `<view>` element\n- the value for `transform` within `currentView` will be `null`\n\nIf the initial view was a link into another element (i.e., other than a `<view>`), then:\n\n- the values for `viewBox`, `preserveAspectRatio` and `zoomAndPan` within `currentView` will match the values for the corresponding DOM attributes that are on `SVGSVGElement` directly for the closest ancestor `<svg>` element\n- the values for `transform` within `currentView` will be `null`\n\nIf the initial view was a link into the SVG document fragment using an SVG view specification fragment identifier (i.e., `#svgView(â¦)`), then:\n\n- the values for `viewBox`, `preserveAspectRatio`, `zoomAndPan`, `transform` within `currentView` will correspond to the values from the SVG view specification fragment identifier",
      "deselectall": "Unselects any selected objects, including any selections of text strings and type-in bars.",
      "forceredraw": "In rendering environments supporting interactivity, forces the user agent to immediately redraw all regions of the viewport that require updating.",
      "getcurrenttime": "Returns the current time in seconds relative to the start time for the current SVG document fragment. If `getCurrentTime()` is called before the document timeline has begun (for example, by script running in a `<script>` element before the document's `SVGLoad` event is dispatched), then `0` is returned.",
      "getelementbyid": "Searches this SVG document fragment (i.e., the search is restricted to a subset of the document tree) for an Element whose `id` is given by `elementId`. If an Element is found, that Element is returned. If no such element exists, returns `null`. Behavior is not defined if more than one element has this id.",
      "getenclosurelist": "Returns a `NodeList` of graphics elements whose rendered content is entirely contained within the supplied rectangle. Each candidate graphics element is to be considered a match only if the same graphics element can be a target of pointer events as defined in `pointer-events` processing.",
      "getintersectionlist": "Returns a `NodeList` of graphics elements whose rendered content intersects the supplied rectangle. Each candidate graphics element is to be considered a match only if the same graphics element can be a target of pointer events as defined in `pointer-events` processing.",
      "height": "An `SVGAnimatedLength` corresponding to the `height` attribute of the given `<svg>` element.",
      "onafterprint": "Fired after the associated document has started printing or the print preview has been closed.",
      "onbeforeprint": "Fired when the associated document is about to be printed or previewed for printing.",
      "onbeforeunload": "Fired when the window, the document and its resources are about to be unloaded.",
      "ongamepadconnected": "Fired when the browser detects that a gamepad has been connected or the first time a button/axis of the gamepad is used.",
      "ongamepaddisconnected": "Fired when the browser detects that a gamepad has been disconnected.",
      "onhashchange": "Fired when the fragment identifier of the URL has changed (the part of the URL beginning with and following the `#` symbol).",
      "onlanguagechange": "Fired when the user's preferred language changes.",
      "onmessage": "Fired when the window receives a message, for example from a call to `Window.postMessage()` from another browsing context.",
      "onmessageerror": "Fired when the window receives a message that can't be deserialized.",
      "onoffline": "Fired when the browser has lost access to the network and the value of `Navigator.onLine` switches to `false`.",
      "ononline": "Fired when the browser has gained access to the network and the value of `Navigator.onLine` switches to `true`.",
      "onpagehide": "Fired when the browser hides the current page in the process of presenting a different page from the session's history.",
      "onpageshow": "Fired when the browser displays the window's document due to navigation.",
      "onpopstate": "Fired when the active history entry changes while the user navigates the session history.",
      "onrejectionhandled": "Fired whenever a JavaScript `Promise` is rejected and the rejection has been handled.",
      "onstorage": "Fired when a storage area (`localStorage`) has been modified in the context of another document.",
      "onunhandledrejection": "Fired whenever a `Promise` is rejected but the rejection was not handled.",
      "onunload": "Fired when the document is being unloaded.",
      "pauseanimations": "Suspends (i.e., pauses) all currently running animations that are defined within the SVG document fragment corresponding to this `<svg>` element, causing the animation clock corresponding to this document fragment to stand still until it is unpaused.",
      "pixelunittomillimeterx": "A float representing the size of the pixel unit (as defined by CSS2) along the x-axis of the viewport, which represents a unit somewhere in the range of 70dpi to 120dpi, and, on systems that support this, might actually match the characteristics of the target medium. On systems where it is impossible to know the size of a pixel, a suitable default pixel size is provided.",
      "pixelunittomillimetery": "A float representing the size of a pixel unit along the y-axis of the viewport.",
      "screenpixeltomillimeterx": "User interface (UI) events in DOM Level 2 indicate the screen positions at which the given UI event occurred. When the browser actually knows the physical size of a \"screen unit\", this float attribute will express that information; otherwise, user agents will provide a suitable default value (such as `.28mm`).",
      "screenpixeltomillimetery": "Corresponding size of a screen pixel along the y-axis of the viewport.",
      "setcurrenttime": "Adjusts the clock for this SVG document fragment, establishing a new current time. If `setCurrentTime()` is called before the document timeline has begun (for example, by script running in a `<script>` element before the document's `SVGLoad` event is dispatched), then the value of seconds in the last invocation of the method gives the time that the document will seek to once the document timeline has begun.",
      "suspendredraw": "Takes a time-out value which indicates that redraw shall not occur until:\n\nthe corresponding `unsuspendRedraw()` call has been made, an `unsuspendRedrawAll()` call has been made, or its timer has timed out.\n\nIn environments that do not support interactivity (e.g., print media), then redraw shall not be suspended. Calls to `suspendRedraw()` and `unsuspendRedraw()` should, but need not be, made in balanced pairs.\n\nTo suspend redraw actions as a collection of SVG DOM changes occur, precede the changes to the SVG DOM with a method call similar to:\n\n```\nconst suspendHandleID = suspendRedraw(maxWaitMilliseconds);\n```\n\nand follow the changes with a method call similar to:\n\n```\nunsuspendRedraw(suspendHandleID);\n```\n\nNote that multiple `suspendRedraw()` calls can be used at once, and that each such method call is treated independently of the other `suspendRedraw()` method calls.",
      "unpauseanimations": "Resumes (i.e., unpauses) currently running animations that are defined within the SVG document fragment, causing the animation clock to continue from the time at which it was suspended.",
      "unsuspendredraw": "Cancels a specified `suspendRedraw()` by providing a unique suspend handle ID that was returned by a previous `suspendRedraw()` call.",
      "unsuspendredrawall": "Cancels all currently active `suspendRedraw()` method calls. This method is most useful at the very end of a set of SVG DOM calls to ensure that all pending `suspendRedraw()` method calls have been cancelled.",
      "usecurrentview": "The initial view (i.e., before magnification and panning) of the current innermost SVG document fragment can be either the \"standard\" view, i.e., based on attributes on the `<svg>` element such as `viewBox`) or on a \"custom\" view (i.e., a hyperlink into a particular `<view>` or other element). If the initial view is the \"standard\" view, then this attribute is `false`. If the initial view is a \"custom\" view, then this attribute is `true`.",
      "width": "An `SVGAnimatedLength` corresponding to the `width` attribute of the given `<svg>` element.",
      "x": "An `SVGAnimatedLength` corresponding to the `x` attribute of the given `<svg>` element.",
      "y": "An `SVGAnimatedLength` corresponding to the `y` attribute of the given `<svg>` element."
    }
  },
  "SVGRect": {
    "docs": "The **`SVGRect`** represents a rectangle. Rectangles consist of an `x` and `y` coordinate pair identifying a minimum `x` value, a minimum `y` value, and a `width` and `height`, which are constrained to be non-negative.\n\nAn **`SVGRect`** object can be designated as read only, which means that attempts to modify the object will result in an exception being thrown.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGRect.",
    "properties": {
      "height": "This represents the height of the rectangle. A value that is negative results to an error. A value of `0` disables rendering of the element.",
      "width": "This represents the width of the rectangle. A value that is negative results to an error. A value of `0` disables rendering of the element",
      "x": "The exact effect of this coordinate depends on each element. If the attribute is not specified, the effect is as if a value of `0` were specified.",
      "y": "The exact effect of this coordinate depends on each element. If the attribute is not specified, the effect is as if a value of `0` were specified."
    }
  },
  "SVGStopElement": {
    "docs": "The **`SVGStopElement`** interface corresponds to the `<stop>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGStopElement.",
    "properties": {
      "offset": "An `SVGAnimatedNumber` corresponding to the `offset` of the given element."
    }
  },
  "SVGSetElement": {
    "docs": "The **`SVGSetElement`** interface corresponds to the `<set>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGSetElement."
  },
  "SVGSymbolElement": {
    "docs": "The **`SVGSymbolElement`** interface corresponds to the `<symbol>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGSymbolElement."
  },
  "SVGTSpanElement": {
    "docs": "The **`SVGTSpanElement`** interface represents a `<tspan>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGTSpanElement."
  },
  "SVGTextContentElement": {
    "docs": "The **`SVGTextContentElement`** interface is implemented by elements that support rendering child text content. It is inherited by various text-related interfaces, such as `SVGTextElement`, `SVGTSpanElement`, `SVGTRefElement`, and `SVGTextPathElement`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGTextContentElement.",
    "properties": {
      "getcharnumatposition": "Returns a long representing the character which caused a text glyph to be rendered at a given position in the coordinate system. Because the relationship between characters and glyphs is not one-to-one, only the first character of the relevant typographic character is returned",
      "getcomputedtextlength": "Returns a float representing the computed length for the text within the element.",
      "getendpositionofchar": "Returns a `DOMPoint` representing the trailing position of a typographic character after text layout has been performed.\n\n**Note:** In SVG 1.1 this method returned an `SVGPoint`.",
      "getextentofchar": "Returns a `DOMRect` representing the computed tight bounding box of the glyph cell that corresponds to a given typographic character.",
      "getnumberofchars": "Returns a long representing the total number of addressable characters available for rendering within the current element, regardless of whether they will be rendered.",
      "getrotationofchar": "Returns a float representing the rotation of typographic character.",
      "getstartpositionofchar": "Returns a `DOMPoint` representing the position of a typographic character after text layout has been performed.\n\n**Note:** In SVG 1.1 this method returned an `SVGPoint`.",
      "getsubstringlength": "Returns a float representing the computed length of the formatted text advance distance for a substring of text within the element. Note that this method only accounts for the widths of the glyphs in the substring and any extra spacing inserted by the CSS 'letter-spacing' and 'word-spacing' properties. Visual spacing adjustments made by the 'x' attribute is ignored.",
      "lengthadjust": "An `SVGAnimatedEnumeration` reflecting the `lengthAdjust` attribute of the given element. The numeric type values represent one of the constant values above.",
      "selectsubstring": "Selects text within the element.",
      "textlength": "An `SVGAnimatedLength` reflecting the `textLength` attribute of the given element."
    }
  },
  "SVGTRefElement": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe **`SVGTRefElement`** interface corresponds to the `<tref>` elements.\n\nObject-oriented access to the attributes of the `<tref>` element via the SVG DOM is not possible.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGTRefElement."
  },
  "SVGStyleElement": {
    "docs": "The **`SVGStyleElement`** interface corresponds to the SVG `<style>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGStyleElement.",
    "properties": {
      "disabled": "A boolean value indicating whether or not the associated stylesheet is disabled.",
      "media": "A string corresponding to the `media` attribute of the given element.",
      "sheet": "Returns the `CSSStyleSheet` object associated with the given element, or `null` if there is none.",
      "title": "A string corresponding to the `title` attribute of the given element.",
      "type": "A string corresponding to the `type` attribute of the given element."
    }
  },
  "SVGTitleElement": {
    "docs": "The **`SVGTitleElement`** interface corresponds to the `<title>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGTitleElement."
  },
  "SVGTransformList": {
    "docs": "The `SVGTransformList` defines a list of `SVGTransform` objects.\n\nAn `SVGTransformList` object can be designated as read only, which means that attempts to modify the object will result in an exception being thrown.\n\nAn `SVGTransformList` is indexable and can be accessed like an array.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGTransformList."
  },
  "SVGSwitchElement": {
    "docs": "The **`SVGSwitchElement`** interface corresponds to the `<switch>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGSwitchElement."
  },
  "SVGUnitTypes": {
    "docs": "The **`SVGUnitTypes`** interface defines a commonly used set of constants used for reflecting `gradientUnits`, `patternContentUnits` and other similar attributes.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGUnitTypes."
  },
  "SVGUseElement": {
    "docs": "The **`SVGUseElement`** interface corresponds to the `<use>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGUseElement.",
    "properties": {
      "height": "An `SVGAnimatedLength` corresponding to the `height` attribute of the given element.",
      "href": "An `SVGAnimatedString` corresponding to the `href` or `xlink:href` \n  Deprecated\n attribute of the given element.",
      "width": "An `SVGAnimatedLength` corresponding to the `width` attribute of the given element.",
      "x": "An `SVGAnimatedLength` corresponding to the `x` attribute of the given element.",
      "y": "An `SVGAnimatedLength` corresponding to the `y` attribute of the given element."
    }
  },
  "SVGViewElement": {
    "docs": "The **`SVGViewElement`** interface provides access to the properties of `<view>` elements, as well as methods to manipulate them.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGViewElement."
  },
  "SVGTransform": {
    "docs": "`SVGTransform` is the interface for one of the component transformations within an `SVGTransformList`; thus, an `SVGTransform` object corresponds to a single component (e.g., `scale(â¦)` or `matrix(â¦)`) within a `transform` attribute.\n\nAn `SVGTransform` object can be designated as read only, which means that attempts to modify the object will result in an exception being thrown.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGTransform."
  },
  "SVGTextPathElement": {
    "docs": "The **`SVGTextPathElement`** interface corresponds to the `<textPath>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGTextPathElement.",
    "properties": {
      "href": "An `SVGAnimatedString` corresponding to the `href` or `xlink:href` \n  Deprecated\n attribute of the given element.",
      "method": "An `SVGAnimatedEnumeration` corresponding to the `method` attribute of the given element. It takes one of the `TEXTPATH_METHODTYPE_*` constants defined on this interface.",
      "spacing": "An `SVGAnimatedEnumeration` corresponding to the `spacing` attribute of the given element. It takes one of the `TEXTPATH_SPACINGTYPE_*` constants defined on this interface.",
      "startoffset": "An `SVGAnimatedLength` corresponding to the X component of the `startOffset` attribute of the given element."
    }
  },
  "Scheduling": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`Scheduling`** object provides methods and properties to control scheduling tasks within the current document.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Scheduling."
  },
  "SVGVKernElement": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe **`SVGVKernElement`** interface corresponds to the `<vkern>` elements.\n\nObject-oriented access to the attributes of the `<vkern>` element via the SVG DOM is not possible.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGVKernElement."
  },
  "SVGTextPositioningElement": {
    "docs": "The **`SVGTextPositioningElement`** interface is implemented by elements that support attributes that position individual text glyphs. It is inherited by `SVGTextElement`, `SVGTSpanElement`, and `SVGTRefElement`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGTextPositioningElement.",
    "properties": {
      "dx": "Returns an `SVGAnimatedLengthList` reflecting the `dx` attribute of the given element.",
      "dy": "Returns an `SVGAnimatedLengthList` reflecting the `dy` attribute of the given element.",
      "rotate": "Returns an `SVGAnimatedNumberList` reflecting the `rotate` attribute of the given element.",
      "x": "Returns an `SVGAnimatedLengthList` reflecting the `x` attribute of the given element.",
      "y": "Returns an `SVGAnimatedLengthList` reflecting the `y` attribute of the given element."
    }
  },
  "ScreenDetailed": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\n**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`ScreenDetailed`** interface of the Window Management API represents detailed information about one specific screen available to the user's device.\n\n`ScreenDetailed` objects can be accessed via the `ScreenDetails.screens` and `ScreenDetails.currentScreen` properties.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ScreenDetailed."
  },
  "Sanitizer": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\n**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`Sanitizer`** interface of the `HTML Sanitizer API` is used to sanitize untrusted strings of HTML, `Document` and `DocumentFragment` objects.\n  After sanitization, unwanted elements or attributes are removed, and the returned objects can safely be inserted into a document's DOM.\n\nA **`Sanitizer`** object is also used by the `Element.setHTML()` method to parse and sanitize a string of HTML, and immediately insert it into an element.\n\nThe default configuration strips out XSS-relevant input by default, including `<script>` tags, custom elements, and comments.\n  This configuration may be customized using constructor options.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Sanitizer.",
    "properties": {
      "sanitize": "Returns a sanitized `DocumentFragment` from an input `Document` or `DocumentFragment`"
    }
  },
  "Screen": {
    "docs": "The `Screen` interface represents a screen, usually the one on which the current window is being rendered, and is obtained using `window.screen`.\n\nNote that browsers determine which screen to report as current by detecting which screen has the center of the browser window.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Screen.",
    "properties": {
      "availheight": "Specifies the height of the screen, in pixels, minus permanent or semipermanent user interface features displayed by the operating system, such as the Taskbar on Windows.",
      "availleft": "A number representing the x-coordinate (left-hand edge) of the available screen area.",
      "availtop": "A number representing the y-coordinate (top edge) of the available screen area.",
      "availwidth": "Returns the amount of horizontal space in pixels available to the window.",
      "colordepth": "Returns the color depth of the screen.",
      "height": "Returns the height of the screen in pixels.",
      "isextended": "Returns `true` if the user's device has multiple screens, and `false` if not.",
      "left": "A number representing the x-coordinate (left-hand edge) of the total screen area.",
      "lockorientation": "Lock the screen orientation (only works in fullscreen or for installed apps)",
      "mozbrightness": "Controls the brightness of a device's screen. A double between 0 and 1.0 is expected.",
      "mozenabled": "Boolean. Setting to false will turn off the device's screen.",
      "orientation": "Returns the `ScreenOrientation` instance associated with this screen.",
      "pixeldepth": "Gets the bit depth of the screen.",
      "top": "A number representing the y-coordinate (top edge) of the total screen area.",
      "unlockorientation": "Unlock the screen orientation (only works in fullscreen or for installed apps)",
      "width": "Returns the width of the screen."
    }
  },
  "SVGTextElement": {
    "docs": "The **`SVGTextElement`** interface corresponds to the `<text>` elements.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SVGTextElement."
  },
  "ScreenOrientation": {
    "docs": "The **`ScreenOrientation`** interface of the Screen Orientation API provides information about the current orientation of the document.\n\nA **`ScreenOrientation`** instance object can be retrieved using the `screen.orientation` property.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation.",
    "properties": {
      "angle": "Returns the document's current orientation angle.",
      "lock": "Locks the orientation of the containing document to its default orientation and returns a `Promise`.",
      "type": "Returns the document's current orientation type, one of `portrait-primary`, `portrait-secondary`, `landscape-primary`, or `landscape-secondary`.",
      "unlock": "Unlocks the orientation of the containing document from its default orientation."
    }
  },
  "ScreenDetails": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\n**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`ScreenDetails`** interface of the Window Management API represents the details of all the screens available to the user's device.\n\nThis information is accessed via the `Window.getScreenDetails()` method.\n\n**Note:** `ScreenDetails` is a live object, meaning that it updates as the available screens change. You can therefore keep querying the same object to get updated values, rather than repeatedly calling `getScreenDetails()`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ScreenDetails."
  },
  "ScrollTimeline": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`ScrollTimeline`** interface of the Web Animations API represents a scroll progress timeline (see CSS scroll-driven animations for more details).\n\nPass a `ScrollTimeline` instance to the `Animation()` constructor or the `animate()` method to specify it as the timeline that will control the progress of the animation.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ScrollTimeline."
  },
  "Scheduler": {
    "docs": "The **`Scheduler`** interface of the Prioritized Task Scheduling API provides the `Scheduler.postTask()` method that can be used for adding prioritized tasks to be scheduled.\n\nA `Scheduler` can be accessed from the global object `Window` or `WorkerGlobalScope` (`this.scheduler`).\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Scheduler.",
    "properties": {
      "posttask": "Adds a task to the scheduler as a callback, optionally specifying a priority, delay, and/or a signal for aborting the task."
    }
  },
  "SecurityPolicyViolationEvent": {
    "docs": "The **`SecurityPolicyViolationEvent`** interface inherits from `Event`, and represents the event object of an event sent on a document or worker when its content security policy is violated.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SecurityPolicyViolationEvent.",
    "properties": {
      "blockeduri": "A string representing the URI of the resource that was blocked because it violates a policy.",
      "columnnumber": "The column number in the document or worker at which the violation occurred.",
      "disposition": "Indicates how the violated policy is configured to be treated by the user agent. This will be `\"enforce\"` or `\"report\"`.",
      "documenturi": "A string representing the URI of the document or worker in which the violation was found.",
      "effectivedirective": "A string representing the directive whose enforcement uncovered the violation.",
      "linenumber": "The line number in the document or worker at which the violation occurred.",
      "originalpolicy": "A string containing the policy whose enforcement uncovered the violation.",
      "referrer": "A string representing the URL for the referrer of the resources whose policy was violated, or `null`.",
      "sample": "A string representing a sample of the resource that caused the violation, usually the first 40 characters. This will only be populated if the resource is an inline script, event handler, or style â external resources causing a violation will not generate a sample.",
      "sourcefile": "If the violation occurred as a result of a script, this will be the URL of the script; otherwise, it will be `null`. Both `columnNumber` and `lineNumber` should have non-null values if this property is not `null`.",
      "statuscode": "A number representing the HTTP status code of the document or worker in which the violation occurred.",
      "violateddirective": "A string representing the directive whose enforcement uncovered the violation."
    }
  },
  "Sensor": {
    "docs": "The **`Sensor`** interface of the Sensor APIs is the base class for all the other sensor interfaces. This interface cannot be used directly. Instead it provides properties, event handlers, and methods accessed by interfaces that inherit from it.\n\nThis feature may be blocked by a Permissions Policy set on your server.\n\nWhen initially created, the `Sensor` object is idle, meaning it does not take measures. Once the `start()` method is called, it prepares itself to read data and, once ready, the `activate` event is sent and the sensor becomes activated. It then sends a `reading` event each time new data is available.\n\nIn case of an error, the `error` event is sent, reading stops, and the `Sensor` object becomes idle again. The `start()` method needs to be called again before it can read further data.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Sensor.",
    "properties": {
      "activated": "Returns a boolean value indicating whether the sensor is active.",
      "hasreading": "Returns a boolean value indicating whether the sensor has a reading.",
      "start": "Activates one of the sensors based on `Sensor`.",
      "stop": "Deactivates one of the sensors based on `Sensor`.",
      "timestamp": "Returns the timestamp of the latest sensor reading."
    }
  },
  "SensorErrorEvent": {
    "docs": "The **`SensorErrorEvent`** interface of the Sensor APIs provides information about errors thrown by a `Sensor` or derived interface.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SensorErrorEvent.",
    "properties": {
      "error": "Returns the `DOMException` object passed in the event's constructor."
    }
  },
  "Serial": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe `Serial` interface of the `Web Serial API` provides attributes and methods for finding and connecting to serial ports from a web page.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Serial.",
    "properties": {
      "getports": "Returns a `Promise` that resolves with an array of `SerialPort` objects representing serial ports connected to\n      the host which the origin has permission to access.",
      "requestport": "Returns a `Promise` that resolves with an instance of `SerialPort` representing the device chosen by the user or rejects if no device was selected.\n\nThis method must be called with user activation."
    }
  },
  "SerialPort": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe `SerialPort` interface of the `Web Serial API` provides access to a serial port on the host device.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SerialPort.",
    "properties": {
      "close": "Returns a `Promise` that resolves when the port closes.",
      "forget": "Returns a `Promise` that resolves when the port closes and is forgotten.",
      "getinfo": "Returns an object containing properties of the port.",
      "getsignals": "Returns a `Promise` that resolves with an object containing the current state of the port's control signals.",
      "open": "Returns a `Promise` that resolves when the port is opened. By default the port is opened with 8 data bits, 1 stop bit and no parity checking.",
      "readable": "Returns a `ReadableStream` for receiving data from the device connected to the port.",
      "setsignals": "Sets control signals on the port and returns a `Promise` that resolves when they are set.",
      "writable": "Returns a `WritableStream` for sending data to the device connected to the port."
    }
  },
  "ServiceWorker": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`ServiceWorker`** interface of the Service Worker API provides a reference to a service worker. Multiple browsing contexts (e.g. pages, workers, etc.) can be associated with the same service worker, each through a unique `ServiceWorker` object.\n\nA `ServiceWorker` object is available via a number of properties:\n\n- `ServiceWorkerRegistration.active`\n- `ServiceWorkerGlobalScope.serviceWorker`\n- `ServiceWorkerContainer.controller` â when the service worker is in `activating` or `activated` state\n- `ServiceWorkerRegistration.installing` â when the service worker is in `installing` state\n- `ServiceWorkerRegistration.waiting` â when the service worker is in `installed` state\n\nThe `ServiceWorker` interface is dispatched a set of lifecycle events â `install` and `activate` â and functional events including `fetch`. A `ServiceWorker` object has an associated `ServiceWorker.state`, related to its lifecycle.\n\nService workers allow static import of ECMAScript modules, if supported, using `import`.\n  Dynamic import is disallowed by the specification â calling `import()` will throw.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker.",
    "properties": {
      "postmessage": "Sends a message â consisting of any structured-cloneable JavaScript object â to the service worker. The message is transmitted to the service worker using a `message` event on its global scope.",
      "scripturl": "Returns the `ServiceWorker` serialized script URL defined as part of `ServiceWorkerRegistration`. The URL must be on the same origin as the document that registers the `ServiceWorker`.",
      "state": "Returns the state of the service worker. It returns one of the following values: `parsed`, `installing`, `installed`, `activating`, `activated`, or `redundant`."
    }
  },
  "ServiceWorkerContainer": {
    "docs": "The **`ServiceWorkerContainer`** interface of the Service Worker API provides an object representing the service worker as an overall unit in the network ecosystem, including facilities to register, unregister and update service workers, and access the state of service workers and their registrations.\n\nMost importantly, it exposes the `ServiceWorkerContainer.register()` method used to register service workers, and the `ServiceWorkerContainer.controller` property used to determine whether or not the current page is actively controlled.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer.",
    "properties": {
      "controller": "Returns a `ServiceWorker` object if its state is `activating` or `activated` (the same object returned by `ServiceWorkerRegistration.active`). This property returns `null` during a force-refresh request (Shift + refresh) or if there is no active worker.",
      "getregistration": "Gets a `ServiceWorkerRegistration` object whose scope matches the provided document URL. The method returns a `Promise` that resolves to a `ServiceWorkerRegistration` or `undefined`.",
      "getregistrations": "Returns all `ServiceWorkerRegistration` objects associated with a `ServiceWorkerContainer` in an array. The method returns a `Promise` that resolves to an array of `ServiceWorkerRegistration`.",
      "ready": "Provides a way of delaying code execution until a service worker is active. It returns a `Promise` that will never reject, and which waits indefinitely until the `ServiceWorkerRegistration` associated with the current page has an `ServiceWorkerRegistration.active` worker. Once that condition is met, it resolves with the `ServiceWorkerRegistration`.",
      "register": "Creates or updates a `ServiceWorkerRegistration` for the given `scriptURL`.",
      "startmessages": "explicitly starts the flow of messages being dispatched from a service worker to pages under its control (e.g. sent via `Client.postMessage()`). This can be used to react to sent messages earlier, even before that page's content has finished loading."
    }
  },
  "ServiceWorkerGlobalScope": {
    "docs": "The **`ServiceWorkerGlobalScope`** interface of the Service Worker API represents the global execution context of a service worker.\n\nDevelopers should keep in mind that the ServiceWorker state is not persisted across the termination/restart cycle, so each event handler should assume it's being invoked with a bare, default global state.\n\nOnce successfully registered, a service worker can and will be terminated when idle to conserve memory and processor power. An active service worker is automatically restarted to respond to events, such as `fetch` or `message`.\n\nAdditionally, synchronous requests are not allowed from within a service worker â only asynchronous requests, like those initiated via the `fetch()` method, can be used.\n\nThis interface inherits from the `WorkerGlobalScope` interface, and its parent `EventTarget`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope.",
    "properties": {
      "clients": "Contains the `Clients` object associated with the service worker.",
      "registration": "Contains the `ServiceWorkerRegistration` object that represents the service worker's registration.",
      "serviceworker": "Contains the `ServiceWorker` object that represents the service worker.",
      "skipwaiting": "Allows the current service worker registration to progress from waiting to active state while service worker clients are using it."
    }
  },
  "SharedStorage": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`SharedStorage`** interface of the Shared Storage API represents the shared storage for a particular origin, defining methods to write data to the shared storage.\n\n`SharedStorage` is the base class for:\n\n- `WindowSharedStorage`, accessed via `Window.sharedStorage`.\n- `WorkletSharedStorage`, accessed via `SharedStorageWorkletGlobalScope.sharedStorage`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SharedStorage."
  },
  "SecurePaymentConfirmationRequest": {
    "docs": "The **`SecurePaymentConfirmationRequest`** dictionary describes input to the Payment Request API when used to authenticate a user during an e-commerce transaction using SPC with Payment Request API.\n\nAn instance of this dictionary must be passed into the `PaymentRequest()` constructor as the value of the `data` field corresponding to a `supportedMethods` value of `\"secure-payment-confirmation\"`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SecurePaymentConfirmationRequest."
  },
  "Selection": {
    "docs": "A **`Selection`** object represents the range of text selected by the user or the current position of the caret. To obtain a `Selection` object for examination or manipulation, call `window.getSelection()`.\n\nA user may make a selection from left to right (in document order) or right to left (reverse of document order). The **anchor** is where the user began the selection and the **focus** is where the user ends the selection. If you make a selection with a desktop mouse, the anchor is placed where you pressed the mouse button, and the focus is placed where you released the mouse button.\n\n**Note:** Anchor and focus should not be confused with the start and end positions of a selection. The anchor can be placed before the focus or vice versa, depending on the direction you made your selection.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Selection.",
    "properties": {
      "addrange": "A `Range` object that will be added to the selection.",
      "anchornode": "Returns the `Node` in which the selection begins. Can return `null` if selection never existed in the document (e.g., an iframe that was never clicked on).",
      "anchoroffset": "Returns a number representing the offset of the selection's anchor within the `anchorNode`. If `anchorNode` is a text node, this is the number of characters within anchorNode preceding the anchor. If `anchorNode` is an element, this is the number of child nodes of the `anchorNode` preceding the anchor.",
      "collapse": "Collapses the current selection to a single point.",
      "collapsetoend": "Collapses the selection to the end of the last range in the selection.",
      "collapsetostart": "Collapses the selection to the start of the first range in the selection.",
      "containsnode": "Indicates if a certain node is part of the selection.",
      "deletefromdocument": "Deletes the selection's content from the document.",
      "extend": "Moves the focus of the selection to a specified point.",
      "focusnode": "Returns the `Node` in which the selection ends. Can return `null` if selection never existed in the document (for example, in an `iframe` that was never clicked on).",
      "focusoffset": "Returns a number representing the offset of the selection's anchor within the `focusNode`. If `focusNode` is a text node, this is the number of characters within `focusNode` preceding the focus. If `focusNode` is an element, this is the number of child nodes of the `focusNode` preceding the focus.",
      "getrangeat": "Returns a `Range` object representing one of the ranges currently selected.",
      "iscollapsed": "Returns a Boolean indicating whether the selection's start and end points are at the same position.",
      "modify": "Changes the current selection.",
      "rangecount": "Returns the number of ranges in the selection.",
      "removeallranges": "Removes all ranges from the selection.",
      "removerange": "Removes a range from the selection.",
      "selectallchildren": "Adds all the children of the specified node to the selection.",
      "setbaseandextent": "Sets the selection to be a range including all or parts of two specified DOM nodes, and any content located between them.",
      "tostring": "Returns a string currently being represented by the selection object, i.e. the currently selected text.",
      "type": "Returns a string describing the type of the current selection."
    }
  },
  "ServiceWorkerRegistration": {
    "docs": "The **`ServiceWorkerRegistration`** interface of the Service Worker API represents the service worker registration. You register a service worker to control one or more pages that share the same origin.\n\nThe lifetime of a service worker registration is beyond that of the `ServiceWorkerRegistration` objects that represent them within the lifetime of their corresponding service worker clients. The browser maintains a persistent list of active `ServiceWorkerRegistration` objects.\n\n**Note:** This feature is available in Web Workers.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration.",
    "properties": {
      "active": "Returns a service worker whose state is `activating` or `activated`. This is initially set to `null`. An active worker will control a `Client` if the client's URL falls within the scope of the registration (the `scope` option set when `ServiceWorkerContainer.register` is first called.)",
      "backgroundfetch": "Returns a reference to a `BackgroundFetchManager` object, which manages background fetch operations.",
      "getnotifications": "Returns a `Promise` that resolves to an array of `Notification` objects.",
      "index": "Returns a reference to the `ContentIndex` interface, for managing indexed content for offline viewing.",
      "installing": "Returns a service worker whose state is `installing`. This is initially set to `null`.",
      "navigationpreload": "Returns the instance of `NavigationPreloadManager` associated with the current service worker registration.",
      "paymentmanager": "Returns a payment app's `PaymentManager` instance, which is used to manage various payment app functionality.",
      "periodicsync": "Returns a reference to the `PeriodicSyncManager` interface, which allows for registering of tasks to run at specific intervals.",
      "pushmanager": "Returns a reference to the `PushManager` interface for managing push subscriptions including subscribing, getting an active subscription, and accessing push permission status.",
      "scope": "Returns a unique identifier for a service worker registration. This must be on the same origin as the document that registers the `ServiceWorker`.",
      "shownotification": "Displays the notification with the requested title.",
      "sync": "Returns a reference to the `SyncManager` interface, which manages background synchronization processes.",
      "unregister": "Unregisters the service worker registration and returns a `Promise`. The service worker will finish any ongoing operations before it is unregistered.",
      "update": "Checks the server for an updated version of the service worker without consulting caches.",
      "updateviacache": "Returns a string indicating what is the cache strategy to use when updating the service worker scripts. It can be one of the following: `imports`, `all`, or `none`.",
      "waiting": "Returns a service worker whose state is `installed`. This is initially set to `null`."
    }
  },
  "ShadowRoot": {
    "docs": "The **`ShadowRoot`** interface of the Shadow DOM API is the root node of a DOM subtree that is rendered separately from a document's main DOM tree.\n\nYou can retrieve a reference to an element's shadow root using its `Element.shadowRoot` property, provided it was created using `Element.attachShadow()` with the `mode` option set to `open`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot.",
    "properties": {
      "activeelement": "Returns the `Element` within the shadow tree that has focus.",
      "adoptedstylesheets": "Add an array of constructed stylesheets to be used by the shadow DOM subtree.\n      These may be shared with other DOM subtrees that share the same parent `Document` node, and the document itself.",
      "delegatesfocus": "Returns a boolean that indicates whether `delegatesFocus` was set when the shadow was attached (see `Element.attachShadow()`).",
      "elementfrompoint": "Returns the topmost element at the specified coordinates.",
      "elementsfrompoint": "Returns an array of all elements at the specified coordinates.",
      "fullscreenelement": "The element that's currently in full screen mode for this shadow tree.",
      "getanimations": "Returns an array of all `Animation` objects currently in effect, whose target elements are descendants of the shadow tree.",
      "getselection": "Returns a `Selection` object representing the range of text selected by the user, or the current position of the caret.",
      "host": "Returns a reference to the DOM element the `ShadowRoot` is attached to.",
      "innerhtml": "Sets or returns a reference to the DOM tree inside the `ShadowRoot`.",
      "mode": "The mode of the `ShadowRoot`, either `open` or `closed`.\n      This defines whether or not the shadow root's internal features are accessible from JavaScript.",
      "pictureinpictureelement": "Returns the `Element` within the shadow tree that is currently being presented in picture-in-picture mode.",
      "pointerlockelement": "Returns the `Element` set as the target for mouse events while the pointer is locked.\n      `null` if lock is pending, pointer is unlocked, or if the target is in another tree.",
      "slotassignment": "Returns a string containing the type of slot assignment, either `manual` or `named`.",
      "stylesheets": "Returns a `StyleSheetList` of `CSSStyleSheet` objects for stylesheets explicitly linked into, or embedded in a shadow tree."
    }
  },
  "SharedStorageOperation": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`SharedStorageOperation`** interface of the Shared Storage API represents the base class for all output gate operation types.\n\nThe output gate types are detailed below:\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SharedStorageOperation."
  },
  "SharedStorageRunOperation": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`SharedStorageRunOperation`** interface of the Shared Storage API represents a Run output gate operation.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SharedStorageRunOperation."
  },
  "SharedStorageSelectURLOperation": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`SharedStorageSelectURLOperation`** interface of the Shared Storage API represents a URL Selection output gate operation.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SharedStorageSelectURLOperation."
  },
  "SharedStorageWorkletGlobalScope": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`SharedStorageWorkletGlobalScope`** interface of the Shared Storage API represents the global scope of a `SharedStorageWorklet` module.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SharedStorageWorkletGlobalScope."
  },
  "SharedStorageWorklet": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`SharedStorageWorklet`** interface of the Shared Storage API represents the shared storage worklet for the current origin.\n\n`SharedStorageWorklet` does not have its own properties or methods. Rather, it inherits the `addModule()` method from the `Worklet` interface. This method is used for adding a module.\n\nUnlike a regular `Worklet`:\n\n- If the calling site has not included the Shared Storage API in a privacy sandbox enrollment process, calls to `sharedStorageWorklet.addModule()` will be rejected.\n- `SharedStorageWorklet` allows only a single module to be added, for privacy reasons. Even with a successful enrollment, repeated calls to `addModule()` on the same shared storage worklet will be rejected.\n\n`SharedStorageWorklet` is accessed via `WindowSharedStorage.worklet`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SharedStorageWorklet."
  },
  "SharedWorker": {
    "docs": "The **`SharedWorker`** interface represents a specific kind of worker that can be accessed from several browsing contexts, such as several windows, iframes or even workers. They implement an interface different than dedicated workers and have a different global scope, `SharedWorkerGlobalScope`.\n\n**Note:** If SharedWorker can be accessed from several browsing contexts, all those browsing contexts must share the exact same origin (same protocol, host and port).\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker.",
    "properties": {
      "port": "Returns a `MessagePort` object used to communicate with and control the shared worker."
    }
  },
  "SharedWorkerGlobalScope": {
    "docs": "The **`SharedWorkerGlobalScope`** object (the `SharedWorker` global scope) is accessible through the `self` keyword. Some additional global functions, namespaces objects, and constructors, not typically associated with the worker global scope, but available on it, are listed in the JavaScript Reference. See the complete list of functions available to workers.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SharedWorkerGlobalScope.",
    "properties": {
      "close": "Discards any tasks queued in the `SharedWorkerGlobalScope`'s event loop, effectively closing this particular scope.",
      "name": "The name that the `SharedWorker` was (optionally) given when it was created using the `SharedWorker()` constructor. This is mainly useful for debugging purposes."
    }
  },
  "SourceBuffer": {
    "docs": "The **`SourceBuffer`** interface represents a chunk of media to be passed into an `HTMLMediaElement` and played, via a `MediaSource` object. This can be made up of one or several media segments.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer.",
    "properties": {
      "abort": "Aborts the current segment and resets the segment parser.",
      "appendbuffer": "Appends media segment data from an `ArrayBuffer`, a `TypedArray` or a `DataView` object to the `SourceBuffer`.",
      "appendbufferasync": "Starts the process of asynchronously appending the specified buffer to the `SourceBuffer`. Returns a `Promise` which is fulfilled once the buffer has been appended.",
      "appendwindowend": "Controls the timestamp for the end of the append window.",
      "appendwindowstart": "Controls the timestamp for the start of the [append window](https://w3c.github.io/media-source/#append-window). This is a timestamp range that can be used to filter what media data is appended to the `SourceBuffer`. Coded media frames with timestamps within this range will be appended, whereas those outside the range will be filtered out.",
      "audiotracks": "A list of the audio tracks currently contained inside the `SourceBuffer`.",
      "buffered": "Returns the time ranges that are currently buffered in the `SourceBuffer`.",
      "changetype": "Changes the MIME type that future calls to `appendBuffer()` will expect the new data to conform to.",
      "mode": "Controls how the order of media segments in the `SourceBuffer` is handled, in terms of whether they can be appended in any order, or they have to be kept in a strict sequence.",
      "remove": "Removes media segments within a specific time range from the `SourceBuffer`.",
      "removeasync": "Starts the process of asynchronously removing media segments in the specified range from the `SourceBuffer`. Returns a `Promise` which is fulfilled once all matching segments have been removed.",
      "texttracks": "A list of the text tracks currently contained inside the `SourceBuffer`.",
      "timestampoffset": "Controls the offset applied to timestamps inside media segments that are subsequently appended to the `SourceBuffer`.",
      "updating": "A boolean indicating whether the `SourceBuffer` is currently being updated â i.e. whether an `SourceBuffer.appendBuffer()` or `SourceBuffer.remove()` operation is currently in progress.",
      "videotracks": "A list of the video tracks currently contained inside the `SourceBuffer`."
    }
  },
  "SpeechGrammarList": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`SpeechGrammarList`** interface of the Web Speech API represents a list of `SpeechGrammar` objects containing words or patterns of words that we want the recognition service to recognize.\n\nGrammar is defined using [JSpeech Grammar Format](https://www.w3.org/TR/jsgf/) (**JSGF**.) Other formats may also be supported in the future.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SpeechGrammarList.",
    "properties": {
      "addfromstring": "Adds a grammar in a string to the `SpeechGrammarList` as a new `SpeechGrammar` object.",
      "addfromuri": "Takes a grammar present at a specific URI and adds it to the `SpeechGrammarList` as a new `SpeechGrammar` object.",
      "item": "Standard getter â allows individual `SpeechGrammar` objects to be retrieved from the `SpeechGrammarList` using array syntax.",
      "length": "Returns the number of `SpeechGrammar` objects contained in the `SpeechGrammarList`."
    }
  },
  "SpeechRecognitionErrorEvent": {
    "docs": "The **`SpeechRecognitionErrorEvent`** interface of the Web Speech API represents error messages from the recognition service.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionErrorEvent.",
    "properties": {
      "error": "Returns the type of error raised.",
      "message": "Returns a message describing the error in more detail."
    }
  },
  "SpeechRecognition": {
    "docs": "The **`SpeechRecognition`** interface of the Web Speech API is the controller interface for the recognition service; this also handles the `SpeechRecognitionEvent` sent from the recognition service.\n\n**Note:** On some browsers, like Chrome, using Speech Recognition on a web page involves a server-based recognition engine. Your audio is sent to a web service for recognition processing, so it won't work offline.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition.",
    "properties": {
      "abort": "Stops the speech recognition service from listening to incoming audio, and doesn't attempt to return a `SpeechRecognitionResult`.",
      "continuous": "Controls whether continuous results are returned for each recognition, or only a single result. Defaults to single (`false`.)",
      "grammars": "Returns and sets a collection of `SpeechGrammar` objects that represent the grammars that will be understood by the current `SpeechRecognition`.",
      "interimresults": "Controls whether interim results should be returned (`true`) or not (`false`.) Interim results are results that are not yet final (e.g. the `SpeechRecognitionResult.isFinal` property is `false`.)",
      "lang": "Returns and sets the language of the current `SpeechRecognition`. If not specified, this defaults to the HTML `lang` attribute value, or the user agent's language setting if that isn't set either.",
      "maxalternatives": "Sets the maximum number of `SpeechRecognitionAlternative`s provided per result. The default value is 1.",
      "start": "Starts the speech recognition service listening to incoming audio with intent to recognize grammars associated with the current `SpeechRecognition`.",
      "stop": "Stops the speech recognition service from listening to incoming audio, and attempts to return a `SpeechRecognitionResult` using the audio captured so far."
    }
  },
  "SpeechRecognitionAlternative": {
    "docs": "The **`SpeechRecognitionAlternative`** interface of the Web Speech API represents a single word that has been recognized by the speech recognition service.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionAlternative.",
    "properties": {
      "confidence": "Returns a numeric estimate between 0 and 1 of how confident the speech recognition system is that the recognition is correct.",
      "transcript": "Returns a string containing the transcript of the recognized word."
    }
  },
  "SpeechRecognitionResultList": {
    "docs": "The **`SpeechRecognitionResultList`** interface of the Web Speech API represents a list of `SpeechRecognitionResult` objects, or a single one if results are being captured in `non-continuous` mode.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionResultList.",
    "properties": {
      "item": "A standard getter that allows `SpeechRecognitionResult` objects in the list to be accessed via array syntax.",
      "length": "Returns the length of the \"array\" â the number of `SpeechRecognitionResult` objects in the list."
    }
  },
  "SpeechGrammar": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`SpeechGrammar`** interface of the Web Speech API represents a set of words or patterns of words that we want the recognition service to recognize.\n\nGrammar is defined using [JSpeech Grammar Format](https://www.w3.org/TR/jsgf/) (**JSGF**.) Other formats may also be supported in the future.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SpeechGrammar.",
    "properties": {
      "src": "Sets and returns a string containing the grammar from within in the `SpeechGrammar` object instance.",
      "weight": "Sets and returns the weight of the `SpeechGrammar` object."
    }
  },
  "ScriptProcessorNode": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe `ScriptProcessorNode` interface allows the generation, processing, or analyzing of audio using JavaScript.\n\n**Note:** This feature was replaced by AudioWorklets and the `AudioWorkletNode` interface.\n\nThe `ScriptProcessorNode` interface is an `AudioNode` audio-processing module that is linked to two buffers, one containing the input audio data, one containing the processed output audio data. An event, implementing the `AudioProcessingEvent` interface, is sent to the object each time the input buffer contains new data, and the event handler terminates when it has filled the output buffer with data.\n\n\n\nThe size of the input and output buffer are defined at the creation time, when the `BaseAudioContext.createScriptProcessor` method is called (both are defined by `BaseAudioContext.createScriptProcessor`'s `bufferSize` parameter). The buffer size must be a power of 2 between `256` and `16384`, that is `256`, `512`, `1024`, `2048`, `4096`, `8192` or `16384`. Small numbers lower the latency, but large number may be necessary to avoid audio breakup and glitches.\n\nIf the buffer size is not defined, which is recommended, the browser will pick one that its heuristic deems appropriate.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ScriptProcessorNode.",
    "properties": {
      "buffersize": "Returns an integer representing both the input and output buffer size. Its value can be a power of 2 value in the range `256` â `16384`."
    }
  },
  "SourceBufferList": {
    "docs": "The **`SourceBufferList`** interface represents a simple container list for multiple `SourceBuffer` objects.\n\nThe source buffer list containing the `SourceBuffer`s appended to a particular `MediaSource` can be retrieved using the `MediaSource.sourceBuffers` property.\n\nThe individual source buffers can be accessed using the bracket notation `[]`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SourceBufferList.",
    "properties": {
      "length": "Returns the number of `SourceBuffer` objects in the list."
    }
  },
  "SpeechRecognitionResult": {
    "docs": "The **`SpeechRecognitionResult`** interface of the Web Speech API represents a single recognition match, which may contain multiple `SpeechRecognitionAlternative` objects.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionResult.",
    "properties": {
      "isfinal": "A boolean value that states whether this result is final (true) or not (false) â if so, then this is the final time this result will be returned; if not, then this result is an interim result, and may be updated later on.",
      "item": "A standard getter that allows `SpeechRecognitionAlternative` objects within the result to be accessed via array syntax.",
      "length": "Returns the length of the \"array\" â the number of `SpeechRecognitionAlternative` objects contained in the result (also referred to as \"n-best alternatives\".)"
    }
  },
  "SpeechSynthesis": {
    "docs": "The **`SpeechSynthesis`** interface of the Web Speech API is the controller interface for the speech service; this can be used to retrieve information about the synthesis voices available on the device, start and pause speech, and other commands besides.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis.",
    "properties": {
      "cancel": "Removes all utterances from the utterance queue.",
      "getvoices": "Returns a list of `SpeechSynthesisVoice` objects representing all the available voices on the current device.",
      "pause": "Puts the `SpeechSynthesis` object into a paused state.",
      "paused": "A boolean value that returns `true` if the `SpeechSynthesis` object is in a paused state.",
      "pending": "A boolean value that returns `true` if the utterance queue contains as-yet-unspoken utterances.",
      "resume": "Puts the `SpeechSynthesis` object into a non-paused state: resumes it if it was already paused.",
      "speak": "Adds an `utterance` to the utterance queue; it will be spoken when any other utterances queued before it have been spoken.",
      "speaking": "A boolean value that returns `true` if an utterance is currently in the process of being spoken â even if `SpeechSynthesis` is in a paused state."
    }
  },
  "SpeechSynthesisEvent": {
    "docs": "The **`SpeechSynthesisEvent`** interface of the Web Speech API contains information about the current state of `SpeechSynthesisUtterance` objects that have been processed in the speech service.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisEvent.",
    "properties": {
      "charindex": "Returns the index position of the character in the `SpeechSynthesisUtterance.text` that was being spoken when the event was triggered.",
      "charlength": "Returns the number of characters left to be spoken after the `charIndex` position, if the speaking engine supports it. Returns 0 if the speaking engine can't provide the information.",
      "elapsedtime": "Returns the elapsed time in seconds after the `SpeechSynthesisUtterance.text` started being spoken that the event was triggered at.",
      "name": "Returns the name associated with certain types of events occurring as the `SpeechSynthesisUtterance.text` is being spoken: the name of the [SSML](https://www.w3.org/TR/speech-synthesis/#S3.3.2) marker reached in the case of a `mark` event, or the type of boundary reached in the case of a `boundary` event.",
      "utterance": "Returns the `SpeechSynthesisUtterance` instance that the event was triggered on."
    }
  },
  "SpeechRecognitionEvent": {
    "docs": "The **`SpeechRecognitionEvent`** interface of the Web Speech API represents the event object for the `result` and `nomatch` events, and contains all the data associated with an interim or final speech recognition result.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionEvent.",
    "properties": {
      "emma": "Returns an Extensible MultiModal Annotation markup language (EMMA) â XML â representation of the result.",
      "interpretation": "Returns the semantic meaning of what the user said.",
      "resultindex": "Returns the lowest index value result in the `SpeechRecognitionResultList` \"array\" that has actually changed.",
      "results": "Returns a `SpeechRecognitionResultList` object representing all the speech recognition results for the current session."
    }
  },
  "StaticRange": {
    "docs": "The DOM **`StaticRange`** interface extends `AbstractRange` to provide a method to specify a range of content in the DOM whose contents don't update to reflect changes which occur within the DOM tree.\n\nThis interface offers the same set of properties and methods as `AbstractRange`.\n\n`AbstractRange` and `StaticRange` are not available from web workers.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/StaticRange.",
    "properties": {
      "collapsed": "Returns a Boolean value that is `true` if the range's start and end positions are the same, resulting in a range of length 0.",
      "endcontainer": "Returns the DOM `Node` which contains the ending point of the range. The offset into the node at which the end position is located is indicated by `endOffset`.",
      "endoffset": "Returns an integer value indicating the offset into the node given by `endContainer` at which the last character of the range is found.",
      "startcontainer": "Returns the DOM `Node` which contains the starting point of the range (which is in turn identified by `startOffset`.",
      "startoffset": "Returns an integer value indicating the offset into the node specified by `startContainer` at which the first character of the range is located."
    }
  },
  "SpeechSynthesisErrorEvent": {
    "docs": "The **`SpeechSynthesisErrorEvent`** interface of the Web Speech API contains information about any errors that occur while processing `SpeechSynthesisUtterance` objects in the speech service.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisErrorEvent.",
    "properties": {
      "error": "Returns an error code indicating what has gone wrong with a speech synthesis attempt."
    }
  },
  "Storage": {
    "docs": "The **`Storage`** interface of the Web Storage API provides access to a particular domain's session or local storage. It allows, for example, the addition, modification, or deletion of stored data items.\n\nTo manipulate, for instance, the session storage for a domain, a call to `Window.sessionStorage` is made; whereas for local storage the call is made to `Window.localStorage`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Storage.",
    "properties": {
      "clear": "When invoked, will empty all keys out of the storage.",
      "getitem": "When passed a key name, will return that key's value.",
      "key": "When passed a number `n`, this method will return the name of the nth key in the storage.",
      "length": "Returns an integer representing the number of data items stored in the `Storage` object.",
      "removeitem": "When passed a key name, will remove that key from the storage.",
      "setitem": "When passed a key name and value, will add that key to the storage, or update that key's value if it already exists."
    }
  },
  "StorageEvent": {
    "docs": "The **`StorageEvent`** interface is implemented by the `storage` event, which is\n  sent to a window\n  when a storage area the window has access to is changed within the context of another document.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/StorageEvent."
  },
  "SpeechSynthesisUtterance": {
    "docs": "The **`SpeechSynthesisUtterance`** interface of the Web Speech API represents a speech request.\n  It contains the content the speech service should read and information about how to read it (e.g. language, pitch and volume.)\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance.",
    "properties": {
      "lang": "Gets and sets the language of the utterance.",
      "pitch": "Gets and sets the pitch at which the utterance will be spoken at.",
      "rate": "Gets and sets the speed at which the utterance will be spoken at.",
      "text": "Gets and sets the text that will be synthesized when the utterance is spoken.",
      "voice": "Gets and sets the voice that will be used to speak the utterance.",
      "volume": "Gets and sets the volume that the utterance will be spoken at."
    }
  },
  "SpeechSynthesisVoice": {
    "docs": "The **`SpeechSynthesisVoice`** interface of the Web Speech API represents a voice that the system supports.\n  Every `SpeechSynthesisVoice` has its own relative speech service including information about language, name and URI.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisVoice.",
    "properties": {
      "default": "A boolean value indicating whether the voice is the default voice for the current app language (`true`), or not (`false`.)",
      "lang": "Returns a BCP 47 language tag indicating the language of the voice.",
      "localservice": "A boolean value indicating whether the voice is supplied by a local speech synthesizer service (`true`), or a remote speech synthesizer service (`false`.)",
      "name": "Returns a human-readable name that represents the voice.",
      "voiceuri": "Returns the type of URI and location of the speech synthesis service for this voice."
    }
  },
  "StyleSheet": {
    "docs": "An object implementing the `StyleSheet` interface represents a single style sheet. CSS style sheets will further implement the more specialized `CSSStyleSheet` interface.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet.",
    "properties": {
      "disabled": "A boolean value representing whether the current stylesheet has been applied or not.",
      "href": "Returns a string representing the location of the stylesheet.",
      "media": "Returns a `MediaList` representing the intended destination medium for style information.",
      "ownernode": "Returns a `Node` associating this style sheet with the current document.",
      "parentstylesheet": "Returns a `StyleSheet` including this one, if any; returns `null` if there aren't any.",
      "title": "Returns a string representing the advisory title of the current style sheet.",
      "type": "Returns a string representing the style sheet language for this style sheet."
    }
  },
  "StorageManager": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Note:** This feature is available in Web Workers\n\nThe **`StorageManager`** interface of the Storage API provides an interface for managing persistence permissions and estimating available storage. You can get a reference to this interface using either `navigator.storage` or `WorkerNavigator.storage`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/StorageManager.",
    "properties": {
      "estimate": "Returns a `Promise` that resolves to an object containing usage and quota numbers for your origin.",
      "getdirectory": "Used to obtain a reference to a `FileSystemDirectoryHandle` object allowing access to a directory and its contents, stored in the origin private file system. Returns a `Promise` that fulfills with a `FileSystemDirectoryHandle` object.",
      "persist": "Returns a `Promise` that resolves to `true` if the user agent is able to persist your site's storage.",
      "persisted": "Returns a `Promise` that resolves to `true` if persistence has already been granted for your site's storage."
    }
  },
  "SubmitEvent": {
    "docs": "The **`SubmitEvent`** interface defines the object used to represent an HTML form's `submit` event. This event is fired at the `<form>` when the form's submit action is invoked.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SubmitEvent."
  },
  "SubtleCrypto": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`SubtleCrypto`** interface of the Web Crypto API provides a number of low-level cryptographic functions. Access to the features of `SubtleCrypto` is obtained through the `subtle` property of the `Crypto` object you get from the `crypto` property.\n\n**Warning:** This API provides a number of low-level cryptographic primitives. It's very easy to misuse them, and the pitfalls involved can be very subtle.\nEven assuming you use the basic cryptographic functions correctly, secure key management and overall security system design are extremely hard to get right, and are generally the domain of specialist security experts.\nErrors in security system design and implementation can make the security of the system completely ineffective.\nPlease learn and experiment, but don't guarantee or imply the security of your work before an individual knowledgeable in this subject matter thoroughly reviews it. The [Crypto 101 Course](https://www.crypto101.io/) can be a great place to start learning about the design and implementation of secure systems.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto.",
    "properties": {
      "decrypt": "Returns a `Promise` that fulfills with the clear data corresponding to the encrypted text, algorithm, and key given as parameters.",
      "derivebits": "Returns a `Promise` that fulfills with a newly generated buffer of pseudo-random bits derived from the master key and specific algorithm given as parameters.",
      "derivekey": "Returns a `Promise` that fulfills with a newly generated `CryptoKey` derived from the master key and specific algorithm given as parameters.",
      "digest": "Returns a `Promise` that fulfills with a digest generated from the algorithm and text given as parameters.",
      "encrypt": "Returns a `Promise` that fulfills with the encrypted data corresponding to the clear text, algorithm, and key given as parameters.",
      "exportkey": "Returns a `Promise` that fulfills with the raw key data containing the key in the requested format.",
      "generatekey": "Returns a `Promise` that fulfills with a newly-generated `CryptoKey`, for symmetrical algorithms, or a `CryptoKeyPair`, containing two newly generated keys, for asymmetrical algorithms. These will match the algorithm, usages, and extractability given as parameters.",
      "importkey": "Returns a `Promise` that fulfills with a `CryptoKey` corresponding to the format, the algorithm, raw key data, usages, and extractability given as parameters.",
      "sign": "Returns a `Promise` that fulfills with the signature corresponding to the text, algorithm, and key given as parameters.",
      "unwrapkey": "Returns a `Promise` that fulfills with a `CryptoKey` corresponding to the wrapped key given in the parameter.",
      "verify": "Returns a `Promise` that fulfills with a boolean value indicating if the signature given as a parameter matches the text, algorithm, and key that are also given as parameters.",
      "wrapkey": "Returns a `Promise` that fulfills with a wrapped symmetric key for usage (transfer and storage) in insecure environments. The wrapped key matches the format specified in the given parameters, and wrapping is done by the given wrapping key, using the specified algorithm."
    }
  },
  "SyncEvent": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`SyncEvent`** interface represents a sync action that is dispatched on the `ServiceWorkerGlobalScope` of a ServiceWorker.\n\nThis interface inherits from the `ExtendableEvent` interface.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SyncEvent.",
    "properties": {
      "lastchance": "Returns `true` if the user agent will not make further synchronization attempts after the current attempt.",
      "tag": "Returns the developer-defined identifier for this `SyncEvent`."
    }
  },
  "StylePropertyMap": {
    "docs": "The **`StylePropertyMap`** interface of the CSS Typed Object Model API provides a representation of a CSS declaration block that is an alternative to `CSSStyleDeclaration`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/StylePropertyMap.",
    "properties": {
      "append": "Adds a new CSS declaration to the `StylePropertyMap` with the given property and value.",
      "clear": "Removes all declarations in the `StylePropertyMap`.",
      "delete": "Removes the CSS declaration with the given property.",
      "set": "Changes the CSS declaration with the given property."
    }
  },
  "StylePropertyMapReadOnly": {
    "docs": "The **`StylePropertyMapReadOnly`** interface of the CSS Typed Object Model API provides a read-only representation of a CSS declaration block that is an alternative to `CSSStyleDeclaration`. Retrieve an instance of this interface using `Element.computedStyleMap()`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/StylePropertyMapReadOnly.",
    "properties": {
      "entries": "Returns an array of a given object's own enumerable property `[key, value]` pairs, in the same order as that provided by a `for...in` loop (the difference being that a for-in loop enumerates properties in the prototype chain as well).",
      "foreach": "Executes a provided function once for each element of `StylePropertyMapReadOnly`.",
      "get": "Returns the value of the specified property.",
      "getall": "Returns an array of `CSSStyleValue` objects containing the values for the provided property.",
      "has": "Indicates whether the specified property is in the `StylePropertyMapReadOnly` object.",
      "keys": "Returns a new array iterator containing the keys for each item in `StylePropertyMapReadOnly`.",
      "size": "Returns an unsigned long integer containing the size of the `StylePropertyMapReadOnly` object.",
      "values": "Returns a new array iterator containing the values for each index in the `StylePropertyMapReadOnly` object."
    }
  },
  "TaskController": {
    "docs": "The **`TaskController`** interface of the Prioritized Task Scheduling API represents a controller object that can be used to both abort and change the priority of one or more prioritized tasks.\n  If there is no need to change task priorities, then `AbortController` can be used instead.\n\nA new `TaskController` instance is created using the `TaskController()` constructor, optionally specifying a priority for its associated signal (a `TaskSignal`).\n  If not specified, the signal will have a priority of `\"user-visible\"` by default.\n\nThe controller's signal can be passed as an argument to the `Scheduler.postTask()` method for one or more tasks.\n  For mutable tasks (only) the task is initialized with the signal priority, and can later be changed by calling `TaskController.setPriority()`.\n  For immutable tasks, any priority initialized or set by the controller is ignored.\n\nTasks can be aborted by calling `abort()` on the controller.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/TaskController.",
    "properties": {
      "setpriority": "Sets the priority of the controller's `signal`, and hence the priority of any tasks with which it is associated.\n      This notifies observers of the priority change by dispatching a `prioritychange` event.",
      "signal": "Returns a `TaskSignal` object instance.\n      The signal is passed to tasks so that they can be aborted or re-prioritized by the controller.\n      The property is inherited from `AbortController`."
    }
  },
  "StyleSheetList": {
    "docs": "The `StyleSheetList` interface represents a list of `CSSStyleSheet` objects. An instance of this object can be returned by `Document.styleSheets`.\n\nIt is an array-like object but can't be iterated over using `Array` methods. However it can be iterated over in a standard `for` loop over its indices, or converted to an `Array`.\n\n**Note:** This interface was an [attempt to create an unmodifiable list](https://stackoverflow.com/questions/74630989/why-use-domstringlist-rather-than-an-array/74641156#74641156) and only continues to be supported to not break code that's already using it. Modern APIs use types that wrap around ECMAScript array types instead, so you can treat them like ECMAScript arrays, and at the same time impose additional semantics on their usage (such as making their items read-only).\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/StyleSheetList.",
    "properties": {
      "item": "Returns the `CSSStyleSheet` object at the index passed in, or `null` if no item exists for that index.",
      "length": "Returns the number of `CSSStyleSheet` objects in the collection."
    }
  },
  "StereoPannerNode": {
    "docs": "The `StereoPannerNode` interface of the Web Audio API represents a simple stereo panner node that can be used to pan an audio stream left or right. It is an `AudioNode` audio-processing module that positions an incoming audio stream in a stereo image using a low-cost equal-power [panning algorithm](https://webaudio.github.io/web-audio-api/#panning-algorithm).\n\nThe `pan` property takes a unitless value between `-1` (full left pan) and `1` (full right pan). This interface was introduced as a much simpler way to apply a simple panning effect than having to use a full `PannerNode`.\n\n\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/StereoPannerNode.",
    "properties": {
      "pan": "An a-rate `AudioParam` representing the amount of panning to apply."
    }
  },
  "TaskPriorityChangeEvent": {
    "docs": "The **`TaskPriorityChangeEvent`** is the interface for the `prioritychange` event.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/TaskPriorityChangeEvent.",
    "properties": {
      "previouspriority": "Returns the priority of the corresponding `TaskSignal` before this `prioritychange` event."
    }
  },
  "TaskSignal": {
    "docs": "The **`TaskSignal`** interface of the Prioritized Task Scheduling API represents a signal object that allows you to communicate with a prioritized task, and abort it or change the priority (if required) via a `TaskController` object.\n\nAn object of this type is created, and associated with, a `TaskController`.\n  The initial priority of the signal may be set by specifying it as an argument to the `TaskController()` constructor (by default it is `\"user-visible\"`).\n  The priority can be changed by calling `TaskController.setPriority()` on the controller.\n\nThe signal may be passed as the `options.signal` argument in `Scheduler.postTask()`, after which it's associated controller can be used to abort the task.\n  If the task priority is mutable, the controller can also be used to change the task's priority.\n  Abortable tasks that do not need the priority to change may instead specify an `AbortSignal` as the `options.signal` argument.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/TaskSignal.",
    "properties": {
      "any": "Returns an **`TaskSignal`** that aborts when any of the given abort signals abort.",
      "priority": "Returns the priority of the signal."
    }
  },
  "TextDecoder": {
    "docs": "The **`TextDecoder`** interface represents a decoder for a specific text encoding, such as `UTF-8`, `ISO-8859-2`, `KOI8-R`, `GBK`, etc. A decoder takes a stream of bytes as input and emits a stream of code points.\n\n**Note:** This feature is available in Web Workers\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder.",
    "properties": {
      "decode": "Returns a string containing the text decoded with the method of the specific `TextDecoder` object.",
      "encoding": "A string containing the name of the decoder, which is a string describing the method the `TextDecoder` will use.",
      "fatal": "A `Boolean` indicating whether the error mode is fatal.",
      "ignorebom": "A `Boolean` indicating whether the [byte order mark](https://www.w3.org/International/questions/qa-byte-order-mark) is ignored."
    }
  },
  "Text": {
    "docs": "The **`Text`** interface represents a text `node` in a DOM tree.\n\nTo understand what a text node is, consider the following document:\n\n```\n<html lang=\"en\" class=\"e\">\n  <head>\n    <title>Aliens?</title>\n  </head>\n  <body>\n    Why yes.\n  </body>\n</html>\n```\n\nIn that document, there are five text nodes, with the following contents:\n\n- `\"\\n \"` (after the `<head>` start tag, a newline followed by four spaces)\n- `\"Aliens?\"` (the contents of the `title` element)\n- `\"\\n \"` (after the `</head>` end tag, a newline followed by two spaces)\n- `\"\\n \"` (after the `<body>` start tag, a newline followed by two spaces)\n- `\"\\n Why yes.\\n \\n\\n\"` (the contents of the `body` element)\n\nEach of those text nodes is an object that has the properties and methods documented in this article.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Text.",
    "properties": {
      "assignedslot": "Returns a `HTMLSlotElement` representing the `<slot>` the node is inserted in.",
      "splittext": "Breaks the node into two nodes at a specified offset.",
      "wholetext": "Returns a string containing the text of all `Text` nodes logically adjacent to this `Node`, concatenated in document order."
    }
  },
  "TextDecoderStream": {
    "docs": "The **`TextDecoderStream`** interface of the Encoding API converts a stream of text in a binary encoding, such as UTF-8 etc., to a stream of strings.\n  It is the streaming equivalent of `TextDecoder`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/TextDecoderStream.",
    "properties": {
      "encoding": "An encoding.",
      "fatal": "A `boolean` indicating if the error mode is fatal.",
      "ignorebom": "A `boolean` indicating whether the byte order mark is ignored.",
      "readable": "Returns the `ReadableStream` instance controlled by this object.",
      "writable": "Returns the `WritableStream` instance controlled by this object."
    }
  },
  "TextEncoder": {
    "docs": "The **`TextEncoder`** interface takes a stream of code points as input and emits a stream of UTF-8 bytes.\n\n**Note:** This feature is available in Web Workers\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder.",
    "properties": {
      "encode": "Takes a string as input, and returns a `Uint8Array` containing UTF-8 encoded text.",
      "encodeinto": "Takes a string to encode and a destination `Uint8Array` to put resulting UTF-8 encoded text into, and returns an object indicating the progress of the encoding.\n      This is potentially more performant than the older `encode()` method.",
      "encoding": "Always returns `utf-8`."
    }
  },
  "SyncManager": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`SyncManager`** interface of the ServiceWorker API provides an interface for registering and listing sync registrations.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/SyncManager.",
    "properties": {
      "gettags": "Return a list of developer-defined identifiers for SyncManager registration.",
      "register": "Create a new sync registration and return a `Promise`."
    }
  },
  "TextTrack": {
    "docs": "The `TextTrack` interfaceâpart of the API for handling WebVTT (text tracks on media presentations)âdescribes and controls the text track associated with a particular `<track>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/TextTrack.",
    "properties": {
      "activecues": "A `TextTrackCueList` object listing the currently active set of text track cues. Track cues are active if the current playback position of the media is between the cues' start and end times. Thus, for displayed cues such as captions or subtitles, the active cues are currently being displayed.",
      "addcue": "Adds a cue (specified as a `TextTrackCue` object) to the track's list of cues.",
      "cues": "A `TextTrackCueList` which contains all of the track's cues.",
      "id": "A string which identifies the track, if it has one. If it doesn't have an ID, then this value is an empty string (`\"\"`). If the `TextTrack` is associated with a `<track>` element, then the track's ID matches the element's ID.",
      "inbandmetadatatrackdispatchtype": "Returns a string which indicates the track's in-band metadata track dispatch type.",
      "kind": "Returns a string indicating what kind of text track the `TextTrack` describes. It must be one of the permitted values.",
      "label": "A human-readable string which contains the text track's label, if one is present; otherwise, this is an empty string (`\"\"`), in which case a custom label may need to be generated by your code using other attributes of the track, if the track's label needs to be exposed to the user.",
      "language": "A string which specifies the text language in which the text track's contents is written. The value must adhere to the format specified in [RFC 5646: Tags for Identifying Languages (also known as BCP 47)](https://datatracker.ietf.org/doc/html/rfc5646), just like the HTML `lang` attribute. For example, this can be `\"en-US\"` for United States English or `\"pt-BR\"` for Brazilian Portuguese.",
      "mode": "A string specifying the track's current mode, which must be one of the permitted values. Changing this property's value changes the track's current mode to match. The default is `disabled`, unless the `<track>` element's `default` boolean attribute is set to `true` â in which case the default mode is `showing`.",
      "removecue": "Removes a cue (specified as a `TextTrackCue` object) from the track's list of cues."
    }
  },
  "TaskAttributionTiming": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`TaskAttributionTiming`** interface returns information about the work involved in a long task and its associate frame context. The frame context, also called the container, is the iframe, embed or object that is being implicated, on the whole, for a long task.\n\nYou usually work with `TaskAttributionTiming` objects when observing long tasks.\n\n`TaskAttributionTiming` inherits from `PerformanceEntry`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/TaskAttributionTiming.",
    "properties": {
      "containerid": "Returns the container's `id` attribute.",
      "containername": "Returns the container's `name` attribute.",
      "containersrc": "Returns the container's `src` attribute.",
      "containertype": "Returns the type of frame container, one of `iframe`, `embed`, or `object`.",
      "tojson": "Returns a JSON representation of the `TaskAttributionTiming` object."
    }
  },
  "TextMetrics": {
    "docs": "The **`TextMetrics`** interface represents the dimensions of a piece of text in the canvas; a `TextMetrics` instance can be retrieved using the `CanvasRenderingContext2D.measureText()` method.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics.",
    "properties": {
      "actualboundingboxascent": "Returns the distance from the horizontal line indicated by the `CanvasRenderingContext2D.textBaseline` attribute to the top of the bounding rectangle used to render the text, in CSS pixels.",
      "actualboundingboxdescent": "Returns the distance from the horizontal line indicated by the `CanvasRenderingContext2D.textBaseline` attribute to the bottom of the bounding rectangle used to render the text, in CSS pixels.",
      "actualboundingboxleft": "Distance parallel to the baseline from the alignment point given by the `CanvasRenderingContext2D.textAlign` property to the left side of the bounding rectangle of the given text, in CSS pixels; positive numbers indicating a distance going left from the given alignment point.",
      "actualboundingboxright": "Returns the distance from the alignment point given by the `CanvasRenderingContext2D.textAlign` property to the right side of the bounding rectangle of the given text, in CSS pixels. The distance is measured parallel to the baseline.",
      "alphabeticbaseline": "Returns the distance from the horizontal line indicated by the `CanvasRenderingContext2D.textBaseline` property to the alphabetic baseline of the line box, in CSS pixels.",
      "emheightascent": "Returns the distance from the horizontal line indicated by the `CanvasRenderingContext2D.textBaseline` property to the top of the em square in the line box, in CSS pixels.",
      "emheightdescent": "Returns the distance from the horizontal line indicated by the `CanvasRenderingContext2D.textBaseline` property to the bottom of the em square in the line box, in CSS pixels.",
      "fontboundingboxascent": "Returns the distance from the horizontal line indicated by the `CanvasRenderingContext2D.textBaseline` attribute to the top of the highest bounding rectangle of all the fonts used to render the text, in CSS pixels.",
      "fontboundingboxdescent": "Returns the distance from the horizontal line indicated by the `CanvasRenderingContext2D.textBaseline` attribute to the bottom of the bounding rectangle of all the fonts used to render the text, in CSS pixels.",
      "hangingbaseline": "Returns the distance from the horizontal line indicated by the `CanvasRenderingContext2D.textBaseline` property to the hanging baseline of the line box, in CSS pixels.",
      "ideographicbaseline": "Returns the distance from the horizontal line indicated by the `CanvasRenderingContext2D.textBaseline` property to the ideographic baseline of the line box, in CSS pixels.",
      "width": "Returns the width of a segment of inline text in CSS pixels. It takes into account the current font of the context."
    }
  },
  "TimeEvent": {
    "docs": "The **`TimeEvent`** interface, a part of SVG SMIL animation, provides specific contextual information associated with Time events.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/TimeEvent.",
    "properties": {
      "detail": "A `long` that specifies some detail information about the Event, depending on the type of the event. For this event type, indicates the repeat number for the animation.",
      "inittimeevent": "Used to initialize the value of a TimeEvent created through the DocumentEvent interface. This method may only be called before the TimeEvent has been dispatched via the dispatchEvent method, though it may be called multiple times during that phase if necessary.",
      "view": "A WindowProxy that identifies the Window from which the event was generated."
    }
  },
  "TextTrackCueList": {
    "docs": "The **`TextTrackCueList`** array-like object represents a dynamically updating list of `TextTrackCue` objects.\n\nThis interface has no constructor. Retrieve an instance of this object with `TextTrack.cues` which returns all of the cues in a `TextTrack` object.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/TextTrackCueList.",
    "properties": {
      "getcuebyid": "Returns the first `TextTrackCue` object with the identifier passed to it.",
      "length": "An `unsigned long` that is the number of cues in the list."
    }
  },
  "ToggleEvent": {
    "docs": "The **`ToggleEvent`** interface represents an event notifying the user when a popover element's state toggles between showing and hidden.\n\nIt is the event object for the `HTMLElement` `beforetoggle` and `toggle` events, which fire on popovers when they transition between showing and hidden (before and after, respectively).\n\n**Note:** `ToggleEvent` is unrelated to the `HTMLDetailsElement` `toggle` event, which fires on a `<details>` element when its `open`/`closed` state is toggled. Its event object is a generic `Event`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ToggleEvent.",
    "properties": {
      "newstate": "A string (either `\"open\"` or `\"closed\"`), representing the state the element is transitioning to.",
      "oldstate": "A string (either `\"open\"` or `\"closed\"`), representing the state the element is transitioning from."
    }
  },
  "Touch": {
    "docs": "The **`Touch`** interface represents a single contact point on a touch-sensitive device. The contact point is commonly a finger or stylus and the device may be a touchscreen or trackpad.\n\nThe `Touch.radiusX`, `Touch.radiusY`, and `Touch.rotationAngle` describe the area of contact between the user and the screen, the touch area. This can be helpful when dealing with imprecise pointing devices such as fingers. These values are set to describe an ellipse that as closely as possible matches the entire area of contact (such as the user's fingertip).\n\n**Note:** Many of the properties' values are hardware-dependent; for example, if the device doesn't have a way to detect the amount of pressure placed on the surface, the `force` value will always be 0. This may also be the case for `radiusX` and `radiusY`; if the hardware reports only a single point, these values will be 1.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Touch.",
    "properties": {
      "clientx": "Returns the X coordinate of the touch point relative to the left edge of the browser viewport, not including any scroll offset.",
      "clienty": "Returns the Y coordinate of the touch point relative to the top edge of the browser viewport, not including any scroll offset.",
      "force": "Returns the amount of pressure being applied to the surface by the user, as a `float` between `0.0` (no pressure) and `1.0` (maximum pressure).",
      "identifier": "Returns a unique identifier for this `Touch` object. A given touch point (say, by a finger) will have the same identifier for the duration of its movement around the surface. This lets you ensure that you're tracking the same touch all the time.",
      "pagex": "Returns the X coordinate of the touch point relative to the left edge of the document. Unlike `clientX`, this value includes the horizontal scroll offset, if any.",
      "pagey": "Returns the Y coordinate of the touch point relative to the top of the document. Unlike `clientY,` this value includes the vertical scroll offset, if any.",
      "radiusx": "Returns the X radius of the ellipse that most closely circumscribes the area of contact with the screen. The value is in pixels of the same scale as `screenX`.",
      "radiusy": "Returns the Y radius of the ellipse that most closely circumscribes the area of contact with the screen. The value is in pixels of the same scale as `screenY`.",
      "rotationangle": "Returns the angle (in degrees) that the ellipse described by radiusX and radiusY must be rotated, clockwise, to most accurately cover the area of contact between the user and the surface.",
      "screenx": "Returns the X coordinate of the touch point relative to the left edge of the screen.",
      "screeny": "Returns the Y coordinate of the touch point relative to the top edge of the screen.",
      "target": "Returns the `Element` on which the touch point started when it was first placed on the surface, even if the touch point has since moved outside the interactive area of that element or even been removed from the document."
    }
  },
  "TextTrackCue": {
    "docs": "**`TextTrackCue`** is an abstract class which is used as the basis for the various derived cue types, such as `VTTCue`; you will instead work with those derived types. These cues represent strings of text presented for some duration of time during the performance of a `TextTrack`. The cue includes the start time (the time at which the text will be displayed) and the end time (the time at which it will be removed from the display), as well as other information.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/TextTrackCue.",
    "properties": {
      "endtime": "A `double` that represents the video time that the cue will stop being displayed, in seconds.",
      "id": "A string that identifies the cue.",
      "pauseonexit": "A `boolean` for whether the video will pause when this cue stops being displayed.",
      "starttime": "A `double` that represents the video time that the cue will start being displayed, in seconds.",
      "track": "The `TextTrack` that this cue belongs to, or `null` if it doesn't belong to any."
    }
  },
  "TimeRanges": {
    "docs": "When loading a media resource for use by an `<audio>` or `<video>` element, the **`TimeRanges`** interface is used for representing the time ranges of the media resource that have been buffered, the time ranges that have been played, and the time ranges that are seekable.\n\nA `TimeRanges` object includes one or more ranges of time, each specified by a starting time offset and an ending time offset. You reference each time range by using the `start()` and `end()` methods, passing the index number of the time range you want to retrieve.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges.",
    "properties": {
      "end": "Returns the time for the end of the specified range.",
      "length": "Returns an `unsigned long` representing the number of time ranges represented by the time range object.",
      "start": "Returns the time for the start of the range with the specified index."
    }
  },
  "TextTrackList": {
    "docs": "The **`TextTrackList`** interface is used to represent a list of the text tracks defined by the `<track>` element, with each track represented by a separate `textTrack` object in the list.\n\nRetrieve an instance of this object with the `textTracks` property of an `HTMLMediaElement` object.\n\nFor a given `HTMLMediaElement` object media, the individual tracks can be accessed using:\n\n- `media.TextTracks[n]`, to get the n-th text track from the object's list of text tracks\n- the `media.textTracks`.`getTrackById()` method\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/TextTrackList."
  },
  "TransformStream": {
    "docs": "The **`TransformStream`** interface of the Streams API represents a concrete implementation of the pipe chain transform stream concept.\n\nIt may be passed to the `ReadableStream.pipeThrough()` method in order to transform a stream of data from one format into another.\n  For example, it might be used to decode (or encode) video frames, decompress data, or convert the stream from XML to JSON.\n\nA transformation algorithm may be provided as an optional argument to the object constructor.\n  If not supplied, data is not modified when piped through the stream.\n\n`TransformStream` is a transferable object.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/TransformStream.",
    "properties": {
      "readable": "The `readable` end of a `TransformStream`.",
      "writable": "The `writable` end of a `TransformStream`."
    }
  },
  "TextEncoderStream": {
    "docs": "The **`TextEncoderStream`** interface of the Encoding API converts a stream of strings into bytes in the UTF-8 encoding. It is the streaming equivalent of `TextEncoder`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/TextEncoderStream.",
    "properties": {
      "encoding": "Always returns \"`utf-8`\".",
      "readable": "Returns the `ReadableStream` instance controlled by this object.",
      "writable": "Returns the `WritableStream` instance controlled by this object."
    }
  },
  "TrackEvent": {
    "docs": "The **`TrackEvent`** interface, which is part of the HTML DOM specification, is used for events which represent changes to a set of available tracks on an HTML media element; these events are `addtrack` and `removetrack`.\n\nIt's important not to confuse `TrackEvent` with the `RTCTrackEvent` interface, which is used for tracks which are part of an `RTCPeerConnection`.\n\nEvents based on `TrackEvent` are always sent to one of the media track list types:\n\n- Events involving video tracks are always sent to the `VideoTrackList` found in `HTMLMediaElement.videoTracks`\n- Events involving audio tracks are always sent to the `AudioTrackList` specified in `HTMLMediaElement.audioTracks`\n- Events affecting text tracks are sent to the `TextTrackList` object indicated by `HTMLMediaElement.textTracks`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/TrackEvent."
  },
  "TransformStreamDefaultController": {
    "docs": "The **`TransformStreamDefaultController`** interface of the Streams API provides methods to manipulate the associated `ReadableStream` and `WritableStream`.\n\nWhen constructing a `TransformStream`, the `TransformStreamDefaultController` is created. It therefore has no constructor. The way to get an instance of `TransformStreamDefaultController` is via the callback methods of `TransformStream()`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/TransformStreamDefaultController.",
    "properties": {
      "desiredsize": "Returns the desired size to fill the readable side of the stream's internal queue.",
      "enqueue": "Enqueues a chunk (single piece of data) in the readable side of the stream.",
      "error": "Errors both the readable and writable side of the transform stream.",
      "terminate": "Closes the readable side and errors the writable side of the stream."
    }
  },
  "TransitionEvent": {
    "docs": "The **`TransitionEvent`** interface represents events providing information related to transitions.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent.",
    "properties": {
      "elapsedtime": "A `float` giving the amount of time the transition has been running, in seconds, when this event fired. This value is not affected by the `transition-delay` property.",
      "propertyname": "A string containing the name CSS property associated with the transition.",
      "pseudoelement": "A string, starting with `::`, containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string: `''`."
    }
  },
  "TreeWalker": {
    "docs": "The **`TreeWalker`** object represents the nodes of a document subtree and a position within them.\n\nA `TreeWalker` can be created using the `Document.createTreeWalker()` method.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker.",
    "properties": {
      "currentnode": "Is the `Node` on which the `TreeWalker` is currently pointing at.",
      "filter": "Returns a `NodeFilter` used to select the relevant nodes.",
      "firstchild": "Moves the current `Node` to the first visible child of the current node, and returns the found child. It also moves the current node to this child. If no such child exists, returns `null` and the current node is not changed. Note that the node returned by `firstChild()` is dependent on the value of `whatToShow` set during instantiation of the `TreeWalker` object. Assuming the following HTML tree, and if you set the `whatToShow` to `NodeFilter.SHOW_ALL` a call to `firstChild()` will return a `Text` node and not an `HTMLDivElement` object.\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head><title>Demo</title>\n  <body>\n    <div id=\"container\"></div>\n  </body>\n</html>\n```\n\n```\nlet walker = document.createTreeWalker(document.body, NodeFilter.SHOW_ALL);\nlet node = walker.firstChild(); // nodeName: \"#text\"\n```\n\nBut if we do:\n\n```\nlet walker = document.createTreeWalker(\n  document.body,\n  NodeFilter.SHOW_ELEMENT,\n);\nlet node = walker.firstChild(); // nodeName: \"DIV\"\n```\n\nThe same applies to `nextSibling()`, `previousSibling()`, `firstChild()` and `lastChild()`",
      "lastchild": "Moves the current `Node` to the last visible child of the current node, and returns the found child. It also moves the current node to this child. If no such child exists, `null` is returned and the current node is not changed.",
      "nextnode": "Moves the current `Node` to the next visible node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists, returns `null` and the current node is not changed.",
      "nextsibling": "Moves the current `Node` to its next sibling, if any, and returns the found sibling. If there is no such node, `null` is returned and the current node is not changed.",
      "parentnode": "Moves the current `Node` to the first visible ancestor node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists, or if it is before that the root node defined at the object construction, returns `null` and the current node is not changed.",
      "previousnode": "Moves the current `Node` to the previous visible node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists, or if it is before that the root node defined at the object construction, returns `null` and the current node is not changed.",
      "previoussibling": "Moves the current `Node` to its previous sibling, if any, and returns the found sibling. If there is no such node, return `null` and the current node is not changed.",
      "root": "Returns a `Node` representing the root node as specified when the `TreeWalker` was created.",
      "whattoshow": "Returns an `unsigned long` being a bitmask made of constants describing the types of `Node` that must be presented. Non-matching nodes are skipped, but their children may be included, if relevant. The possible values are:"
    }
  },
  "TouchEvent": {
    "docs": "The **`TouchEvent`** interface represents an `UIEvent` which is sent when the state of contacts with a touch-sensitive surface changes. This surface can be a touch screen or trackpad, for example. The event can describe one or more points of contact with the screen and includes support for detecting movement, addition and removal of contact points, and so forth.\n\nTouches are represented by the `Touch` object; each touch is described by a position, size and shape, amount of pressure, and target element. Lists of touches are represented by `TouchList` objects.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent.",
    "properties": {
      "altkey": "A Boolean value indicating whether or not the alt key was down when the touch event was fired.",
      "changedtouches": "A `TouchList` of all the `Touch` objects representing individual points of contact whose states changed between the previous touch event and this one.",
      "ctrlkey": "A Boolean value indicating whether or not the control key was down when the touch event was fired.",
      "metakey": "A Boolean value indicating whether or not the meta key was down when the touch event was fired.",
      "rotation": "Change in rotation (in degrees) since the event's beginning. Positive values indicate clockwise rotation; negative values indicate counterclockwise rotation. Initial value: `0.0`.",
      "scale": "Distance between two digits since the event's beginning. Expressed as a floating-point multiple of the initial distance between the digits at the beginning of the event. Values below 1.0 indicate an inward pinch (zoom out). Values above 1.0 indicate an outward unpinch (zoom in). Initial value: `1.0`.",
      "shiftkey": "A Boolean value indicating whether or not the shift key was down when the touch event was fired.",
      "targettouches": "A `TouchList` of all the `Touch` objects that are both currently in contact with the touch surface **and** were also started on the same element that is the target of the event.",
      "touches": "A `TouchList` of all the `Touch` objects representing all current points of contact with the surface, regardless of target or changed status."
    }
  },
  "TrustedScript": {
    "docs": "The **`TrustedScript`** interface of the `Trusted Types API` represents a string with an uncompiled script body that a developer can insert into an injection sink that might execute the script. These objects are created via `TrustedTypePolicy.createScript()` and therefore have no constructor.\n\nThe value of a **TrustedScript** object is set when the object is created and cannot be changed by JavaScript as there is no setter exposed.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/TrustedScript.",
    "properties": {
      "tojson": "Returns a JSON representation of the stored data.",
      "tostring": "A string containing the sanitized script."
    }
  },
  "TouchList": {
    "docs": "The **`TouchList`** interface represents a list of contact points on a touch surface. For example, if the user has three fingers on the touch surface (such as a screen or trackpad), the corresponding `TouchList` object would have one `Touch` object for each finger, for a total of three entries.\n\n**Note:** This interface was an [attempt to create an unmodifiable list](https://stackoverflow.com/questions/74630989/why-use-domstringlist-rather-than-an-array/74641156#74641156) and only continues to be supported to not break code that's already using it. Modern APIs use types that wrap around ECMAScript array types instead, so you can treat them like ECMAScript arrays, and at the same time impose additional semantics on their usage (such as making their items read-only).\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/TouchList.",
    "properties": {
      "item": "Returns the `Touch` object at the specified index in the list.",
      "length": "The number of `Touch` objects in the `TouchList`."
    }
  },
  "TrustedTypePolicy": {
    "docs": "The **`TrustedTypePolicy`** interface of the `Trusted Types API` defines a group of functions which create `TrustedType` objects.\n\nA `TrustedTypePolicy` object is created by `TrustedTypePolicyFactory.createPolicy()` to define a policy for enforcing security rules on input. Therefore, `TrustedTypePolicy` has no constructor.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/TrustedTypePolicy.",
    "properties": {
      "createhtml": "Creates a `TrustedHTML` object.",
      "createscript": "Creates a `TrustedScript` object.",
      "createscripturl": "Creates a `TrustedScriptURL` object.",
      "name": "A string containing the name of the policy."
    }
  },
  "UIEvent": {
    "docs": "The **`UIEvent`** interface represents simple user interface events.\n\n`UIEvent` derives from `Event`. Although the `UIEvent.initUIEvent()` method is kept for backward compatibility, you should create a `UIEvent` object using the `UIEvent()` constructor.\n\nSeveral interfaces are direct or indirect descendants of this one: `MouseEvent`, `TouchEvent`, `FocusEvent`, `KeyboardEvent`, `WheelEvent`, `InputEvent`, and `CompositionEvent`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/UIEvent.",
    "properties": {
      "detail": "Returns a `long` with details about the event, depending on the event type.",
      "inituievent": "Initializes a `UIEvent` object. If the event has already been dispatched, this method does nothing.",
      "sourcecapabilities": "Returns an instance of the `InputDeviceCapabilities` interface, which provides information about the physical device responsible for generating a touch event.",
      "view": "Returns a WindowProxy that contains the view that generated the event.",
      "which": "Returns the numeric `keyCode` of the key pressed, or the character code (`charCode`) for an alphanumeric key pressed."
    }
  },
  "URL": {
    "docs": "The **`URL`** interface is used to parse, construct, normalize, and encode URLs. It works by providing properties which allow you to easily read and modify the components of a URL.\n\nYou normally create a new `URL` object by specifying the URL as a string when calling its constructor, or by providing a relative URL and a base URL. You can then easily read the parsed components of the URL or make changes to the URL.\n\nIf a browser doesn't yet support the `URL()` constructor, you can access a URL object using the `Window` interface's `URL` property. Be sure to check to see if any of your target browsers require this to be prefixed.\n\n**Note:** This feature is available in Web Workers\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/URL."
  },
  "TrustedScriptURL": {
    "docs": "The **`TrustedScriptURL`** interface of the `Trusted Types API` represents a string that a developer can insert into an injection sink that will parse it as a URL of an external script. These objects are created via `TrustedTypePolicy.createScriptURL()` and therefore have no constructor.\n\nThe value of a **TrustedScriptURL** object is set when the object is created and cannot be changed by JavaScript as there is no setter exposed.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/TrustedScriptURL.",
    "properties": {
      "tojson": "Returns a JSON representation of the stored data.",
      "tostring": "A string containing the sanitized URL."
    }
  },
  "URLPattern": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`URLPattern`** interface of the URL Pattern API matches URLs or parts of URLs against a pattern. The pattern can contain capturing groups that extract parts of the matched URL.\n\nMore information about the syntax of patterns can be found on the API overview\n  page: URL Pattern API.\n\n**Note:** This feature is available in Web Workers\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/URLPattern."
  },
  "URLSearchParams": {
    "docs": "The **`URLSearchParams`** interface defines utility methods to work with the query string of a URL.\n\nAn object implementing `URLSearchParams` can directly be used in a `for...of` structure to iterate over key/value pairs in the same order as they appear in the query string, for example the following two lines are equivalent:\n\n```\nfor (const [key, value] of mySearchParams) {\n}\nfor (const [key, value] of mySearchParams.entries()) {\n}\n```\n\n**Note:** This feature is available in Web Workers\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams.",
    "properties": {
      "append": "Appends a specified key/value pair as a new search parameter.",
      "delete": "Deletes search parameters that match a name, and optional value, from the list of all search parameters.",
      "entries": "Returns an `iterator` allowing iteration through all key/value pairs contained in this object in the same order as they appear in the query string.",
      "foreach": "Allows iteration through all values contained in this object via a callback function.",
      "get": "Returns the first value associated with the given search parameter.",
      "getall": "Returns all the values associated with a given search parameter.",
      "has": "Returns a boolean value indicating if a given parameter, or parameter and value pair, exists.",
      "iterator": "Returns an `iterator` allowing iteration through all key/value pairs contained in this object in the same order as they appear in the query string.",
      "keys": "Returns an `iterator` allowing iteration through all keys of the key/value pairs contained in this object.",
      "set": "Sets the value associated with a given search parameter to the given value. If there are several values, the others are deleted.",
      "sort": "Sorts all key/value pairs, if any, by their keys.",
      "tostring": "Returns a string containing a query string suitable for use in a URL.",
      "values": "Returns an `iterator` allowing iteration through all values of the key/value pairs contained in this object."
    }
  },
  "TrustedHTML": {
    "docs": "The **`TrustedHTML`** interface of the `Trusted Types API` represents a string that a developer can insert into an injection sink that will render it as HTML. These objects are created via `TrustedTypePolicy.createHTML()` and therefore have no constructor.\n\nThe value of a **TrustedHTML** object is set when the object is created and cannot be changed by JavaScript as there is no setter exposed.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/TrustedHTML.",
    "properties": {
      "tojson": "Returns a JSON representation of the stored data.",
      "tostring": "A string containing the sanitized HTML."
    }
  },
  "USBDevice": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`USBDevice`** interface of the WebUSB API provides access to metadata about a paired USB device and methods for controlling it.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/USBDevice.",
    "properties": {
      "claiminterface": "Returns a `Promise` that resolves when the requested interface is claimed for exclusive access.",
      "clearhalt": "Returns a `Promise` that resolves when a halt condition is cleared.",
      "close": "Returns a `Promise` that resolves when all open interfaces are released and the device session has ended.",
      "configuration": "A `USBConfiguration` object for the currently selected interface for a paired USB device.",
      "configurations": "An `array` of device-specific interfaces for controlling a paired USB device.",
      "controltransferin": "Returns a `Promise` that resolves with a `USBInTransferResult` when a command or status operation has been transmitted to the USB device.",
      "controltransferout": "Returns a `Promise` that resolves with a `USBOutTransferResult` when a command or status operation has been transmitted from the USB device.",
      "deviceclass": "One of three properties that identify USB devices for the purpose of loading a USB driver that will work with that device. The other two properties are `USBDevice.deviceSubclass` and `USBDevice.deviceProtocol`.",
      "deviceprotocol": "One of three properties that identify USB devices for the purpose of loading a USB driver that will work with that device. The other two properties are `USBDevice.deviceClass` and `USBDevice.deviceSubclass`.",
      "devicesubclass": "One of three properties that identify USB devices for the purpose of loading a USB driver that will work with that device. The other two properties are `USBDevice.deviceClass` and `USBDevice.deviceProtocol`.",
      "deviceversionmajor": "The major version number of the device in a semantic versioning scheme.",
      "deviceversionminor": "The minor version number of the device in a semantic versioning scheme.",
      "deviceversionsubminor": "The patch version number of the device in a semantic versioning scheme.",
      "forget": "Returns a `Promise` that resolves after all open interfaces are released, the device session has ended, and the permission is reset.",
      "isochronoustransferin": "Returns a `Promise` that resolves with a `USBIsochronousInTransferResult` when time sensitive information has been transmitted to the USB device.",
      "isochronoustransferout": "Returns a `Promise` that resolves with a `USBIsochronousOutTransferResult` when time sensitive information has been transmitted from the USB device.",
      "manufacturername": "The name of the organization that manufactured the USB device.",
      "open": "Returns a `Promise` that resolves when a device session has started.",
      "opened": "Indicates whether a session has been started with a paired USB device.",
      "productid": "The manufacturer-defined code that identifies a USB device.",
      "productname": "The manufacturer-defined name that identifies a USB device.",
      "releaseinterface": "Returns a `Promise` that resolves when a claimed interface is released from exclusive access.",
      "reset": "Returns a `Promise` that resolves when the device is reset and all app operations canceled and their promises rejected.",
      "selectalternateinterface": "Returns a `Promise` that resolves when the specified alternative endpoint is selected.",
      "selectconfiguration": "Returns a `Promise` that resolves when the specified configuration is selected.",
      "serialnumber": "The manufacturer-defined serial number for the specific USB device.",
      "transferin": "Returns a `Promise` that resolves with a `USBInTransferResult` when bulk or interrupt data is received from the USB device.",
      "transferout": "Returns a `Promise` that resolves with a `USBOutTransferResult` when bulk or interrupt data is sent to the USB device.",
      "usbversionmajor": "One of three properties that declare the USB protocol version supported by the device. The other two properties are `USBDevice.usbVersionMinor` and `USBDevice.usbVersionSubminor`.",
      "usbversionminor": "One of three properties that declare the USB protocol version supported by the device. The other two properties are `USBDevice.usbVersionMajor` and `USBDevice.usbVersionSubminor`.",
      "usbversionsubminor": "One of three properties that declare the USB protocol version supported by the device. The other two properties are `USBDevice.usbVersionMajor` and `USBDevice.usbVersionMinor`.",
      "vendorid": "The official usb.org-assigned vendor ID."
    }
  },
  "USB": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\n**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`USB`** interface of the WebUSB API provides attributes and methods for finding and connecting USB devices from a web page.\n\nUse `navigator.usb` to get access to the `USB` object.\n\nThe USB interface inherits from `EventTarget`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/USB.",
    "properties": {
      "getdevices": "Returns a `Promise` that resolves with an array of `USBDevice` objects for paired attached devices.",
      "requestdevice": "Returns a `Promise` that resolves with an instance of `USBDevice` if the specified device is found. Calling this function triggers the user agent's pairing flow."
    }
  },
  "USBAlternateInterface": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe `USBAlternateInterface` interface of the WebUSB API provides information about a particular configuration of an interface provided by the USB device. An interface includes one or more alternate settings which can configure a set of endpoints based on the operating mode of the device.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/USBAlternateInterface.",
    "properties": {
      "alternatesetting": "Returns the alternate setting number of this interface. This is equal to the `bAlternateSetting` field of the interface descriptor defining this interface.",
      "endpoints": "Returns an array containing instances of the `USBEndpoint` interface describing each of the endpoints that are part of this interface.",
      "interfaceclass": "Returns the class of this interface. This is equal to the `bInterfaceClass` field of the interface descriptor defining this interface. [Standardized values](https://www.usb.org/defined-class-codes) for this field are defined by the USB Implementers Forum. A value of `0xFF` indicates a vendor-defined interface.",
      "interfacename": "Returns the name of the interface, if one is provided by the device. This is the value of the string descriptor with the index specified by the `iInterface` field of the interface descriptor defining this interface.",
      "interfaceprotocol": "Returns the protocol supported by this interface. This is equal to the `bInterfaceProtocol` field of the interface descriptor defining this interface. The meaning of this value depends on the `interfaceClass` and `interfaceSubclass` fields.",
      "interfacesubclass": "Returns the subclass of this interface. This is equal to the `bInterfaceSubClass` field of the interface descriptor defining this interface. The meaning of this value depends on the `interfaceClass` field."
    }
  },
  "TrustedTypePolicyFactory": {
    "docs": "The **`TrustedTypePolicyFactory`** interface of the `Trusted Types API` creates policies and allows the verification of Trusted Type objects against created policies.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/TrustedTypePolicyFactory.",
    "properties": {
      "createpolicy": "Creates a `TrustedTypePolicy` object that implements the rules passed as `policyOptions`.",
      "defaultpolicy": "Returns the default `TrustedTypePolicy` or null if this is empty.",
      "emptyhtml": "Returns a `TrustedHTML` object containing an empty string.",
      "emptyscript": "Returns a `TrustedScript` object containing an empty string.",
      "getattributetype": "Allows web developers to check whether a Trusted Type is required for an element and attribute, and if so which one.",
      "getpropertytype": "Allows web developers to check whether a Trusted Type is required for a property, and if so which one.",
      "ishtml": "When passed a value checks that it is a valid `TrustedHTML` object.",
      "isscript": "When passed a value checks that it is a valid `TrustedScript` object.",
      "isscripturl": "When passed a value checks that it is a valid `TrustedScriptURL` object."
    }
  },
  "USBEndpoint": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe `USBEndpoint` interface of the WebUSB API provides information about an endpoint provided by the USB device. An endpoint represents a unidirectional data stream into or out of a device.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/USBEndpoint.",
    "properties": {
      "direction": "Returns the direction in which this endpoint transfers data, one of:\n\n- `\"in\"` - Data is transferred from device to host.\n- `\"out\"` - Data is transferred from host to device.",
      "endpointnumber": "Returns this endpoint's \"endpoint number\" which is a value from 1 to 15 extracted from the `bEndpointAddress` field of the endpoint descriptor defining this endpoint. This value is used to identify the endpoint when calling methods on `USBDevice`.",
      "packetsize": "Returns the size of the packets that data sent through this endpoint will be divided into.",
      "type": "Returns the type of this endpoint, one of:\n\n- `\"bulk\"` - Provides reliable data transfer for large payloads. Data sent through a bulk endpoint is guaranteed to be delivered or generate an error but may be preempted by other data traffic.\n- `\"interrupt\"` - Provides reliable data transfer for small payloads. Data sent through an interrupt endpoint is guaranteed to be delivered or generate an error and is also given dedicated bus time for transmission.\n- `\"isochronous\"` - Provides unreliable data transfer for payloads that must be delivered periodically. They are given dedicated bus time but if a deadline is missed the data is dropped."
    }
  },
  "USBInTransferResult": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe `USBInTransferResult` interface of the WebUSB API provides the result from a call to the `transferIn()` and `controlTransferIn()` methods of the `USBDevice` interface. It represents the result from requesting a transfer of data from the USB device to the USB host.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/USBInTransferResult.",
    "properties": {
      "data": "Returns a `DataView` object containing the data received from the USB device, if any.",
      "status": "Returns the status of the transfer request, one of:\n\n- `\"ok\"` - The transfer was successful.\n- `\"stall\"` - The device indicated an error by generating a stall condition on the endpoint. A stall on the control endpoint does not need to be cleared. A stall on a bulk or interrupt endpoint must be cleared by calling `clearHalt()` before `transferIn()` can be called again.\n- `\"babble\"` - The device responded with more data than was expected."
    }
  },
  "USBIsochronousInTransferPacket": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe `USBIsochronousInTransferPacket` interface of the WebUSB API is part of the response from a call to the `isochronousTransferIn()` method of the `USBDevice` interface. It represents the status of an individual packet from a request to transfer data from the USB device to the USB host over an isochronous endpoint.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/USBIsochronousInTransferPacket.",
    "properties": {
      "data": "Returns a `DataView` object containing the data received from the USB device in this packet, if any.",
      "status": "Returns the status of the transfer request, one of:\n\n- `\"ok\"` - The transfer was successful.\n- `\"stall\"` - The device indicated an error by generating a stall condition on the endpoint. A stall on an isochronous endpoint does not need to be cleared.\n- `\"babble\"` - The device responded with more data than was expected."
    }
  },
  "USBConfiguration": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe `USBConfiguration` interface of the WebUSB API provides information about a particular configuration of a USB device and the interfaces that it supports.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/USBConfiguration.",
    "properties": {
      "configurationname": "Returns the name provided by the device to describe this configuration. This is equal to the value of the string descriptor with the index provided in the [`iConfiguration`](https://www.beyondlogic.org/usbnutshell/usb5.shtml#ConfigurationDescriptors) field of the configuration descriptor defining this configuration.",
      "configurationvalue": "Returns the configuration value of this configuration. This is equal to the [`bConfigurationValue`](https://www.beyondlogic.org/usbnutshell/usb5.shtml#ConfigurationDescriptors) field of the configuration descriptor provided by the device defining this configuration.",
      "interfaces": "Returns an array containing instances of the `USBInterface` describing each interface supported by this configuration."
    }
  },
  "USBConnectionEvent": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`USBConnectionEvent`** interface of the WebUSB API is the event type passed to `USB` `connect` and `disconnect` events when the user agent detects that a new USB device has been connected or disconnected.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/USBConnectionEvent.",
    "properties": {
      "device": "Returns a `USBDevice` object representing the current device."
    }
  },
  "USBIsochronousOutTransferResult": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe `USBIsochronousOutTransferResult` interface of the WebUSB API provides the result from a call to the `isochronousTransferOut()` method of the `USBDevice` interface. It represents the result from requesting a transfer of data from the USB host to the USB device.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/USBIsochronousOutTransferResult.",
    "properties": {
      "packets": "Returns an array of `USBIsochronousOutTransferPacket` objects containing the result of each request to send a packet to the device."
    }
  },
  "UserActivation": {
    "docs": "The **`UserActivation`** interface provides information about whether a user is currently interacting with the page, or has completed an interaction since page load.\n\nThis API is only available in the window context and not exposed to workers.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/UserActivation.",
    "properties": {
      "hasbeenactive": "Indicates whether the current window has sticky user activation.",
      "isactive": "Indicates whether the current window has transient user activation."
    }
  },
  "USBIsochronousInTransferResult": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe `USBIsochronousInTransferResult` interface of the WebUSB API provides the result from a call to the `isochronousTransferIn()` method of the `USBDevice` interface. It represents the result from requesting a transfer of data from the USB device to the USB host.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/USBIsochronousInTransferResult.",
    "properties": {
      "data": "Returns a `DataView` object containing the data received from the device. This is the combined data from all packets. See the individual `DataView` objects in the `packets` array for the portion of this buffer containing data from each packet.",
      "packets": "Returns an array of `USBIsochronousInTransferPacket` objects containing the result of each request to receive a packet from the device."
    }
  },
  "VRDisplayCapabilities": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\n**Non-standard:** This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n\nThe **`VRDisplayCapabilities`** interface of the WebVR API describes the capabilities of a `VRDisplay` â its features can be used to perform VR device capability tests, for example can it return position information.\n\n**Note:** This interface was part of the old [WebVR API](https://immersive-web.github.io/webvr/spec/1.1/). It has been superseded by the [WebXR Device API](https://immersive-web.github.io/webxr/).\n\nThis interface is accessible through the `VRDisplay.capabilities` property.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/VRDisplayCapabilities.",
    "properties": {
      "canpresent": "Returns a boolean value stating whether the VR display is capable of presenting content (e.g. through an HMD).",
      "hasexternaldisplay": "Returns a boolean value stating whether the VR display is separate from the device's primary display.",
      "hasorientation": "Returns a boolean value stating whether the VR display can track and return orientation information.",
      "hasposition": "Returns a boolean value stating whether the VR display can track and return position information.",
      "maxlayers": "Returns a number indicating the maximum number of `VRLayerInit`s that the VR display can present at once (e.g. the maximum length of the array that `VRDisplay.requestPresent()` can accept.)"
    }
  },
  "VRDisplayEvent": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\n**Non-standard:** This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n\nThe **`VRDisplayEvent`** interface of the WebVR API represents the event object of WebVR-related events (see the list of WebVR window extensions).\n\n**Note:** This interface was part of the old [WebVR API](https://immersive-web.github.io/webvr/spec/1.1/). It has been superseded by the [WebXR Device API](https://immersive-web.github.io/webxr/).\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/VRDisplayEvent.",
    "properties": {
      "display": "The `VRDisplay` associated with this event.",
      "reason": "A human-readable reason why the event was fired."
    }
  },
  "VRFieldOfView": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\n**Non-standard:** This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n\nThe **`VRFieldOfView`** interface of the WebVR API represents a field of view defined by 4 different degree values describing the view from a center point.\n\n**Note:** This interface was part of the old [WebVR API](https://immersive-web.github.io/webvr/spec/1.1/). It has been superseded by the [WebXR Device API](https://immersive-web.github.io/webxr/).\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/VRFieldOfView.",
    "properties": {
      "downdegrees": "The number of degrees downwards that the field of view extends in.",
      "leftdegrees": "The number of degrees to the left that the field of view extends in.",
      "rightdegrees": "The number of degrees to the right that the field of view extends in.",
      "updegrees": "The number of degrees upwards that the field of view extends in."
    }
  },
  "USBIsochronousOutTransferPacket": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe `USBIsochronousOutTransferPacket` interface of the WebUSB API is part of the response from a call to the `isochronousTransferOut()` method of the `USBDevice` interface. It represents the status of an individual packet from a request to transfer data from the USB host to the USB device over an isochronous endpoint.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/USBIsochronousOutTransferPacket.",
    "properties": {
      "byteswritten": "Returns the number of bytes from the packet that were sent to the device.",
      "status": "Returns the status of the transfer request, one of:\n\n- `\"ok\"` - The transfer was successful.\n- `\"stall\"` - The device indicated an error by generating a stall condition on the endpoint. A stall on an isochronous endpoint does not need to be cleared."
    }
  },
  "VRFrameData": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\n**Non-standard:** This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n\nThe **`VRFrameData`** interface of the WebVR API represents all the information needed to render a single frame of a VR scene; constructed by `VRDisplay.getFrameData()`.\n\n**Note:** This interface was part of the old [WebVR API](https://immersive-web.github.io/webvr/spec/1.1/). It has been superseded by the [WebXR Device API](https://immersive-web.github.io/webxr/).\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/VRFrameData.",
    "properties": {
      "leftprojectionmatrix": "A `Float32Array` representing a 4x4 matrix that describes the projection to be used for the left eye's rendering.",
      "leftviewmatrix": "A `Float32Array` representing a 4x4 matrix that describes the view transform to be used for the left eye's rendering.",
      "pose": "The `VRPose` of the `VRDisplay` at the current `VRFrameData.timestamp`.",
      "rightprojectionmatrix": "A `Float32Array` representing a 4x4 matrix that describes the projection to be used for the right eye's rendering.",
      "rightviewmatrix": "A `Float32Array` representing a 4x4 matrix that describes the view transform to be used for the right eye's rendering.",
      "timestamp": "A constantly increasing timestamp value representing the time a frame update occurred."
    }
  },
  "USBInterface": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe `USBInterface` interface of the WebUSB API provides information about an interface provided by the USB device. An interface represents a feature of the device which implements a particular protocol and may contain endpoints for bidirectional communication.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/USBInterface.",
    "properties": {
      "alternate": "Returns the currently selected alternative configuration of this interface. By default this is the `USBAlternateInterface` from `alternates` with `alternateSetting` equal to `0`. It can be changed by calling `USBDevice.selectAlternateInterface()` with any other value found in `alternates`.",
      "alternates": "Returns an array containing instances of the `USBAlternateInterface` interface describing each of the alternative configurations possible for this interface.",
      "claimed": "Returns whether or not this interface has been claimed by the current page by calling `USBDevice.claimInterface()`.",
      "interfacenumber": "Returns the interface number of this interface. This is equal to the `bInterfaceNumber` field of the interface descriptor defining this interface."
    }
  },
  "USBOutTransferResult": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe `USBOutTransferResult` interface of the WebUSB API provides the result from a call to the `transferOut()` and `controlTransferOut()` methods of the `USBDevice` interface. It represents the result from requesting a transfer of data from the USB host to the USB device.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/USBOutTransferResult.",
    "properties": {
      "byteswritten": "Returns the number of bytes from the transfer request that were sent to the device.",
      "status": "Returns the status of the transfer request, one of:\n\n- `\"ok\"` - The transfer was successful.\n- `\"stall\"` - The device indicated an error by generating a stall condition on the endpoint. A stall on a bulk or interrupt endpoint must be cleared by calling `clearHalt()` before `transferOut()` can be called again."
    }
  },
  "VRLayerInit": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe **`VRLayerInit`** dictionary of the WebVR API represents a content layer (an `HTMLCanvasElement` or `OffscreenCanvas`) that you want to present in a VR display.\n\n**Note:** This dictionary was part of the old [WebVR API](https://immersive-web.github.io/webvr/spec/1.1/). It has been superseded by the [WebXR Device API](https://immersive-web.github.io/webxr/).\n\nYou can retrieve `VRLayerInit` objects using `VRDisplay.getLayers()`, and present them using the `VRDisplay.requestPresent()` method.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/VRLayerInit.",
    "properties": {
      "leftbounds": "Defines the left texture bounds of the canvas whose contents will be presented by the `VRDisplay`.",
      "rightbounds": "Defines the right texture bounds of the canvas whose contents will be presented by the `VRDisplay`.",
      "source": "Defines the canvas whose contents will be presented by the `VRDisplay` when `VRDisplay.submitFrame()` is called."
    }
  },
  "VRDisplay": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\n**Non-standard:** This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n\nThe **`VRDisplay`** interface of the WebVR API represents any VR device supported by this API. It includes generic information such as device IDs and descriptions, as well as methods for starting to present a VR scene, retrieving eye parameters and display capabilities, and other important functionality.\n\n**Note:** This interface was part of the old [WebVR API](https://immersive-web.github.io/webvr/spec/1.1/). It has been superseded by the [WebXR Device API](https://immersive-web.github.io/webxr/).\n\nAn array of all connected VR Devices can be returned by invoking the `Navigator.getVRDisplays()` method.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay.",
    "properties": {
      "cancelanimationframe": "A special implementation of `Window.cancelAnimationFrame` that allows callbacks registered with `VRDisplay.requestAnimationFrame()` to be unregistered.",
      "capabilities": "Returns a `VRDisplayCapabilities` object that indicates the various capabilities of the `VRDisplay`.",
      "depthfar": "Gets and sets the z-depth defining the far plane of the [eye view frustum](https://en.wikipedia.org/wiki/Viewing_frustum), i.e. the furthest viewable boundary of the scene.",
      "depthnear": "Gets and sets the z-depth defining the near plane of the [eye view frustum](https://en.wikipedia.org/wiki/Viewing_frustum), i.e. the nearest viewable boundary of the scene.",
      "displayid": "Returns an identifier for this particular VRDisplay, which is also used as an association point in the Gamepad API (see `Gamepad.displayId`).",
      "displayname": "Returns a human-readable name to identify the `VRDisplay`.",
      "exitpresent": "Stops the `VRDisplay` presenting a scene.",
      "geteyeparameters": "Returns the `VREyeParameters` object containing the eye parameters for the specified eye.",
      "getframedata": "Accepts a `VRFrameData` object and populates it with the information required to render the current frame.",
      "getimmediatepose": "Returns a `VRPose` object defining the current pose of the `VRDisplay`, with no prediction applied. This is no longer needed, and has been removed from the spec.",
      "getlayers": "Returns the layers currently being presented by the `VRDisplay`.",
      "getpose": "Returns a `VRPose` object defining the future predicted pose of the `VRDisplay` as it will be when the current frame is actually presented. **This method is deprecated â instead, you should use `VRDisplay.getFrameData()`, which also provides a `VRPose` object.**",
      "isconnected": "Returns a boolean value indicating whether the `VRDisplay` is connected to the computer.",
      "ispresenting": "Returns a boolean value indicating whether the `VRDisplay` is currently having content presented through it.",
      "requestanimationframe": "A special implementation of `Window.requestAnimationFrame` containing a callback function that will be called every time a new frame of the `VRDisplay` presentation is rendered.",
      "requestpresent": "Starts the `VRDisplay` presenting a scene.",
      "resetpose": "Resets the pose for this `VRDisplay`, treating its current `VRPose.position` and `VRPose.orientation` as the \"origin/zero\" values.",
      "stageparameters": "Returns a `VRStageParameters` object containing room-scale parameters, if the `VRDisplay` is capable of supporting room-scale experiences.",
      "submitframe": "Captures the current state of the `VRLayerInit` currently being presented and displays it on the `VRDisplay`."
    }
  },
  "VRPose": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\n**Non-standard:** This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n\nThe **`VRPose`** interface of the WebVR API represents the state of a VR sensor at a given timestamp (which includes orientation, position, velocity, and acceleration information).\n\n**Note:** This interface was part of the old [WebVR API](https://immersive-web.github.io/webvr/spec/1.1/). It has been superseded by the [WebXR Device API](https://immersive-web.github.io/webxr/).\n\nThis interface is accessible through the `VRDisplay.getPose()` and `VRDisplay.getFrameData()` methods. `VRDisplay.getPose()` is deprecated.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/VRPose.",
    "properties": {
      "angularacceleration": "Returns the angular acceleration of the `VRDisplay` at the current `VRFrameData.timestamp`, in meters per second per second.",
      "angularvelocity": "Returns the angular velocity of the `VRDisplay` at the current `VRFrameData.timestamp`, in radians per second.",
      "linearacceleration": "Returns the linear acceleration of the `VRDisplay` at the current `VRFrameData.timestamp`, in meters per second per second.",
      "linearvelocity": "Returns the linear velocity of the `VRDisplay` at the current `VRFrameData.timestamp`, in meters per second.",
      "orientation": "Returns the orientation of the sensor at the current `VRFrameData.timestamp`, as a quarternion value.",
      "position": "Returns the position of the `VRDisplay` at the current `VRFrameData.timestamp` as a 3D vector"
    }
  },
  "VTTRegion": {
    "docs": "The `VTTRegion` interfaceâpart of the API for handling WebVTT (text tracks on media presentations)âdescribes a portion of the video to render a `VTTCue` onto.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/VTTRegion.",
    "properties": {
      "id": "A string that identifies the region.",
      "lines": "A `double` representing the height of the region, in number of lines.",
      "regionanchorx": "A `double` representing the region anchor X offset, as a percentage of the region.",
      "regionanchory": "A `double` representing the region anchor Y offset, as a percentage of the region.",
      "scroll": "An enum representing how adding new cues will move existing cues.",
      "viewportanchorx": "A `double` representing the viewport anchor X offset, as a percentage of the video.",
      "viewportanchory": "A `double` representing the viewport anchor Y offset, as a percentage of the video.",
      "width": "A `double` representing the width of the region, as a percentage of the video."
    }
  },
  "VTTCue": {
    "docs": "The `VTTCue` interfaceâpart of the API for handling WebVTT (text tracks on media presentations)âdescribes and controls the text track associated with a particular `<track>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/VTTCue.",
    "properties": {
      "align": "Returns an enum representing the alignment of all the lines of text within the cue box.",
      "line": "Returns the line positioning of the cue. This can be the string `auto` or a number whose interpretation depends on the value of `VTTCue.snapToLines`.",
      "linealign": "Returns an enum representing the alignment of the `VTTCue.line`.",
      "position": "Returns the indentation of the cue within the line. This can be the string `auto` or a number representing the percentage of the `VTTCue.region`, or the video size if `VTTCue.region` is `null`.",
      "positionalign": "Returns an enum representing the alignment of the cue. This is used to determine what the `VTTCue.position` is anchored to. The default is `auto`.",
      "region": "A `VTTRegion` object describing the video's sub-region that the cue will be drawn onto, or `null` if none is assigned.",
      "size": "Returns a `double` representing the size of the cue, as a percentage of the video size.",
      "snaptolines": "Returns true if the `VTTCue.line` attribute is an integer number of lines or a percentage of the video size.",
      "text": "Returns a string with the contents of the cue.",
      "vertical": "Returns an enum representing the cue writing direction."
    }
  },
  "ValidityState": {
    "docs": "The **`ValidityState`** interface represents the validity states that an element can be in, with respect to constraint validation. Together, they help explain why an element's value fails to validate, if it's not valid.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ValidityState."
  },
  "VideoColorSpace": {
    "docs": "The **`VideoColorSpace`** interface of the WebCodecs API represents the color space of a video.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/VideoColorSpace.",
    "properties": {
      "fullrange": "A `Boolean`. If `true` indicates that full-range color values are used.",
      "matrix": "A string containing the matrix coefficients describing the relationship between sample component values and color coordinates.",
      "primaries": "A string containing the color primary describing the color gamut of a video sample.",
      "tojson": "Returns a JSON representation of the `VideoColorSpace` object.",
      "transfer": "A string containing the transfer characteristics of video samples."
    }
  },
  "VideoDecoder": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`VideoDecoder`** interface of the WebCodecs API decodes chunks of video.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/VideoDecoder.",
    "properties": {
      "close": "Ends all pending work and releases system resources.",
      "configure": "Enqueues a control message to configure the video decoder for decoding chunks.",
      "decode": "Enqueues a control message to decode a given chunk of video.",
      "decodequeuesize": "An integer representing the number of queued decode requests.",
      "flush": "Returns a promise that resolves once all pending messages in the queue have been completed.",
      "isconfigsupported": "Returns a promise indicating whether the provided `VideoDecoderConfig` is supported.",
      "reset": "Resets all states including configuration, control messages in the control message queue, and all pending callbacks.",
      "state": "Indicates the current state of decoder. Possible values are:\n\n- `\"unconfigured\"`\n- `\"configured\"`\n- `\"closed\"`"
    }
  },
  "VideoEncoder": {
    "docs": "The **`VideoEncoder`** interface of the WebCodecs API encodes `VideoFrame` objects into `EncodedVideoChunk`s.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/VideoEncoder.",
    "properties": {
      "close": "Ends all pending work and releases system resources.",
      "configure": "Asynchronously prepares the encoder to accept video frames for encoding with the specified parameters.",
      "encode": "Asynchronously encodes a `VideoFrame`.",
      "encodequeuesize": "An integer representing the number of encode queue requests.",
      "flush": "Returns a promise that resolves once all pending encodes have been completed.",
      "isconfigsupported": "Returns a promise indicating whether the provided `VideoEncoderConfig` is supported.",
      "reset": "Cancels all pending encodes and callbacks.",
      "state": "Represents the state of the underlying codec and whether it is configured for encoding."
    }
  },
  "VideoFrame": {
    "docs": "The **`VideoFrame`** interface of the Web Codecs API represents a frame of a video.\n\n`VideoFrame` is a transferable object.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/VideoFrame.",
    "properties": {
      "allocationsize": "Returns the number of bytes required to hold the `VideoFrame` as filtered by options passed into the method.",
      "clone": "Creates a new `VideoFrame` object with reference to the same media resource as the original.",
      "close": "Clears all states and releases the reference to the media resource.",
      "codedheight": "Returns the height of the `VideoFrame` in pixels, potentially including non-visible padding, and prior to considering potential ratio adjustments.",
      "codedrect": "Returns a `DOMRectReadOnly` with the width and height matching `codedWidth` and `codedHeight`.",
      "codedwidth": "Returns the width of the `VideoFrame` in pixels, potentially including non-visible padding, and prior to considering potential ratio adjustments.",
      "colorspace": "Returns a `VideoColorSpace` object.",
      "copyto": "Copies the contents of the `VideoFrame` to an `ArrayBuffer`.",
      "displayheight": "Returns the height of the `VideoFrame` when displayed after applying aspect ratio adjustments.",
      "displaywidth": "Returns the width of the `VideoFrame` when displayed after applying aspect ratio adjustments.",
      "duration": "Returns an integer indicating the duration of the video in microseconds.",
      "format": "Returns the pixel format of the `VideoFrame`.",
      "timestamp": "Returns an integer indicating the timestamp of the video in microseconds.",
      "visiblerect": "Returns a `DOMRectReadOnly` describing the visible rectangle of pixels for this `VideoFrame`."
    }
  },
  "VideoPlaybackQuality": {
    "docs": "A **`VideoPlaybackQuality`** object is returned by the `HTMLVideoElement.getVideoPlaybackQuality()` method and contains metrics that can be used to determine the playback quality of a video.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/VideoPlaybackQuality."
  },
  "VideoTrack": {
    "docs": "The `VideoTrack` interface represents a single video track from a `<video>` element.\n\nThe most common use for accessing a `VideoTrack` object is to toggle its `selected` property in order to make it the active video track for its `<video>` element.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/VideoTrack."
  },
  "VideoTrackList": {
    "docs": "The **`VideoTrackList`** interface is used to represent a list of the video tracks contained within a `<video>` element, with each track represented by a separate `VideoTrack` object in the list.\n\nRetrieve an instance of this object with `HTMLMediaElement.videoTracks`. The individual tracks can be accessed using array syntax or functions such as `forEach()` for example.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/VideoTrackList."
  },
  "ViewTimeline": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`ViewTimeline`** interface of the Web Animations API represents a view progress timeline (see CSS scroll-driven animations for more details).\n\nPass a `ViewTimeline` instance to the `Animation()` constructor or the `animate()` method to specify it as the timeline that will control the progress of the animation.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ViewTimeline."
  },
  "VisualViewport": {
    "docs": "The **`VisualViewport`** interface of the Visual Viewport API represents the visual viewport for a given window. For a page containing iframes, each iframe, as well as the containing page, will have a unique window object. Each window on a page will have a unique `VisualViewport` representing the properties associated with that window.\n\nYou can get a window's visual viewport using `Window.visualViewport`.\n\n**Note:** Only the top-level window has a visual viewport that's distinct from the layout viewport. Therefore, it's generally only the `VisualViewport` object of the top-level window that's useful. For an `<iframe>`, visual viewport metrics like `VisualViewport.width` always correspond to layout viewport metrics like `document.documentElement.clientWidth`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/VisualViewport.",
    "properties": {
      "height": "Returns the height of the visual viewport in CSS pixels.",
      "offsetleft": "Returns the offset of the left edge of the visual viewport from the left edge of the layout viewport in CSS pixels.",
      "offsettop": "Returns the offset of the top edge of the visual viewport from the top edge of the layout viewport in CSS pixels.",
      "pageleft": "Returns the x coordinate of the visual viewport relative to the initial containing block origin of the top edge in CSS pixels.",
      "pagetop": "Returns the y coordinate of the visual viewport relative to the initial containing block origin of the top edge in CSS pixels.",
      "scale": "Returns the pinch-zoom scaling factor applied to the visual viewport.",
      "width": "Returns the width of the visual viewport in CSS pixels."
    }
  },
  "VREyeParameters": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\n**Non-standard:** This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n\nThe **`VREyeParameters`** interface of the WebVR API represents all the information required to correctly render a scene for a given eye, including field of view information.\n\n**Note:** This interface was part of the old [WebVR API](https://immersive-web.github.io/webvr/spec/1.1/). It has been superseded by the [WebXR Device API](https://immersive-web.github.io/webxr/).\n\nThis interface is accessible through the `VRDisplay.getEyeParameters()` method.\n\n**Warning:** The values in this interface should not be used to compute view or projection matrices. In order to ensure the widest possible hardware compatibility use the matrices provided by `VRFrameData`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/VREyeParameters.",
    "properties": {
      "fieldofview": "Describes the current field of view for the eye, which can vary as the user adjusts their interpupillary distance (IPD).",
      "offset": "Represents the offset from the center point between the user's eyes to the center of the eye, measured in meters.",
      "renderheight": "Describes the recommended render target height of each eye viewport, in pixels.",
      "renderwidth": "Describes the recommended render target width of each eye viewport, in pixels."
    }
  },
  "WGSLLanguageFeatures": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`WGSLLanguageFeatures`** interface of the WebGPU API is a setlike object that reports the [WGSL language extensions](https://gpuweb.github.io/gpuweb/wgsl/#language-extension) supported by the WebGPU implementation.\n\nThe `WGSLLanguageFeatures` object is accessed via the `GPU.wgslLanguageFeatures` property.\n\n**Note:** Not all WGSL language extensions are available to WebGPU in all browsers that support the API. We recommend you thoroughly test any extensions you choose to use.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/WGSLLanguageFeatures."
  },
  "WakeLock": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`WakeLock`** interface of the Screen Wake Lock API prevents device screens from dimming or locking when an application needs to keep running.\n\nThe system wake lock is exposed through the `Navigator.wakeLock` property.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/WakeLock."
  },
  "WaveShaperNode": {
    "docs": "The **`WaveShaperNode`** interface represents a non-linear distorter.\n\nIt is an `AudioNode` that uses a curve to apply a wave shaping distortion to the signal. Beside obvious distortion effects, it is often used to add a warm feeling to the signal.\n\nA `WaveShaperNode` always has exactly one input and one output.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/WaveShaperNode.",
    "properties": {
      "curve": "A `Float32Array` of numbers describing the distortion to apply.",
      "oversample": "An enumerated value indicating if oversampling must be used. Oversampling is a technique for creating more samples (up-sampling) before applying the distortion effect to the audio signal."
    }
  },
  "VirtualKeyboard": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\n**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`VirtualKeyboard`** interface of the VirtualKeyboard API is useful on devices that have on-screen virtual keyboards, such as tablets, mobile phones, or other devices where a hardware keyboard may not be available.\n\nThe `VirtualKeyboard` interface makes it possible to opt out of the automatic way browsers handle on-screen virtual keyboards by reducing the height of the viewport to make room for the virtual keyboard. You can prevent the browser from changing the size of the viewport, detect the position and size of the virtual keyboard â adapting the layout of your web page as a follow-up â and programmatically show or hide the virtual keyboard.\n\nYou access the `VirtualKeyboard` interface by using `navigator.virtualKeyboard`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/VirtualKeyboard.",
    "properties": {
      "boundingrect": "A `DOMRect` that describes the geometry of the virtual keyboard.",
      "hide": "Hide the virtual keyboard.",
      "overlayscontent": "A `Boolean` that defines whether the browser should stop handling the on-screen virtual keyboard.",
      "show": "Show the virtual keyboard."
    }
  },
  "VRStageParameters": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\n**Non-standard:** This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n\nThe **`VRStageParameters`** interface of the WebVR API represents the values describing the stage area for devices that support room-scale experiences.\n\n**Note:** This interface was part of the old [WebVR API](https://immersive-web.github.io/webvr/spec/1.1/). It has been superseded by the [WebXR Device API](https://immersive-web.github.io/webxr/).\n\nThis interface is accessible through the `VRDisplay.stageParameters` property.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/VRStageParameters.",
    "properties": {
      "sittingtostandingtransform": "Contains a matrix that transforms the sitting-space view matrices of `VRFrameData` to standing-space.",
      "sizex": "Returns the width of the play-area bounds in meters.",
      "sizey": "Returns the depth of the play-area bounds in meters."
    }
  },
  "WebGL2RenderingContext": {
    "docs": "The **WebGL2RenderingContext** interface provides the OpenGL ES 3.0 rendering context for the drawing surface of an HTML `<canvas>` element.\n\nTo get an object of this interface, call `getContext()` on a `<canvas>` element, supplying \"webgl2\" as the argument:\n\n```\nconst canvas = document.getElementById(\"myCanvas\");\nconst gl = canvas.getContext(\"webgl2\");\n```\n\n**Note:** WebGL 2 is an extension to WebGL 1. The `WebGL2RenderingContext` interface implements all members of the `WebGLRenderingContext` interface. Some methods of the WebGL 1 context can accept additional values when used in a WebGL 2 context. You will find this info noted on the WebGL 1 reference pages.\n\nThe WebGL tutorial has more information, examples, and resources on how to get started with WebGL.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext.",
    "properties": {
      "beginquery": "Begins an asynchronous query.",
      "begintransformfeedback": "Starts a transform feedback operation.",
      "bindbufferbase": "Binds a given `WebGLBuffer` to a given binding point (`target`) at a given `index`.",
      "bindbufferrange": "Binds a range of a given `WebGLBuffer` to a given binding point (`target`) at a given `index`.",
      "bindsampler": "Binds a given `WebGLSampler` to a texture unit.",
      "bindtransformfeedback": "Binds a passed `WebGLTransformFeedback` object to the current GL state.",
      "bindvertexarray": "Binds a given `WebGLVertexArrayObject` to the buffer.",
      "blitframebuffer": "Transfers a block of pixels from the read framebuffer to the draw framebuffer.",
      "bufferdata": "Initializes and creates the buffer object's data store.",
      "buffersubdata": "Updates a subset of a buffer object's data store.",
      "clearbufferfiuv": "Clears buffers from the currently bound framebuffer.",
      "clientwaitsync": "Blocks and waits for a `WebGLSync` object to become signaled or a given timeout to be passed.",
      "compressedtexsubimage3d": "Specifies a three-dimensional sub-rectangle for a texture image in a compressed format.",
      "copybuffersubdata": "Copies part of the data of a buffer to another buffer.",
      "copytexsubimage3d": "Copies pixels from the current `WebGLFramebuffer` into an existing 3D texture sub-image.",
      "createquery": "Creates a new `WebGLQuery` object.",
      "createsampler": "Creates a new `WebGLSampler` object.",
      "createtransformfeedback": "Creates and initializes `WebGLTransformFeedback` objects.",
      "createvertexarray": "Creates a new `WebGLVertexArrayObject`.",
      "deletequery": "Deletes a given `WebGLQuery` object.",
      "deletesampler": "Deletes a given `WebGLSampler` object.",
      "deletesync": "Deletes a given `WebGLSync` object.",
      "deletetransformfeedback": "Deletes a given `WebGLTransformFeedback` object.",
      "deletevertexarray": "Deletes a given `WebGLVertexArrayObject`.",
      "drawarraysinstanced": "Renders primitives from array data. In addition, it can execute multiple instances of the range of elements.",
      "drawbuffers": "Specifies a list of color buffers to be drawn into.",
      "drawelementsinstanced": "Renders primitives from array data. In addition, it can execute multiple instances of a set of elements.",
      "drawrangeelements": "Renders primitives from array data in a given range.",
      "endquery": "Marks the end of an asynchronous query.",
      "endtransformfeedback": "Ends a transform feedback operation.",
      "fencesync": "Creates a new `WebGLSync` object and inserts it into the GL command stream.",
      "framebuffertexturelayer": "Attaches a single layer of a texture to a framebuffer.",
      "getactiveuniformblockname": "Retrieves the name of the active uniform block at a given index within a `WebGLProgram`.",
      "getactiveuniformblockparameter": "Retrieves information about an active uniform block within a `WebGLProgram`.",
      "getactiveuniforms": "Retrieves information about active uniforms within a `WebGLProgram`.",
      "getbuffersubdata": "Reads data from a buffer and writes them to an `ArrayBuffer` or `SharedArrayBuffer`.",
      "getfragdatalocation": "Returns the binding of color numbers to user-defined varying out variables.",
      "getindexedparameter": "Returns the indexed value for the given `target`.",
      "getinternalformatparameter": "Returns information about implementation-dependent support for internal formats.",
      "getquery": "Returns a `WebGLQuery` object for a given target.",
      "getqueryparameter": "Returns information about a query.",
      "getsamplerparameter": "Returns sampler parameter information.",
      "getsyncparameter": "Returns parameter information of a `WebGLSync` object.",
      "gettransformfeedbackvarying": "Returns information about varying variables from `WebGLTransformFeedback` buffers.",
      "getuniformblockindex": "Retrieves the index of a uniform block within a `WebGLProgram`.",
      "getuniformindices": "Retrieves the indices of a number of uniforms within a `WebGLProgram`.",
      "invalidateframebuffer": "Invalidates the contents of attachments in a framebuffer.",
      "invalidatesubframebuffer": "Invalidates portions of the contents of attachments in a framebuffer",
      "isquery": "Returns `true` if a given object is a valid `WebGLQuery` object.",
      "issampler": "Returns `true` if a given object is a valid `WebGLSampler` object.",
      "issync": "Returns `true` if the passed object is a valid `WebGLSync` object.",
      "istransformfeedback": "Returns `true` if the passed object is a valid `WebGLTransformFeedback` object.",
      "isvertexarray": "Returns `true` if a given object is a valid `WebGLVertexArrayObject`.",
      "pausetransformfeedback": "Pauses a transform feedback operation.",
      "readbuffer": "Selects a color buffer as the source for pixels.",
      "renderbufferstoragemultisample": "Creates and initializes a renderbuffer object's data store and allows specifying the number of samples to be used.",
      "resumetransformfeedback": "Resumes a transform feedback operation.",
      "samplerparameterif": "Sets sampler parameters.",
      "teximage3d": "Specifies a three-dimensional texture image.",
      "texstorage2d": "Specifies all levels of two-dimensional texture storage.",
      "texstorage3d": "Specifies all levels of a three-dimensional texture or two-dimensional array texture.",
      "texsubimage3d": "Specifies a sub-rectangle of the current 3D texture.",
      "transformfeedbackvaryings": "Specifies values to record in `WebGLTransformFeedback` buffers.",
      "uniform1234uifv": "Methods specifying values of uniform variables.",
      "uniformblockbinding": "Assigns binding points for active uniform blocks.",
      "uniformmatrix234x234fv": "Methods specifying matrix values for uniform variables.",
      "vertexattribdivisor": "Modifies the rate at which generic vertex attributes advance when rendering multiple instances of primitives with `gl.drawArraysInstanced()` and `gl.drawElementsInstanced()`.",
      "vertexattribi4uiv": "Methods specifying integer values for generic vertex attributes.",
      "vertexattribipointer": "Specifies integer data formats and locations of vertex attributes in a vertex attributes array.",
      "waitsync": "Returns immediately, but waits on the GL server until the given `WebGLSync` object is signaled."
    }
  },
  "ViewTransition": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`ViewTransition`** interface of the View Transitions API represents a view transition, and provides functionality to react to the transition reaching different states (e.g. ready to run the animation, or animation finished) or skip the transition altogether.\n\nThis object type is returned by the `document.startViewTransition()` method. When `startViewTransition()` is invoked, a sequence of steps is followed as explained in The view transition process. This also explains when the different promises fulfill.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/ViewTransition.",
    "properties": {
      "finished": "A `Promise` that fulfills once the transition animation is finished, and the new page view is visible and interactive to the user.",
      "ready": "A `Promise` that fulfills once the pseudo-element tree is created and the transition animation is about to start.",
      "updatecallbackdone": "A `Promise` that fulfills when the promise returned by the `document.startViewTransition()`'s callback fulfills."
    }
  },
  "VisibilityStateEntry": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`VisibilityStateEntry`** interface provides timings of page visibility state changes, i.e., when a tab changes from the foreground to the background or vice versa.\n\nThis can be used to pinpoint visibility changes on the performance timeline, and cross-reference them against other performance entries such as \"first-contentful-paint\" (see `PerformancePaintTiming`).\n\nThere are two key visibility state change times that this API reports on:\n\n- `visible`: The time when the page becomes visible (i.e. when its tab moves into the foreground).\n- `hidden`: The time when the pages become hidden (i.e. when its tab moves into the background).\n\nThe performance timeline will always have a \"`visibility-state`\" entry with a `startTime` of `0` and a `name` representing the initial page visibility state.\n\n**Note:** Like other Performance APIs, this API extends `PerformanceEntry`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/VisibilityStateEntry."
  },
  "WakeLockSentinel": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`WakeLockSentinel`** interface of the Screen Wake Lock API provides a handle to the underlying platform wake lock and can be manually released and reacquired. An `Object` representing the wake lock is returned via the `navigator.wakeLock.request()` method.\n\nAn acquired `WakeLockSentinel` can be released manually via the `release()` method, or automatically via the platform wake lock. This can happen if the document becomes inactive or looses visibility, if the device is low on power or the user turns on a power save mode. Releasing all `WakeLockSentinel` instances of a given wake lock type will cause the underlying platform wake lock to be released.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/WakeLockSentinel."
  },
  "WebGLObject": {
    "docs": "The **`WebGLObject`** is part of the WebGL API and is the parent interface for all WebGL objects.\n\nThis object has no public properties or methods on its own.\n\nIf the WebGL context is lost, the internal invalidated flag of all `WebGLObject` instances is set to `true`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/WebGLObject."
  },
  "WebGLProgram": {
    "docs": "The **`WebGLProgram`** is part of the WebGL API and is a combination of two compiled `WebGLShader`s consisting of a vertex shader and a fragment shader (both written in GLSL).\n\nTo create a `WebGLProgram`, call the GL context's `createProgram()` function. After attaching the shader programs using `attachShader()`, you link them into a usable program. This is shown in the code below.\n\n```\nconst program = gl.createProgram();\n\n// Attach pre-existing shaders\ngl.attachShader(program, vertexShader);\ngl.attachShader(program, fragmentShader);\n\ngl.linkProgram(program);\n\nif (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n  const info = gl.getProgramInfoLog(program);\n  throw `Could not compile WebGL program. \\n\\n${info}`;\n}\n```\n\nSee `WebGLShader` for information on creating the `vertexShader` and `fragmentShader` in the above example.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/WebGLProgram."
  },
  "WebGLQuery": {
    "docs": "The **`WebGLQuery`** interface is part of the WebGL 2 API and provides ways to asynchronously query for information. By default, occlusion queries and primitive queries are available.\n\nAnother kind of queries are disjoint timer queries, which allow you to measure performance and profiling of your GPU. Disjoint timer queries are available with the `EXT_disjoint_timer_query` extension only.\n\nWhen working with `WebGLQuery` objects, the following methods of the `WebGL2RenderingContext` are useful:\n\n- `WebGL2RenderingContext.createQuery()`\n- `WebGL2RenderingContext.deleteQuery()`\n- `WebGL2RenderingContext.isQuery()`\n- `WebGL2RenderingContext.beginQuery()`\n- `WebGL2RenderingContext.endQuery()`\n- `WebGL2RenderingContext.getQuery()`\n- `WebGL2RenderingContext.getQueryParameter()`\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/WebGLQuery."
  },
  "WebGLBuffer": {
    "docs": "The **WebGLBuffer** interface is part of the WebGL API and represents an opaque buffer object storing data such as vertices or colors.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/WebGLBuffer."
  },
  "WebGLContextEvent": {
    "docs": "The **WebContextEvent** interface is part of the WebGL API and is an interface for an event that is generated in response to a status change to the WebGL rendering context.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/WebGLContextEvent.",
    "properties": {
      "statusmessage": "A read-only property containing additional information about the event."
    }
  },
  "WebGLFramebuffer": {
    "docs": "The **WebGLFramebuffer** interface is part of the WebGL API and represents a collection of buffers that serve as a rendering destination.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/WebGLFramebuffer."
  },
  "WebGLShader": {
    "docs": "The **WebGLShader** is part of the WebGL API and can either be a vertex or a fragment shader. A `WebGLProgram` requires both types of shaders.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/WebGLShader."
  },
  "WebGLShaderPrecisionFormat": {
    "docs": "The **WebGLShaderPrecisionFormat** interface is part of the WebGL API and represents the information returned by calling the `WebGLRenderingContext.getShaderPrecisionFormat()` method.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/WebGLShaderPrecisionFormat.",
    "properties": {
      "precision": "The number of bits of precision that can be represented. For integer formats this value is always 0.",
      "rangemax": "The base 2 log of the absolute value of the maximum value that can be represented.",
      "rangemin": "The base 2 log of the absolute value of the minimum value that can be represented."
    }
  },
  "WebGLActiveInfo": {
    "docs": "The **WebGLActiveInfo** interface is part of the WebGL API and represents the information returned by calling the `WebGLRenderingContext.getActiveAttrib()` and `WebGLRenderingContext.getActiveUniform()` methods.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/WebGLActiveInfo.",
    "properties": {
      "name": "The read-only name of the requested variable.",
      "size": "The read-only size of the requested variable.",
      "type": "The read-only type of the requested variable."
    }
  },
  "WebGLTexture": {
    "docs": "The **WebGLTexture** interface is part of the WebGL API and represents an opaque texture object providing storage and state for texturing operations.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/WebGLTexture."
  },
  "WebGLRenderbuffer": {
    "docs": "The **WebGLRenderbuffer** interface is part of the WebGL API and represents a buffer that can contain an image, or that can be a source or target of a rendering operation.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderbuffer."
  },
  "WebGLTransformFeedback": {
    "docs": "The **`WebGLTransformFeedback`** interface is part of the WebGL 2 API and enables transform feedback, which is the process of capturing primitives generated by vertex processing. It allows to preserve the post-transform rendering state of an object and resubmit this data multiple times.\n\nWhen working with `WebGLTransformFeedback` objects, the following methods of the `WebGL2RenderingContext` are useful:\n\n- `WebGL2RenderingContext.createTransformFeedback()`\n- `WebGL2RenderingContext.deleteTransformFeedback()`\n- `WebGL2RenderingContext.isTransformFeedback()`\n- `WebGL2RenderingContext.bindTransformFeedback()`\n- `WebGL2RenderingContext.beginTransformFeedback()`\n- `WebGL2RenderingContext.endTransformFeedback()`\n- `WebGL2RenderingContext.pauseTransformFeedback()`\n- `WebGL2RenderingContext.resumeTransformFeedback()`\n- `WebGL2RenderingContext.transformFeedbackVaryings()`\n- `WebGL2RenderingContext.getTransformFeedbackVarying()`\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/WebGLTransformFeedback."
  },
  "WebGLUniformLocation": {
    "docs": "The **WebGLUniformLocation** interface is part of the WebGL API and represents the location of a uniform variable in a shader program.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/WebGLUniformLocation."
  },
  "WebGLSampler": {
    "docs": "The **`WebGLSampler`** interface is part of the WebGL 2 API and stores sampling parameters for `WebGLTexture` access inside of a shader.\n\nWhen working with `WebGLSampler` objects, the following methods of the `WebGL2RenderingContext` are useful:\n\n- `WebGL2RenderingContext.createSampler()`\n- `WebGL2RenderingContext.deleteSampler()`\n- `WebGL2RenderingContext.isSampler()`\n- `WebGL2RenderingContext.bindSampler()`\n- `WebGL2RenderingContext.getSamplerParameter()`\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/WebGLSampler."
  },
  "WebGLVertexArrayObject": {
    "docs": "The **`WebGLVertexArrayObject`** interface is part of the WebGL 2 API, represents vertex array objects (VAOs) pointing to vertex array data, and provides names for different sets of vertex data.\n\nWhen working with `WebGLVertexArrayObject` objects, the following methods are useful:\n\n- `WebGL2RenderingContext.createVertexArray()`\n- `WebGL2RenderingContext.deleteVertexArray()`\n- `WebGL2RenderingContext.isVertexArray()`\n- `WebGL2RenderingContext.bindVertexArray()`\n\n**Note:** The `OES_vertex_array_object` extension allows you to use vertex array objects in a WebGL 1 context.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/WebGLVertexArrayObject."
  },
  "WebSocket": {
    "docs": "The `WebSocket` object provides the API for creating and managing a WebSocket connection to a server, as well as for sending and receiving data on the connection.\n\nTo construct a `WebSocket`, use the `WebSocket()` constructor.\n\n**Note:** This feature is available in Web Workers\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/WebSocket.",
    "properties": {
      "binarytype": "The binary data type used by the connection.",
      "bufferedamount": "The number of bytes of queued data.",
      "close": "Closes the connection.",
      "extensions": "The extensions selected by the server.",
      "protocol": "The sub-protocol selected by the server.",
      "readystate": "The current state of the connection.",
      "send": "Enqueues data to be transmitted.",
      "url": "The absolute URL of the WebSocket."
    }
  },
  "WebTransport": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`WebTransport`** interface of the WebTransport API provides functionality to enable a user agent to connect to an HTTP/3 server, initiate reliable and unreliable transport in either or both directions, and close the connection once it is no longer needed.\n\n**Note:** This feature is available in Web Workers\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/WebTransport."
  },
  "WebTransportBidirectionalStream": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`WebTransportBidirectionalStream`** interface of the WebTransport API represents a bidirectional stream created by a server or a client that can be used for reliable transport. Provides access to a `WebTransportReceiveStream` for reading incoming data, and a `WebTransportSendStream` for writing outgoing data.\n\n**Note:** This feature is available in Web Workers\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/WebTransportBidirectionalStream."
  },
  "WebTransportReceiveStream": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\n**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe `WebTransportReceiveStream` interface of the WebTransport API is a `ReadableStream` that can be used to read from an incoming unidirectional or bidirectional `WebTransport` stream.\n\nThe stream is a readable byte stream of `Uint8Array`, and can be consumed using either a BYOB reader (`ReadableStreamBYOBReader`) or the default reader (`ReadableStreamDefaultReader`).\n\nObjects of this type are not constructed directly.\n  Instead they are obtained using the `WebTransport.incomingUnidirectionalStream` property.\n\n`WebTransportReceiveStream` is a transferable object.\n\n**Note:** This feature is available in Web Workers\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/WebTransportReceiveStream.",
    "properties": {
      "getstats": "Returns a `Promise` that resolves with statistics related to this stream."
    }
  },
  "WebGLSync": {
    "docs": "The **`WebGLSync`** interface is part of the WebGL 2 API and is used to synchronize activities between the GPU and the application.\n\nWhen working with `WebGLSync` objects, the following methods of the `WebGL2RenderingContext` are useful:\n\n- `WebGL2RenderingContext.fenceSync()`\n- `WebGL2RenderingContext.deleteSync()`\n- `WebGL2RenderingContext.isSync()`\n- `WebGL2RenderingContext.clientWaitSync()`\n- `WebGL2RenderingContext.waitSync()`\n- `WebGL2RenderingContext.getSyncParameter()`\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/WebGLSync."
  },
  "WebGLRenderingContext": {
    "docs": "The **`WebGLRenderingContext`** interface provides an interface to the OpenGL ES 2.0 graphics rendering context for the drawing surface of an HTML `<canvas>` element.\n\nTo get an access to a WebGL context for 2D and/or 3D graphics rendering, call `getContext()` on a `<canvas>` element, supplying \"webgl\" as the argument:\n\n```\nconst canvas = document.getElementById(\"myCanvas\");\nconst gl = canvas.getContext(\"webgl\");\n```\n\nOnce you have the WebGL rendering context for a canvas, you can render within it. The WebGL tutorial has more information, examples, and resources on how to get started with WebGL.\n\nIf you require a WebGL 2.0 context, see `WebGL2RenderingContext`; this supplies access to an implementation of OpenGL ES 3.0 graphics.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext.",
    "properties": {
      "activetexture": "Selects the active texture unit.",
      "attachshader": "Attaches a `WebGLShader` to a `WebGLProgram`.",
      "bindattriblocation": "Binds a generic vertex index to a named attribute variable.",
      "bindbuffer": "Binds a `WebGLBuffer` object to a given target.",
      "bindframebuffer": "Binds a `WebGLFrameBuffer` object to a given target.",
      "bindrenderbuffer": "Binds a `WebGLRenderBuffer` object to a given target.",
      "bindtexture": "Binds a `WebGLTexture` object to a given target.",
      "blendcolor": "Sets the source and destination blending factors.",
      "blendequation": "Sets both the RGB blend equation and alpha blend equation to a single equation.",
      "blendequationseparate": "Sets the RGB blend equation and alpha blend equation separately.",
      "blendfunc": "Defines which function is used for blending pixel arithmetic.",
      "blendfuncseparate": "Defines which function is used for blending pixel arithmetic for RGB and alpha components separately.",
      "bufferdata": "Updates buffer data.",
      "buffersubdata": "Updates buffer data starting at a passed offset.",
      "canvas": "A read-only back-reference to the `HTMLCanvasElement`. Might be `null` if it is not associated with a `<canvas>` element.",
      "checkframebufferstatus": "Returns the status of the framebuffer.",
      "clear": "Clears specified buffers to preset values.",
      "clearcolor": "Specifies the color values used when clearing color buffers.",
      "cleardepth": "Specifies the depth value used when clearing the depth buffer.",
      "clearstencil": "Specifies the stencil value used when clearing the stencil buffer.",
      "colormask": "Sets which color components to enable or to disable when drawing or rendering to a `WebGLFramebuffer`.",
      "compileshader": "Compiles a `WebGLShader`.",
      "compressedteximage2d": "Specifies a 2D texture image in a compressed format.",
      "compressedtexsubimage2d": "Specifies a 2D texture sub-image in a compressed format.",
      "copyteximage2d": "Copies a 2D texture image.",
      "copytexsubimage2d": "Copies a 2D texture sub-image.",
      "createbuffer": "Creates a `WebGLBuffer` object.",
      "createframebuffer": "Creates a `WebGLFrameBuffer` object.",
      "createprogram": "Creates a `WebGLProgram`.",
      "createrenderbuffer": "Creates a `WebGLRenderBuffer` object.",
      "createshader": "Creates a `WebGLShader`.",
      "createtexture": "Creates a `WebGLTexture` object.",
      "cullface": "Specifies whether or not front- and/or back-facing polygons can be culled.",
      "deletebuffer": "Deletes a `WebGLBuffer` object.",
      "deleteframebuffer": "Deletes a `WebGLFrameBuffer` object.",
      "deleteprogram": "Deletes a `WebGLProgram`.",
      "deleterenderbuffer": "Deletes a `WebGLRenderBuffer` object.",
      "deleteshader": "Deletes a `WebGLShader`.",
      "deletetexture": "Deletes a `WebGLTexture` object.",
      "depthfunc": "Specifies a function that compares incoming pixel depth to the current depth buffer value.",
      "depthmask": "Sets whether writing into the depth buffer is enabled or disabled.",
      "depthrange": "Specifies the depth range mapping from normalized device coordinates to window or viewport coordinates.",
      "detachshader": "Detaches a `WebGLShader`.",
      "disable": "Disables specific WebGL capabilities for this context.",
      "drawarrays": "Renders primitives from array data.",
      "drawelements": "Renders primitives from element array data.",
      "drawingbuffercolorspace": "Specifies the color space of the WebGL drawing buffer.",
      "drawingbufferheight": "The read-only height of the current drawing buffer. Should match the height of the canvas element associated with this context.",
      "drawingbufferwidth": "The read-only width of the current drawing buffer. Should match the width of the canvas element associated with this context.",
      "enable": "Enables specific WebGL capabilities for this context.",
      "finish": "Blocks execution until all previously called commands are finished.",
      "flush": "Empties different buffer commands, causing all commands to be executed as quickly as possible.",
      "framebufferrenderbuffer": "Attaches a `WebGLRenderingBuffer` object to a `WebGLFrameBuffer` object.",
      "framebuffertexture2d": "Attaches a textures image to a `WebGLFrameBuffer` object.",
      "frontface": "Specifies whether polygons are front- or back-facing by setting a winding orientation.",
      "generatemipmap": "Generates a set of mipmaps for a `WebGLTexture` object.",
      "getattachedshaders": "Returns a list of `WebGLShader` objects attached to a `WebGLProgram`.",
      "getbufferparameter": "Returns information about the buffer.",
      "getcontextattributes": "Returns a `WebGLContextAttributes` object that contains the actual context parameters. Might return `null`, if the context is lost.",
      "geterror": "Returns error information.",
      "getextension": "Returns an extension object.",
      "getframebufferattachmentparameter": "Returns information about the framebuffer.",
      "getparameter": "Returns a value for the passed parameter name.",
      "getprograminfolog": "Returns the information log for a `WebGLProgram` object.",
      "getprogramparameter": "Returns information about the program.",
      "getrenderbufferparameter": "Returns information about the renderbuffer.",
      "getshaderinfolog": "Returns the information log for a `WebGLShader` object.",
      "getshaderparameter": "Returns information about the shader.",
      "getshaderprecisionformat": "Returns a `WebGLShaderPrecisionFormat` object describing the precision for the numeric format of the shader.",
      "getshadersource": "Returns the source code of a `WebGLShader` as a string.",
      "getsupportedextensions": "Returns an `Array` of strings containing all the supported WebGL extensions.",
      "gettexparameter": "Returns information about the texture.",
      "hint": "Specifies hints for certain behaviors. The interpretation of these hints depend on the implementation.",
      "isbuffer": "Returns a Boolean indicating if the passed buffer is valid.",
      "iscontextlost": "Returns `true` if the context is lost, otherwise returns `false`.",
      "isenabled": "Tests whether a specific WebGL capability is enabled or not for this context.",
      "isframebuffer": "Returns a Boolean indicating if the passed `WebGLFrameBuffer` object is valid.",
      "isprogram": "Returns a Boolean indicating if the passed `WebGLProgram` is valid.",
      "isrenderbuffer": "Returns a Boolean indicating if the passed `WebGLRenderingBuffer` is valid.",
      "isshader": "Returns a Boolean indicating if the passed `WebGLShader` is valid.",
      "istexture": "Returns a Boolean indicating if the passed `WebGLTexture` is valid.",
      "linewidth": "Sets the line width of rasterized lines.",
      "linkprogram": "Links the passed `WebGLProgram` object.",
      "makexrcompatible": "Ensures the context is compatible with the user's XR hardware, re-creating the context if necessary with a new configuration to do so. This can be used to start an application using standard 2D presentation, then transition to using a VR or AR mode later.",
      "pixelstorei": "Specifies the pixel storage modes",
      "polygonoffset": "Specifies the scale factors and units to calculate depth values.",
      "readpixels": "Reads a block of pixels from the `WebGLFrameBuffer`.",
      "renderbufferstorage": "Creates a renderbuffer data store.",
      "samplecoverage": "Specifies multi-sample coverage parameters for anti-aliasing effects.",
      "scissor": "Defines the scissor box.",
      "shadersource": "Sets the source code in a `WebGLShader`.",
      "stencilfunc": "Sets the both front and back function and reference value for stencil testing.",
      "stencilfuncseparate": "Sets the front and/or back function and reference value for stencil testing.",
      "stencilmask": "Controls enabling and disabling of both the front and back writing of individual bits in the stencil planes.",
      "stencilmaskseparate": "Controls enabling and disabling of front and/or back writing of individual bits in the stencil planes.",
      "stencilop": "Sets both the front and back-facing stencil test actions.",
      "stencilopseparate": "Sets the front and/or back-facing stencil test actions.",
      "teximage2d": "Specifies a 2D texture image.",
      "texparameterf": "Sets texture parameters.",
      "texparameteri": "Sets texture parameters.",
      "texsubimage2d": "Updates a sub-rectangle of the current `WebGLTexture`.",
      "unpackcolorspace": "Specifies the color space to convert to when importing textures.",
      "useprogram": "Uses the specified `WebGLProgram` as part the current rendering state.",
      "validateprogram": "Validates a `WebGLProgram`.",
      "viewport": "Sets the viewport."
    }
  },
  "WebTransportSendStream": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\n**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe `WebTransportSendStream` interface of the WebTransport API is a specialized `WritableStream` that is used to send outbound data in both unidirectional or bidirectional `WebTransport` streams.\n\nThe send stream is a writable stream of `Uint8Array`, that can be written to in order to send data to a server.\n  It additionally provides streaming features such as setting the send order, and getting stream statistics.\n\nObjects of this type are not constructed directly.\n  When creating a unidirectional stream the `WebTransport.createUnidirectionalStream()` returns an object of this type for sending data.\n  When creating a bidirectional stream using `WebTransport.createBidirectionalStream()`, the method returns a `WebTransportBidirectionalStream`, and the send stream object can be obtained from its `writable` property.\n  When a bidirectional stream is initiated by the remote end, an object of this type can similarly be obtained using `WebTransport.incomingBidirectionalStreams`.\n\n`WebTransportSendStream` is a transferable object.\n\n**Note:** This feature is available in Web Workers\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/WebTransportSendStream.",
    "properties": {
      "getstats": "Returns a `Promise` that resolves with statistics related to this stream.",
      "sendorder": "Indicates the send priority of this stream relative to other streams for which the value has been set."
    }
  },
  "WebKitPoint": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\n**Non-standard:** This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n\n**`Point`** is an interface which represents a point in 2-dimensional space. It is non-standard, not broadly compatible, and should not be used.\n\n**Note:** Although it is not directly related to this defunct interface, you are probably looking for `DOMPoint`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/WebKitPoint."
  },
  "Window": {
    "docs": "The **`Window`** interface represents a window containing a DOM document; the `document` property points to the DOM document loaded in that window.\n\nA window for a given document can be obtained using the `document.defaultView` property.\n\nA global variable, `window`, representing the window in which the script is running, is exposed to JavaScript code.\n\nThe `Window` interface is home to a variety of functions, namespaces, objects, and constructors which are not necessarily directly associated with the concept of a user interface window. However, the `Window` interface is a suitable place to include these items that need to be globally available. Many of these are documented in the JavaScript Reference and the DOM Reference.\n\nIn a tabbed browser, each tab is represented by its own `Window` object; the global `window` seen by JavaScript code running within a given tab always represents the tab in which the code is running. That said, even in a tabbed browser, some properties and methods still apply to the overall window that contains the tab, such as `resizeTo()` and `innerHeight`. Generally, anything that can't reasonably pertain to a tab pertains to the window instead.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Window.",
    "properties": {
      "alert": "Displays an alert dialog.",
      "atob": "Decodes a string of data which has been encoded using base-64 encoding.",
      "back": "Moves back one in the window history. This method is deprecated; you should instead use `history.back()`.",
      "blur": "Sets focus away from the window.",
      "btoa": "Creates a base-64 encoded ASCII string from a string of binary data.",
      "caches": "Returns the `CacheStorage` object associated with the current context. This object enables functionality such as storing assets for offline use, and generating custom responses to requests.",
      "cancelanimationframe": "Enables you to cancel a callback previously scheduled with `Window.requestAnimationFrame`.",
      "cancelidlecallback": "Enables you to cancel a callback previously scheduled with `Window.requestIdleCallback`.",
      "captureevents": "Registers the window to capture all events of the specified type.",
      "clearimmediate": "Cancels the repeated execution set using `setImmediate()`.",
      "clearinterval": "Cancels the repeated execution set using `setInterval()`.",
      "cleartimeout": "Cancels the delayed execution set using `setTimeout()`.",
      "clientinformation": "An alias for `Window.navigator`.",
      "close": "Closes the current window.",
      "closed": "This property indicates whether the current window is closed or not.",
      "confirm": "Displays a dialog with a message that the user needs to respond to.",
      "console": "Returns a reference to the console object which provides access to the browser's debugging console.",
      "createimagebitmap": "Accepts a variety of different image sources, and returns a `Promise` which resolves to an `ImageBitmap`. Optionally the source is cropped to the rectangle of pixels originating at (sx, sy) with width sw, and height sh.",
      "credentialless": "Returns a boolean that indicates whether the current document was loaded inside a credentialless `<iframe>`. See IFrame credentialless for more details.",
      "crossoriginisolated": "Returns a boolean value that indicates whether the website is in a cross-origin isolation state.",
      "crypto": "Returns the browser crypto object.",
      "customelements": "Returns a reference to the `CustomElementRegistry` object, which can be used to register new custom elements and get information about previously registered custom elements.",
      "defaultstatus": "Gets/sets the status bar text for the given window.",
      "devicepixelratio": "Returns the ratio between physical pixels and device independent pixels in the current display.",
      "document": "Returns a reference to the document that the window contains.",
      "documentpictureinpicture": "Returns a reference to the document Picture-in-Picture window for the current document context.",
      "dump": "Writes a message to the console.",
      "event": "Returns the **current event**, which is the event currently being handled by the JavaScript code's context, or `undefined` if no event is currently being handled. The `Event` object passed directly to event handlers should be used instead whenever possible.",
      "external": "Returns an object with functions for adding external search providers to the browser.",
      "fetch": "Starts the process of fetching a resource from the network.",
      "find": "Searches for a given string in a window.",
      "focus": "Sets focus on the current window.",
      "forward": "Moves the window one document forward in the history. This method is deprecated; you should instead use `history.forward()`.",
      "frameelement": "Returns the element in which the window is embedded, or null if the window is not embedded.",
      "frames": "Returns an array of the subframes in the current window.",
      "fullscreen": "This property indicates whether the window is displayed in full screen or not.",
      "getcomputedstyle": "Gets computed style for the specified element. Computed style indicates the computed values of all CSS properties of the element.",
      "getdefaultcomputedstyle": "Gets default computed style for the specified element, ignoring author stylesheets.",
      "getscreendetails": "Returns a `Promise` that fulfills with a `ScreenDetails` object instance representing the details of all the screens available to the user's device.",
      "getselection": "Returns the selection object representing the selected item(s).",
      "history": "Returns a reference to the history object.",
      "indexeddb": "Provides a mechanism for applications to asynchronously access capabilities of indexed databases; returns an `IDBFactory` object.",
      "innerheight": "Gets the height of the content area of the browser window including, if rendered, the horizontal scrollbar.",
      "innerwidth": "Gets the width of the content area of the browser window including, if rendered, the vertical scrollbar.",
      "issecurecontext": "Returns a boolean indicating whether the current context is secure (`true`) or not (`false`).",
      "launchqueue": "When a progressive web app (PWA) is launched with a `launch_handler` `client_mode` value of `focus-existing`, `navigate-new`, or `navigate-existing`, the `launchQueue` provides access to the `LaunchQueue` class, which allows custom launch navigation handling to be implemented for the PWA.",
      "length": "Returns the number of frames in the window. See also `window.frames`.",
      "localstorage": "Returns a reference to the local storage object used to store data that may only be accessed by the origin that created it.",
      "location": "Gets/sets the location, or current URL, of the window object.",
      "locationbar": "Returns the locationbar object.",
      "matchmedia": "Returns a `MediaQueryList` object representing the specified media query string.",
      "menubar": "Returns the menubar object.",
      "moveby": "Moves the current window by a specified amount.",
      "moveto": "Moves the window to the specified coordinates.",
      "mozinnerscreenx": "Returns the horizontal (X) coordinate of the top-left corner of the window's viewport, in screen coordinates. This value is reported in CSS pixels. See `mozScreenPixelsPerCSSPixel` in `nsIDOMWindowUtils` for a conversion factor to adapt to screen pixels if needed.",
      "mozinnerscreeny": "Returns the vertical (Y) coordinate of the top-left corner of the window's viewport, in screen coordinates. This value is reported in CSS pixels. See `mozScreenPixelsPerCSSPixel` for a conversion factor to adapt to screen pixels if needed.",
      "name": "Gets/sets the name of the window.",
      "navigation": "Returns the current `window`'s associated `Navigation` object. The entry point for the `Navigation API`.",
      "navigator": "Returns a reference to the navigator object.",
      "open": "Opens a new window.",
      "opener": "Returns a reference to the window that opened this current window.",
      "orientation": "Returns the orientation in degrees (in 90 degree increments) of the viewport relative to the device's natural orientation.",
      "origin": "Returns the global object's origin, serialized as a string.",
      "originagentcluster": "Returns `true` if this window belongs to an origin-keyed agent cluster.",
      "outerheight": "Gets the height of the outside of the browser window.",
      "outerwidth": "Gets the width of the outside of the browser window.",
      "pagexoffset": "An alias for `window.scrollX`.",
      "pageyoffset": "An alias for `window.scrollY`.",
      "parent": "Returns a reference to the parent of the current window or subframe.",
      "performance": "Returns a `Performance` object, which includes the `timing` and `navigation` attributes, each of which is an object providing performance-related data. See also Using Navigation Timing for additional information and examples.",
      "personalbar": "Returns the personalbar object.",
      "postmessage": "Provides a secure means for one window to send a string of data to another window, which need not be within the same domain as the first.",
      "print": "Opens the Print Dialog to print the current document.",
      "prompt": "Returns the text entered by the user in a prompt dialog.",
      "querylocalfonts": "Returns a `Promise` that fulfills with an array of `FontData` objects representing the font faces available locally.",
      "queuemicrotask": "Queues a microtask to be executed at a safe time prior to control returning to the browser's event loop.",
      "releaseevents": "Releases the window from trapping events of a specific type.",
      "reporterror": "Reports an error in a script, emulating an unhandled exception.",
      "requestanimationframe": "Tells the browser that an animation is in progress, requesting that the browser schedule a repaint of the window for the next animation frame.",
      "requestfilesystem": "Lets a website or app gain access to a sandboxed file system for its own use.",
      "requestidlecallback": "Enables the scheduling of tasks during a browser's idle periods.",
      "resizeby": "Resizes the current window by a certain amount.",
      "resizeto": "Dynamically resizes window.",
      "returnvalue": "The return value to be returned to the function that called `window.showModalDialog()` to display the window as a modal dialog.",
      "scheduler": "Returns the `Scheduler` object associated with the current context. This is the entry point for using the Prioritized Task Scheduling API.",
      "screen": "Returns a reference to the screen object associated with the window.",
      "screenx": "Both properties return the horizontal distance from the left border of the user's browser viewport to the left side of the screen.",
      "screeny": "Both properties return the vertical distance from the top border of the user's browser viewport to the top side of the screen.",
      "scroll": "Scrolls the window to a particular place in the document.",
      "scrollbars": "Returns the scrollbars object.",
      "scrollby": "Scrolls the document in the window by the given amount.",
      "scrollbylines": "Scrolls the document by the given number of lines.",
      "scrollbypages": "Scrolls the current document by the specified number of pages.",
      "scrollmaxx": "The maximum offset that the window can be scrolled to horizontally, that is the document width minus the viewport width.",
      "scrollmaxy": "The maximum offset that the window can be scrolled to vertically (i.e., the document height minus the viewport height).",
      "scrollto": "Scrolls to a particular set of coordinates in the document.",
      "scrollx": "Returns the number of pixels that the document has already been scrolled horizontally.",
      "scrolly": "Returns the number of pixels that the document has already been scrolled vertically.",
      "self": "Returns an object reference to the window object itself.",
      "sessionstorage": "Returns a reference to the session storage object used to store data that may only be accessed by the origin that created it.",
      "setimmediate": "Executes a function after the browser has finished other heavy tasks.",
      "setinterval": "Schedules a function to execute every time a given number of milliseconds elapses.",
      "setresizable": "Does nothing (no-op). Kept for backward compatibility with Netscape 4.x.",
      "settimeout": "Schedules a function to execute in a given amount of time.",
      "sharedstorage": "Returns the `WindowSharedStorage` object for the current origin. This is the main entry point for writing data to shared storage using the Shared Storage API.",
      "showdirectorypicker": "Displays a directory picker which allows the user to select a directory.",
      "showmodaldialog": "Displays a modal dialog.",
      "showopenfilepicker": "Shows a file picker that allows a user to select a file or multiple files.",
      "showsavefilepicker": "Shows a file picker that allows a user to save a file.",
      "sidebar": "Returns a reference to the window object of the sidebar",
      "sizetocontent": "Sizes the window according to its content.",
      "speechsynthesis": "Returns a `SpeechSynthesis` object, which is the entry point into using Web Speech API speech synthesis functionality.",
      "status": "Gets/sets the text in the statusbar at the bottom of the browser.",
      "statusbar": "Returns the statusbar object.",
      "stop": "This method stops window loading.",
      "structuredclone": "Creates a deep clone of a given value using the structured clone algorithm.",
      "toolbar": "Returns the toolbar object.",
      "top": "Returns a reference to the topmost window in the window hierarchy. This property is read only.",
      "updatecommands": "Updates the state of commands of the current chrome window (UI).",
      "visualviewport": "Returns a `VisualViewport` object which represents the visual viewport for a given window.",
      "webkitconvertpointfromnodetopage": "Transforms a `WebKitPoint` from the node's coordinate system to the page's coordinate system.",
      "webkitconvertpointfrompagetonode": "Transforms a `WebKitPoint` from the page's coordinate system to the node's coordinate system.",
      "window": "Returns a reference to the current window."
    }
  },
  "WindowClient": {
    "docs": "The `WindowClient` interface of the ServiceWorker API represents the scope of a service worker client that is a document in a browsing context, controlled by an active worker. The service worker client independently selects and uses a service worker for its own loading and sub-resources.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/WindowClient.",
    "properties": {
      "ancestororigins": "An array of strings that indicates the ancestor origins of the browsing context represented by this `WindowClient` in reverse order.",
      "focus": "Gives user input focus to the current client.",
      "focused": "A boolean that indicates whether the current client has focus.",
      "navigate": "Loads a specified URL into a controlled client page.",
      "visibilitystate": "Indicates the visibility of the current client. This value can be one of `\"hidden\"`, `\"visible\"`, or `\"prerender\"`."
    }
  },
  "WindowControlsOverlay": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`WindowControlsOverlay`** interface of the Window Controls Overlay API exposes information about the geometry\n  of the title bar area in desktop Progressive Web Apps, and an event to know whenever it changes. This interface is accessible from `Navigator.windowControlsOverlay`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/WindowControlsOverlay.",
    "properties": {
      "gettitlebararearect": "Returns the size and position of the title bar.",
      "visible": "A Boolean that indicates whether the window controls overlay is visible or not."
    }
  },
  "WebTransportError": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`WebTransportError`** interface of the WebTransport API represents an error related to the API, which can arise from server errors, network connection problems, or client-initiated abort operations (for example, arising from a `WritableStream.abort()` call).\n\n**Note:** This feature is available in Web Workers\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/WebTransportError."
  },
  "WheelEvent": {
    "docs": "The **`WheelEvent`** interface represents events that occur due to the user moving a mouse wheel or similar input device.\n\n**Note:** This is the standard wheel event interface to use. Old versions of browsers implemented the non-standard and non-cross-browser-compatible `MouseWheelEvent` and `MouseScrollEvent` interfaces. Use this interface and avoid the non-standard ones.\n\n**Note:** Do not confuse the `wheel` event with the `scroll` event. The default action of a `wheel` event is implementation-defined. Thus, a `wheel` event doesn't necessarily dispatch a `scroll` event. Even when it does, that doesn't mean that the `delta*` values in the `wheel` event necessarily reflect the content's scrolling direction. Therefore, do not rely on `delta*` properties to get the content's scrolling direction. Instead, detect value changes to `scrollLeft` and `scrollTop` of the target in the `scroll` event.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent.",
    "properties": {
      "deltamode": "Returns an `unsigned long` representing the unit of the `delta*` values' scroll amount. Permitted values are:",
      "deltax": "Returns a `double` representing the horizontal scroll amount.",
      "deltay": "Returns a `double` representing the vertical scroll amount.",
      "deltaz": "Returns a `double` representing the scroll amount for the z-axis.",
      "wheeldelta": "Returns an integer (32-bit) representing the distance in pixels.",
      "wheeldeltax": "Returns an integer representing the horizontal scroll amount.",
      "wheeldeltay": "Returns an integer representing the vertical scroll amount."
    }
  },
  "WindowControlsOverlayGeometryChangeEvent": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`WindowControlsOverlayGeometryChangeEvent`** interface of the Window Controls Overlay API is passed to `geometrychange` when the size or visibility of a desktop Progress Web App's title bar region changes.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/WindowControlsOverlayGeometryChangeEvent.",
    "properties": {
      "titlebararearect": "A `DOMRect` representing the position and size of the title bar region.",
      "visible": "A Boolean that indicates whether the window controls overlay is visible or not."
    }
  },
  "WebTransportDatagramDuplexStream": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`WebTransportDatagramDuplexStream`** interface of the WebTransport API represents a duplex stream that can be used for unreliable transport of datagrams between client and server. Provides access to a `ReadableStream` for reading incoming datagrams, a `WritableStream` for writing outgoing datagrams, and various settings and statistics related to the stream.\n\nThis is accessed via the `WebTransport.datagrams` property.\n\n\"Unreliable\" means that transmission of data is not guaranteed, nor is arrival in a specific order. This is fine in some situations and provides very fast delivery. For example, you might want to transmit regular game state updates where each message supersedes the last one that arrives, and order is not important.\n\n**Note:** This feature is available in Web Workers\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/WebTransportDatagramDuplexStream."
  },
  "WorkerLocation": {
    "docs": "The **`WorkerLocation`** interface defines the absolute location of the script executed by the `Worker`. Such an object is initialized for each worker and is available via the `WorkerGlobalScope.location` property obtained by calling `self.location`.\n\nThis interface is only visible from inside a JavaScript script executed in the context of a Web worker.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/WorkerLocation.",
    "properties": {
      "hash": "Returns the `hash` part of the worker's location.",
      "host": "Returns the `host` part of the worker's location.",
      "hostname": "Returns the `hostname` part of the worker's location.",
      "href": "Returns a string containing the serialized `URL` for the worker's location.",
      "origin": "Returns the worker's `origin`.",
      "pathname": "Returns the `pathname` part of the worker's location.",
      "port": "Returns the `port` part of the worker's location.",
      "protocol": "Returns the `protocol` part of the worker's location.",
      "search": "Returns the `search` part of the worker's location.",
      "tostring": "Returns a string containing the serialized `URL` for the worker's location. It is a synonym for `WorkerLocation.href`."
    }
  },
  "Worklet": {
    "docs": "The **`Worklet`** interface is a lightweight version of `Web Workers` and gives developers access to low-level parts of the rendering pipeline.\n\nWith Worklets, you can run JavaScript and WebAssembly code to do graphics rendering or audio processing where high performance is required.\n\nWorklets allow static import of ECMAScript modules, if supported, using `import`.\n  Dynamic import is disallowed by the specification â calling `import()` will throw.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Worklet.",
    "properties": {
      "addmodule": "Adds the script module at the given URL to the current worklet."
    }
  },
  "Worker": {
    "docs": "The **`Worker`** interface of the Web Workers API represents a background task that can be created via script, which can send messages back to its creator.\n\nCreating a worker is done by calling the `Worker(\"path/to/worker/script\")` constructor.\n\nWorkers may themselves spawn new workers, as long as those workers are hosted at the same origin as the parent page.\n\nNote that not all interfaces and functions are available to web workers. See Functions and classes available to Web Workers for details.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/Worker.",
    "properties": {
      "postmessage": "Sends a message â consisting of any JavaScript object â to the worker's inner scope.",
      "terminate": "Immediately terminates the worker. This does not let worker finish its operations; it is halted at once. `ServiceWorker` instances do not support this method."
    }
  },
  "WorkletGlobalScope": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`WorkletGlobalScope`** interface is an abstract class that specific worklet scope classes inherit from. Each `WorkletGlobalScope` defines a new global environment.\n\n**Note:** You don't normally need to interact with this interface. It is a base interface intended to be subclassed. You will encounter the subclasses `AudioWorkletGlobalScope` inside `AudioWorklet` objects, or `PaintWorkletGlobalScope` inside CSS paint `Worklet` objects.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/WorkletGlobalScope."
  },
  "WorkerNavigator": {
    "docs": "The **`WorkerNavigator`** interface represents a subset of the `Navigator` interface allowed to be accessed from a `Worker`. Such an object is initialized for each worker and is available via the `self.navigator` property.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/WorkerNavigator.",
    "properties": {
      "appcodename": "Always returns `'Mozilla'`, in any browser. This property is kept only for compatibility purposes.",
      "appname": "Returns the official name of the browser. Do not rely on this property to return the correct value.",
      "appversion": "Returns the version of the browser as a string. Do not rely on this property to return the correct value.",
      "connection": "Provides a `NetworkInformation` object containing information about the network connection of a device.",
      "devicememory": "Returns the amount of device memory in gigabytes. This value is an approximation given by rounding to the nearest power of 2 and dividing that number by 1024.",
      "globalprivacycontrol": "Returns a boolean indicating a user's consent to their information being shared or sold.",
      "gpu": "Returns the `GPU` object for the current worker context. The entry point for the WebGPU API.",
      "hardwareconcurrency": "Returns the number of logical processor cores available.",
      "language": "Returns a string representing the preferred language of the user, usually the language of the browser UI. The `null` value is returned when this is unknown.",
      "languages": "Returns an array of strings representing the languages known to the user, by order of preference.",
      "locks": "Returns a `LockManager` object which provides methods for requesting a new `Lock` object and querying for an existing `Lock` object.",
      "mediacapabilities": "Returns a `MediaCapabilities` object that can expose information about the decoding and encoding capabilities for a given format and output capabilities.",
      "online": "Returns a boolean value indicating whether the browser is online.",
      "permissions": "Returns a `Permissions` object that can be used to query and update permission status of APIs covered by the Permissions API.",
      "platform": "Returns a string representing the platform of the browser. Do not rely on this property to return the correct value.",
      "product": "Always returns `'Gecko'`, on any browser. This property is kept only for compatibility purposes.",
      "serial": "Returns a `Serial` object, which represents the entry point into the `Web Serial API` to enable the control of serial ports.",
      "serviceworker": "Returns a `ServiceWorkerContainer` object, which provides access to registration, removal, upgrade, and communication with the `ServiceWorker` objects for the [associated document](https://html.spec.whatwg.org/multipage/browsers.html#concept-document-window).",
      "storage": "Returns a `StorageManager` interface for managing persistence permissions and estimating available storage.",
      "usb": "Returns a `USB` object for the current document, providing access to WebUSB API functionality.",
      "useragent": "Returns the user agent string for the current browser.",
      "useragentdata": "Returns a `NavigatorUAData` object, which gives access to information about the browser and operating system of the user."
    }
  },
  "WritableStreamDefaultController": {
    "docs": "The **`WritableStreamDefaultController`** interface of the Streams API represents a controller allowing control of a `WritableStream`'s state. When constructing a `WritableStream`, the underlying sink is given a corresponding `WritableStreamDefaultController` instance to manipulate.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultController.",
    "properties": {
      "error": "Causes any future interactions with the associated stream to error.",
      "signal": "Returns the `AbortSignal` associated with the controller."
    }
  },
  "WritableStreamDefaultWriter": {
    "docs": "The **`WritableStreamDefaultWriter`** interface of the Streams API is the object returned by `WritableStream.getWriter()` and once created locks the writer to the `WritableStream` ensuring that no other streams can write to the underlying sink.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter.",
    "properties": {
      "abort": "Aborts the stream, signaling that the producer can no longer successfully write to the stream and it is to be immediately moved to an error state, with any queued writes discarded.",
      "close": "Closes the associated writable stream.",
      "closed": "Allows you to write code that responds to an end to the streaming process. Returns a promise that fulfills if the stream becomes closed, or rejects if the stream errors or the writer's lock is released.",
      "desiredsize": "Returns the desired size required to fill the stream's internal queue.",
      "ready": "Returns a `Promise` that resolves when the desired size of the stream's internal queue transitions from non-positive to positive, signaling that it is no longer applying backpressure.",
      "releaselock": "Releases the writer's lock on the corresponding stream. After the lock is released, the writer is no longer active. If the associated stream is errored when the lock is released, the writer will appear errored in the same way from now on; otherwise, the writer will appear closed.",
      "write": "Writes a passed chunk of data to a `WritableStream` and its underlying sink, then returns a `Promise` that resolves to indicate the success or failure of the write operation."
    }
  },
  "XMLDocument": {
    "docs": "The **XMLDocument** interface represents an XML document. It inherits from the generic `Document` and does not add any specific methods or properties to it: nevertheless, several algorithms behave differently with the two types of documents.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XMLDocument."
  },
  "WritableStream": {
    "docs": "The **`WritableStream`** interface of the Streams API provides a standard abstraction for writing streaming data to a destination, known as a sink.\n  This object comes with built-in backpressure and queuing.\n\n`WritableStream` is a transferable object.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/WritableStream.",
    "properties": {
      "abort": "Aborts the stream, signaling that the producer can no longer successfully write to the stream and it is to be immediately moved to an error state, with any queued writes discarded.",
      "close": "Closes the stream.",
      "getwriter": "Returns a new instance of `WritableStreamDefaultWriter` and locks the stream to that instance. While the stream is locked, no other writer can be acquired until this one is released.",
      "locked": "A boolean indicating whether the `WritableStream` is locked to a writer."
    }
  },
  "WorkerGlobalScope": {
    "docs": "The **`WorkerGlobalScope`** interface of the Web Workers API is an interface representing the scope of any worker. Workers have no browsing context; this scope contains the information usually conveyed by `Window` objects â in this case event handlers, the console or the associated `WorkerNavigator` object. Each `WorkerGlobalScope` has its own event loop.\n\nThis interface is usually specialized by each worker type: `DedicatedWorkerGlobalScope` for dedicated workers, `SharedWorkerGlobalScope` for shared workers, and `ServiceWorkerGlobalScope` for ServiceWorker. The `self` property returns the specialized scope for each context.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope.",
    "properties": {
      "atob": "Decodes a string of data which has been encoded using base-64 encoding.",
      "btoa": "Creates a base-64 encoded ASCII string from a string of binary data.",
      "caches": "Returns the `CacheStorage` object associated with the current context. This object enables functionality such as storing assets for offline use, and generating custom responses to requests.",
      "clearinterval": "Cancels the repeated execution set using `setInterval()`.",
      "cleartimeout": "Cancels the delayed execution set using `setTimeout()`.",
      "createimagebitmap": "Accepts a variety of different image sources, and returns a `Promise` which resolves to an `ImageBitmap`. Optionally the source is cropped to the rectangle of pixels originating at (sx, sy) with width sw, and height sh.",
      "crossoriginisolated": "Returns a boolean value that indicates whether the website is in a cross-origin isolation state.",
      "crypto": "Returns the `Crypto` object associated to the global object.",
      "dump": "Allows you to write a message to stdout â i.e. in your terminal. This is the same as Firefox's `window.dump`, but for workers.",
      "fetch": "Starts the process of fetching a resource from the network.",
      "fonts": "Returns the `FontFaceSet` associated with the worker.",
      "importscripts": "Imports one or more scripts into the worker's scope. You can specify as many as you'd like, separated by commas. For example: `importScripts('foo.js', 'bar.js');`.",
      "indexeddb": "Provides a mechanism for applications to asynchronously access capabilities of indexed databases; returns an `IDBFactory` object.",
      "issecurecontext": "Returns a boolean indicating whether the current context is secure (`true`) or not (`false`).",
      "location": "Returns the `WorkerLocation` associated with the worker. It is a specific location object, mostly a subset of the `Location` for browsing scopes, but adapted to workers.r.",
      "navigator": "Returns the `WorkerNavigator` associated with the worker. It is a specific navigator object, mostly a subset of the `Navigator` for browsing scopes, but adapted to workers.",
      "origin": "Returns the global object's origin, serialized as a string.",
      "performance": "Returns the `Performance` associated with the worker. It is a regular performance object, except that only a subset of its property and methods are available to workers.",
      "queuemicrotask": "Queues a microtask to be executed at a safe time prior to control returning to the browser's event loop.",
      "reporterror": "Reports an error in a script, emulating an unhandled exception.",
      "scheduler": "Returns the `Scheduler` object associated with the current context. This is the entry point for using the Prioritized Task Scheduling API.",
      "self": "Returns a reference to the `WorkerGlobalScope` itself. Most of the time it is a specific scope like `DedicatedWorkerGlobalScope`, `SharedWorkerGlobalScope` or `ServiceWorkerGlobalScope`.",
      "setinterval": "Schedules a function to execute every time a given number of milliseconds elapses.",
      "settimeout": "Schedules a function to execute in a given amount of time.",
      "structuredclone": "Creates a deep clone of a given value using the structured clone algorithm."
    }
  },
  "XMLHttpRequestEventTarget": {
    "docs": "`XMLHttpRequestEventTarget` is the interface that describes the event handlers shared on `XMLHttpRequest` and `XMLHttpRequestUpload`.\n\nYou don't use `XMLHttpRequestEventTarget` directly; instead you interact with the sub classes.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget."
  },
  "XMLHttpRequestUpload": {
    "docs": "The **`XMLHttpRequestUpload`** interface represents the upload process for a specific `XMLHttpRequest`. It is an opaque object that represents the underlying, browser-dependent, upload process. It is an `XMLHttpRequestEventTarget` and can be obtained by calling `XMLHttpRequest.upload`.\n\n**Note:** This feature is available in Web Workers, except for Service Workers\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestUpload."
  },
  "XMLSerializer": {
    "docs": "The `XMLSerializer` interface provides the `serializeToString()` method to construct an XML string representing a DOM tree.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XMLSerializer."
  },
  "WindowSharedStorage": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`WindowSharedStorage`** interface of the Shared Storage API represents the shared storage for a particular origin within a standard browsing context.\n\n`WindowSharedStorage` is accessed via `Window.sharedStorage`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/WindowSharedStorage."
  },
  "XPathEvaluator": {
    "docs": "The `XPathEvaluator` interface allows to compile and evaluate XPath expressions.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XPathEvaluator.",
    "properties": {
      "createexpression": "Creates a parsed XPath expression with resolved namespaces.",
      "creatensresolver": "Adapts any DOM node to resolve namespaces allowing the XPath expression to be evaluated relative to the context of the node where it appeared within the document.",
      "evaluate": "Evaluates an XPath expression string and returns a result of the specified type if possible."
    }
  },
  "XPathNSResolver": {
    "docs": "The `XPathNSResolver` interface permits prefix strings in an XPath expression to be properly bound to namespace URI strings.\n\nThe `XPathEvaluator` interface can construct an implementation of `XPathNSResolver` from a node, or the interface may be implemented by any application.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XPathNSResolver.",
    "properties": {
      "lookupnamespaceuri": "Looks up the namespace URI associated to the given namespace prefix."
    }
  },
  "XPathResult": {
    "docs": "The **`XPathResult`** interface represents the results generated by evaluating an XPath expression within the context of a given node.\n\nSince XPath expressions can result in a variety of result types, this interface makes it possible to determine and handle the type and value of the result.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XPathResult.",
    "properties": {
      "booleanvalue": "A `boolean` representing the value of the result if `resultType` is `BOOLEAN_TYPE`.",
      "invaliditeratorstate": "Signifies that the iterator has become invalid. It is `true` if `resultType` is `UNORDERED_NODE_ITERATOR_TYPE` or `ORDERED_NODE_ITERATOR_TYPE` and the document has been modified since this result was returned.",
      "iteratenext": "If the result is a node set, this method iterates over it and returns the next node from it or `null` if there are no more nodes.",
      "numbervalue": "A `number` representing the value of the result if `resultType` is `NUMBER_TYPE`.",
      "resulttype": "A `number` code representing the type of the result, as defined by the type constants.",
      "singlenodevalue": "A `Node` representing the value of the single node result, which may be `null`.",
      "snapshotitem": "Returns an item of the snapshot collection or `null` in case the index is not within the range of nodes. Unlike the iterator result, the snapshot does not become invalid, but may not correspond to the current document if it is mutated.",
      "snapshotlength": "The number of nodes in the result snapshot.",
      "stringvalue": "A string representing the value of the result if `resultType` is `STRING_TYPE`."
    }
  },
  "WorkletSharedStorage": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`WorkletSharedStorage`** interface of the Shared Storage API represents the shared storage for a particular origin within a worklet context.\n\n`WorkletSharedStorage` is accessed via `SharedStorageWorkletGlobalScope.sharedStorage`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/WorkletSharedStorage."
  },
  "XRBoundedReferenceSpace": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe WebXR Device API's **`XRBoundedReferenceSpace`** interface describes a virtual world reference space which has preset boundaries. This extends `XRReferenceSpace`, which describes an essentially unrestricted space around the viewer's position. These bounds are defined using an array of points, each of which defines a vertex in a polygon inside which the user is allowed to move.\n\nThis is typically used when the XR system is capable of tracking the user's physical movement within a limited distance of their starting position. The specified bounds may, in fact, describe the shape and size of the room the user is located in, in order to let the WebXR site or application prevent the user from colliding with the walls or other obstacles in the real world. At a minimum, the boundaries indicate the area in which the XR device is capable of tracking the user's movement. See the article Using bounded reference spaces for details on how bounded spaces work and why they're useful.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XRBoundedReferenceSpace."
  },
  "XRCPUDepthInformation": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`XRCPUDepthInformation`** interface contains depth information from the CPU (returned by `XRFrame.getDepthInformation()`).\n\nThis interface inherits properties from its parent, `XRDepthInformation`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XRCPUDepthInformation.",
    "properties": {
      "data": "An `ArrayBuffer` containing depth-buffer information in raw format.",
      "getdepthinmeters": "Returns the depth in meters at (x, y) in normalized view coordinates."
    }
  },
  "XPathException": {
    "docs": "**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nIn the DOM XPath API the **`XPathException`** interface represents exception conditions that can be encountered while performing XPath operations.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XPathException.",
    "properties": {
      "code": "Returns a `short` that contains one of the error code constants."
    }
  },
  "XMLHttpRequest": {
    "docs": "`XMLHttpRequest` (XHR) objects are used to interact with servers. You can retrieve data from a URL without having to do a full page refresh. This enables a Web page to update just part of a page without disrupting what the user is doing.\n\nDespite its name, `XMLHttpRequest` can be used to retrieve any type of data, not just XML.\n\nIf your communication needs to involve receiving event data or message data from a server, consider using server-sent events through the `EventSource` interface. For full-duplex communication, WebSockets may be a better choice.\n\n**Note:** This feature is available in Web Workers, except for Service Workers\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest.",
    "properties": {
      "abort": "Aborts the request if it has already been sent.",
      "channel": "The channel used by the object when performing the request.",
      "getallresponseheaders": "Returns all the response headers, separated by CRLF, as a string, or `null` if no response has been received.",
      "getresponseheader": "Returns the string containing the text of the specified header, or `null` if either the response has not yet been received or the header doesn't exist in the response.",
      "mozanon": "A boolean. If true, the request will be sent without cookie and authentication headers.",
      "mozbackgroundrequest": "A boolean. It indicates whether or not the object represents a background service request.",
      "mozsystem": "A boolean. If true, the same origin policy will not be enforced on the request.",
      "open": "Initializes a request.",
      "overridemimetype": "Overrides the MIME type returned by the server.",
      "readystate": "Returns a number representing the state of the request.",
      "response": "Returns an `ArrayBuffer`, a `Blob`, a `Document`, a JavaScript object, or a string, depending on the value of `XMLHttpRequest.responseType`, that contains the response entity body.",
      "responsetext": "Returns a string that contains the response to the request as text, or `null` if the request was unsuccessful or has not yet been sent.",
      "responsetype": "Specifies the type of the response.",
      "responseurl": "Returns the serialized URL of the response or the empty string if the URL is null.",
      "responsexml": "Returns a `Document` containing the response to the request, or `null` if the request was unsuccessful, has not yet been sent, or cannot be parsed as XML or HTML. Not available in Web Workers.",
      "send": "Sends the request. If the request is asynchronous (which is the default), this method returns as soon as the request is sent.",
      "setrequestheader": "Sets the value of an HTTP request header. You must call `setRequestHeader()` after `open()`, but before `send()`.",
      "status": "Returns the HTTP response status code of the request.",
      "statustext": "Returns a string containing the response string returned by the HTTP server. Unlike `XMLHttpRequest.status`, this includes the entire text of the response message (\"`OK`\", for example).\n\n**Note:** According to the HTTP/2 specification [RFC 7540, section 8.1.2.4: Response Pseudo-Header Fields](https://datatracker.ietf.org/doc/html/rfc7540#section-8.1.2.4), HTTP/2 does not define a way to carry the version or reason phrase that is included in an HTTP/1.1 status line.",
      "timeout": "The time in milliseconds a request can take before automatically being terminated.",
      "upload": "A `XMLHttpRequestUpload` representing the upload process.",
      "withcredentials": "Returns `true` if cross-site `Access-Control` requests should be made using credentials such as cookies or authorization headers; otherwise `false`."
    }
  },
  "XRAnchorSet": {
    "docs": "**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`XRAnchorSet`** interface exposes a collection of anchors. Its instances are returned by `XRFrame.trackedAnchors` and are `Set`-like objects.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XRAnchorSet."
  },
  "XPathExpression": {
    "docs": "This interface is a compiled XPath expression that can be evaluated on a document or specific node to return information from its DOM tree.\n\nThis is useful when an expression will be reused in an application, because it is just compiled once and all namespace prefixes which occur within the expression are preresolved.\n\nObjects of this type are created by calling `XPathEvaluator.createExpression()`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XPathExpression.",
    "properties": {
      "evaluate": "Evaluates the XPath expression on the given node or document."
    }
  },
  "XRCompositionLayer": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`XRCompositionLayer`** interface of the WebXR Device API is a base class that defines a set of common properties and behaviors for WebXR layer types. It is not constructable on its own.\n\nSeveral layer types inherit from `XRCompositionLayer`:\n\n- `XREquirectLayer`\n- `XRCubeLayer`\n- `XRCylinderLayer`\n- `XRProjectionLayer`\n- `XRQuadLayer`\n\n`XRCompositionLayer` itself inherits from the general `XRLayer` class (which inherits from `EventTarget`).\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XRCompositionLayer.",
    "properties": {
      "blendtexturesourcealpha": "A boolean enabling the layer's texture alpha channel.",
      "destroy": "Deletes the underlying layer attachments.",
      "layout": "The layout type of the layer.",
      "miplevels": "The number of mip levels in the color and texture data for the layer.",
      "needsredraw": "A boolean signaling that the layer should be re-rendered in the next frame."
    }
  },
  "XRAnchor": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`XRAnchor`** interface creates anchors which keep track of the pose that is fixed relative to the real world. With anchors, you can specify poses in the world that need to be updated to correctly reflect the evolving understanding of the world, such that the poses remain aligned with the same place in the physical world. That helps to build an illusion that the placed objects are really present in the user's environment.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XRAnchor.",
    "properties": {
      "anchorspace": "Returns an `XRSpace` object to locate the anchor relative to other `XRSpace` objects.",
      "delete": "Removes the anchor."
    }
  },
  "XRCylinderLayer": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`XRCylinderLayer`** interface of the WebXR Device API is a layer that takes up a curved rectangular space in the virtual environment. Only the front of the layer is visible.\n\n`XRCylinderLayer` requires the `layers` feature to be enabled for the `XRSession`. You can request it in `XRSystem.requestSession()`.\n\nTo create a new `XRCylinderLayer`, call either:\n\n- `XRWebGLBinding.createCylinderLayer()` for a WebGL opaque texture layer, or\n- `XRMediaBinding.createCylinderLayer()` for an HTML `<video>` playback layer.\n\nTo present layers to the XR device, add them to the `layers` render state using `XRSession.updateRenderState()`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XRCylinderLayer.",
    "properties": {
      "aspectratio": "A number indicating the ratio of the visible cylinder section. It is the ratio of the width of the visible section of the cylinder divided by its height. The width is calculated by multiplying the `radius` with the `centralAngle`.",
      "centralangle": "A number indicating the angle in radians of the visible section of the cylinder.",
      "radius": "A number indicating the radius of the cylinder.",
      "space": "An `XRSpace` representing the layer's spatial relationship with the user's physical environment.",
      "transform": "An `XRRigidTransform` representing the offset and orientation relative to `space`."
    }
  },
  "XRHand": {
    "docs": "The **`XRHand`** interface is pair iterator (an ordered map) with the key being the hand joints and the value being an `XRJointSpace`.\n\n`XRHand` is returned by `XRInputSource.hand`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XRHand."
  },
  "XRHitTestResult": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`XRHitTestResult`** interface of the WebXR Device API contains a single result of a hit test. You can get an array of `XRHitTestResult` objects for a frame by calling `XRFrame.getHitTestResults()`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XRHitTestResult.",
    "properties": {
      "createanchor": "Returns a `Promise` that resolves with an `XRAnchor` created from the hit test result.",
      "getpose": "Returns the `XRPose` of the hit test result relative to the given base space."
    }
  },
  "XRDepthInformation": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`XRDepthInformation`** interface contains information about the distance from the user's device to the real-world geometry in the user's environment.\n\nThis interface is the parent of:\n\n| --- | --- |\n| `XRCPUDepthInformation` | Depth information from the CPU (returned by `XRFrame.getDepthInformation()`). |\n| `XRWebGLDepthInformation` | Depth information from WebGL (returned by `XRWebGLBinding.getDepthInformation()`). |\n\nYou will usually interact with these child interfaces. However, `XRDepthInformation` provides some useful properties that are inherited:\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XRDepthInformation.",
    "properties": {
      "height": "Contains the height of the depth buffer (number of rows).",
      "normdepthbufferfromnormview": "An `XRRigidTransform` that needs to be applied when indexing into the depth buffer. The transformation that the matrix represents changes the coordinate system from normalized view coordinates to normalized depth-buffer coordinates that can then be scaled by depth buffer's `width` and `height` to obtain the absolute depth-buffer coordinates.",
      "rawvaluetometers": "Contains the scale factor by which the raw depth values must be multiplied in order to get the depths in meters.",
      "width": "Contains the width of the depth buffer (number of columns)."
    }
  },
  "XRInputSource": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe WebXR Device API's **`XRInputSource`** interface describes a single source of control input which is part of the user's WebXR-compatible virtual or augmented reality system. The device is specific to the platform being used, but provides the direction in which it is being aimed and optionally may generate events if the user triggers performs actions using the device.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XRInputSource."
  },
  "XRInputSourceArray": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe interface **`XRInputSourceArray`** represents a live list of WebXR input sources, and is used as the return value of the `XRSession` property `inputSources`. Each entry is an `XRInputSource` representing one input device connected to the WebXR system.\n\nIn addition to being able to access the input sources in the list using standard array notation (that is, with index numbers inside square brackets), methods are available to allow the use of iterators and the `forEach()` method is also available.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourceArray."
  },
  "XRInputSourceEvent": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe WebXR Device API's **`XRInputSourceEvent`** interface describes an event which has occurred on a WebXR user input device such as a hand controller, gaze tracking system, or motion tracking system. More specifically, they represent a change in the state of an `XRInputSource`.\n\nTo learn more about handling inputs in a WebXR project, see the article Inputs and input sources.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourceEvent."
  },
  "XRJointPose": {
    "docs": "The **`XRJointPose`** interface is an `XRPose` with additional information about the size of the skeleton joint it represents.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XRJointPose.",
    "properties": {
      "radius": "The radius (distance from skin) for a joint."
    }
  },
  "XRFrame": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nA WebXR Device API **`XRFrame`** object is passed into the `requestAnimationFrame()` callback function and provides access to the information needed in order to render a single frame of animation for an `XRSession` describing a VR or AR scene. Events which communicate the tracking state of objects also provide an `XRFrame` reference as part of their structure.\n\nIn addition to providing a reference to the `XRSession` for which this frame is to be rendered, the `getViewerPose()` method is provided to obtain the `XRViewerPose` describing the viewer's position and orientation in space, and `getPose()` can be used to create an `XRPose` describing the relative position of one `XRSpace` relative to another.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XRFrame."
  },
  "XRCubeLayer": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`XRCubeLayer`** interface of the WebXR Device API is a layer that renders directly from a [cubemap](https://en.wikipedia.org/wiki/Cube_mapping) and projects it onto the inside faces of a cube.\n\n`XRCubeLayer` requires the `layers` feature to be enabled for the `XRSession`. You can request it in `XRSystem.requestSession()`.\n\nTo create a new `XRCubeLayer`, call `XRWebGLBinding.createCubeLayer()`.\n\nTo present layers to the XR device, add them to the `layers` render state using `XRSession.updateRenderState()`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XRCubeLayer.",
    "properties": {
      "orientation": "A `DOMPointReadOnly` representing the orientation relative to the `space` property.",
      "space": "An `XRSpace` representing the layer's spatial relationship with the user's physical environment."
    }
  },
  "XRLayer": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`XRLayer`** interface of the WebXR Device API is the base class for WebXR layer types. It inherits methods from `EventTarget`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XRLayer."
  },
  "XRInputSourcesChangeEvent": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe WebXR Device API interface **`XRInputSourcesChangeEvent`** is used to represent the `inputsourceschange` event sent to an `XRSession` when the set of available WebXR input controllers changes.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourcesChangeEvent."
  },
  "XRLightEstimate": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`XRLightEstimate`** interface of the WebXR Device API provides the estimated lighting values for an `XRLightProbe` at the time represented by an `XRFrame`.\n\nTo get an `XRLightEstimate` object, call the `XRFrame.getLightEstimate()` method.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XRLightEstimate.",
    "properties": {
      "primarylightdirection": "A `DOMPointReadOnly` representing the direction to the primary light source from the `probeSpace` of an `XRLightProbe`.",
      "primarylightintensity": "A `DOMPointReadOnly` (with the `x`, `y`, `z` values mapped to RGB) representing the intensity of the primary light source from the `probeSpace` of an `XRLightProbe`.",
      "sphericalharmonicscoefficients": "A `Float32Array` containing 9 spherical harmonics coefficients."
    }
  },
  "XREquirectLayer": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`XREquirectLayer`** interface of the WebXR Device API is a layer that maps [equirectangular](https://en.wikipedia.org/wiki/Equirectangular_projection) coded data onto the inside of a sphere.\n\n`XREquirectLayer` requires the `layers` feature to be enabled for the `XRSession`. You can request it in `XRSystem.requestSession()`.\n\nTo create a new `XREquirectLayer`, call either:\n\n- `XRWebGLBinding.createEquirectLayer()` for a WebGL opaque texture layer, or\n- `XRMediaBinding.createEquirectLayer()` for an HTML `<video>` playback layer.\n\nTo present layers to the XR device, add them to the `layers` render state using `XRSession.updateRenderState()`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XREquirectLayer.",
    "properties": {
      "centralhorizontalangle": "A number indicating the central horizontal angle in radians for the sphere.",
      "lowerverticalangle": "A number indicating the lower vertical angle in radians for the sphere.",
      "radius": "A number indicating the radius of the sphere.",
      "space": "An `XRSpace` representing the layer's spatial relationship with the user's physical environment.",
      "transform": "An `XRRigidTransform` representing the offset and orientation relative to `space`.",
      "upperverticalangle": "A number indicating the upper vertical angle in radians for the sphere."
    }
  },
  "XRMediaBinding": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`XRMediaBinding`** interface is used to create layers that display the content of an `HTMLVideoElement`.\n\n**Note:**\n    Only the video frames will be displayed in the layer. Video controls need to be implemented separately and must be drawn in another layer.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XRMediaBinding.",
    "properties": {
      "createcylinderlayer": "Returns an `XRCylinderLayer` object bound to an `HTMLVideoElement`.",
      "createequirectlayer": "Returns an `XREquirectLayer` object bound to an `HTMLVideoElement`.",
      "createquadlayer": "Returns an `XRQuadLayer` object bound to an `HTMLVideoElement`."
    }
  },
  "XRHitTestSource": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`XRHitTestSource`** interface of the WebXR Device API handles hit test subscriptions. You can get an `XRHitTestSource` object by using the `XRSession.requestHitTestSource()` method.\n\nThis object doesn't itself contain hit test results, but it is used to compute hit tests for each `XRFrame` by calling `XRFrame.getHitTestResults()`, which returns `XRHitTestResult` objects.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XRHitTestSource.",
    "properties": {
      "cancel": "Unsubscribes from the hit test."
    }
  },
  "XRPose": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n`XRPose` is a WebXR API interface representing a position and orientation in the 3D space, relative to the `XRSpace` within which it resides. The `XRSpace`âwhich is either an `XRReferenceSpace` or an `XRBoundedReferenceSpace`âdefines the coordinate system used for the pose and, in the case of an `XRViewerPose`, its underlying views.\n\nTo obtain the `XRPose` for the `XRSpace` used as the local coordinate system of an object, call `XRFrame.getPose()`, specifying that local `XRSpace` and the space to which you wish to convert:\n\n```\nthePose = xrFrame.getPose(localSpace, baseSpace);\n```\n\nThe pose for a viewer (or camera) is represented by the `XRViewerPose` subclass of `XRPose`. This is obtained using `XRFrame.getViewerPose()` instead of `getPose()`, specifying a reference space which has been adjusted to position and orient the node to provide the desired viewing position and angle:\n\n```\nviewerPose = xrFrame.getViewerPose(adjReferenceSpace);\n```\n\nHere, `adjReferenceSpace` is a reference space which has been updated using the base frame of reference for the frame and any adjustments needed to position the viewer based on movement or rotation which is being supplied from a source other than the XR device, such as keyboard or mouse inputs.\n\nSee the article Movement, orientation, and motion for further details and an example with thorough explanations of what's going on.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XRPose.",
    "properties": {
      "angularvelocity": "A `DOMPointReadOnly` describing the angular velocity in radians per second relative to the base `XRSpace`.",
      "emulatedposition": "A Boolean value which is `false` if the position and orientation given by `transform` is obtained directly from a full six degree of freedom (6DoF) XR device (that is, a device which tracks not only the pitch, yaw, and roll of the head but also the forward, backward, and side-to-side motion of the viewer). If any component of the `transform` is computed or created artificially (such as by using mouse or keyboard controls to move through space), this value is instead `true`, indicating that the `transform` is in part emulated in software.",
      "linearvelocity": "A `DOMPointReadOnly` describing the linear velocity in meters per second relative to the base `XRSpace`.",
      "transform": "A `XRRigidTransform` which provides the position and orientation of the pose relative to the base `XRSpace`."
    }
  },
  "XRProjectionLayer": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`XRProjectionLayer`** interface of the WebXR Device API is a layer that fills the entire view of the observer and is refreshed close to the device's native frame rate.\n\n`XRProjectionLayer` is supported by all `XRSession` objects (no `layers` feature descriptor is needed).\n\nTo create a new `XRProjectionLayer`, call `XRWebGLBinding.createProjectionLayer()`.\n  To present layers to the XR device, add them to the `layers` render state using `XRSession.updateRenderState()`.\n\n`XRProjectionLayer` objects don't have an associated `XRSpace`, because they render to the full frame.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XRProjectionLayer.",
    "properties": {
      "fixedfoveation": "A number indicating the amount of foveation used by the XR compositor for the layer. Fixed Foveated Rendering (FFR) renders the edges of the eye textures at a lower resolution than the center and reduces the GPU load.",
      "ignoredepthvalues": "A boolean indicating that the XR compositor is not making use of depth buffer values when rendering the layer.",
      "texturearraylength": "The layer's layer count for array textures when using `texture-array` as the `textureType`.",
      "textureheight": "The height in pixels of the color textures of this layer.",
      "texturewidth": "The width in pixels of the color textures of this layer."
    }
  },
  "XRQuadLayer": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`XRQuadLayer`** interface of the WebXR Device API is a layer that takes up a flat rectangular space in the virtual environment. An `XRQuadLayer` has no thickness. It is a two-dimensional object positioned and oriented in 3D space. The position of a quad refers to the center of the quad. Only the front of the layer is visible.\n\n`XRQuadLayer` requires the `layers` feature to be enabled for the `XRSession`. You can request it in `XRSystem.requestSession()`.\n\nTo create a new `XRQuadLayer`, call either:\n\n- `XRWebGLBinding.createQuadLayer()` for a WebGL opaque texture quad layer, or\n- `XRMediaBinding.createQuadLayer()` for an HTML `<video>` playback quad layer.\n\nTo present layers to the XR device, add them to the `layers` render state using `XRSession.updateRenderState()`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XRQuadLayer.",
    "properties": {
      "height": "Represents the height of the layer in meters.",
      "space": "An `XRSpace` representing the layer's spatial relationship with the user's physical environment.",
      "transform": "An `XRRigidTransform` representing the offset and orientation relative to `space`.",
      "width": "Represents the width of the layer in meters."
    }
  },
  "XRJointSpace": {
    "docs": "The **`XRJointSpace`** interface is an `XRSpace` and represents the position and orientation of an `XRHand` joint.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XRJointSpace.",
    "properties": {
      "jointname": "The name of the joint that is tracked. See `XRHand` for possible hand joint names."
    }
  },
  "XRReferenceSpace": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe WebXR Device API's **`XRReferenceSpace`** interface describes the coordinate system for a specific tracked entity or object within the virtual world using a specified tracking behavior. The tracking behavior is defined by the selected reference space type. It expands upon the base class, `XRSpace`, by adding support for several different tracking behaviors as well as to request a new reference space which describes the offset transform between the tracked object and another location in the world.\n\nAll reference spacesâwith the sole exception being bounded reference spacesâare described using the `XRReferenceSpace` type. Bounded spaces are implemented as `XRBoundedReferenceSpace` objects. These are special spaces which let you establish a perimeter within which it's \"safe\" for the viewer to move. For XR systems that allow the user to physically move around, such as those that track movement with a real-world camera, this boundary establishes the edges of the area the user is able to move around in, whether due to physical obstacles or due to limitations of the XR hardware. See the article Using bounded reference spaces to protect the viewer for more on using boundaries to keep the user from colliding with obstacles both physical and virtual.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XRReferenceSpace."
  },
  "XRLightProbe": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`XRLightProbe`** interface of the WebXR Device API contains lighting information at a given point in the user's environment. You can get an `XRLighting` object using the `XRSession.requestLightProbe()` method.\n\nThis object doesn't itself contain lighting values, but it is used to collect lighting states for each `XRFrame`. See `XRLightEstimate` for the estimated lighting values for an `XRLightProbe`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XRLightProbe.",
    "properties": {
      "onreflectionchange": "Event handler property for the `reflectionchange` event.",
      "probespace": "An `XRSpace` tracking the position and orientation the lighting estimations are relative to."
    }
  },
  "XRLayerEvent": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`XRLayerEvent`** interface of the WebXR Device API is the event type for events related to a change of state of an `XRLayer` object. These events occur, for example, when the layer needs to be redrawn.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XRLayerEvent."
  },
  "XRRigidTransform": {
    "docs": "The **`XRRigidTransform`** is a WebXR API interface that represents the 3D geometric transform described by a position and orientation.\n\n`XRRigidTransform` is used to specify transforms throughout the WebXR APIs, including:\n\n- The offset and orientation relative to the parent reference space to use when creating a new reference space with `getOffsetReferenceSpace()`.\n- The `transform` of an `XRView`.\n- The `transform` of an `XRPose`.\n- The `XRReferenceSpaceEvent` event's `transform` property, as found in the `reset` event received by an `XRReferenceSpace`.\n\nUsing `XRRigidTransform` in these places rather than bare arrays that provide the matrix data has an advantage. It automatically computes the inverse of the transform and even caches it making subsequent requests significantly faster.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XRRigidTransform.",
    "properties": {
      "inverse": "Returns a `XRRigidTransform` which is the inverse of this transform. That is, if applied to an object that had been previously transformed by the original transform, it will undo the transform and return the original object.",
      "matrix": "Returns the transform matrix in the form of a 16-member `Float32Array`. See the section Matrix format for how the array is used to represent a matrix.",
      "orientation": "A `DOMPointReadOnly` which contains a unit quaternion describing the rotational component of the transform. As a unit quaternion, its length is always normalized to `1.0`.",
      "position": "A `DOMPointReadOnly` specifying a 3-dimensional point, expressed in meters, describing the translation component of the transform. The `w` property is always `1.0`."
    }
  },
  "XRSession": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe `WebXR Device API`'s **`XRSession`** interface represents an ongoing XR session, providing methods and properties used to interact with and control the session. To open a WebXR session, use the `XRSystem` interface's `requestSession()` method.\n\nWith `XRSession` methods, you can poll the viewer's position and orientation (the `XRViewerPose`), gather information about the user's environment, and present imagery to the user. `XRSession` supports both inline and immersive virtual and augmented reality modes.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XRSession."
  },
  "XRSubImage": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`XRSubImage`** interface of the WebXR Device API represents what viewport of the GPU texture to use for rendering.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XRSubImage.",
    "properties": {
      "viewport": "The `XRViewport` used when rendering the sub image."
    }
  },
  "XRReferenceSpaceEvent": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe WebXR Device API interface **`XRReferenceSpaceEvent`** represents an event sent to an `XRReferenceSpace`. Currently, the only event that uses this type is the `reset` event.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XRReferenceSpaceEvent."
  },
  "XRTransientInputHitTestResult": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`XRTransientInputHitTestResult`** interface of the WebXR Device API contains an array of results of a hit test for transient input, grouped by input source.\n\nYou can get an array of `XRHitTestResult` objects for a frame by calling `XRFrame.getHitTestResultsForTransientInput()`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XRTransientInputHitTestResult.",
    "properties": {
      "inputsource": "Represents the `XRInputSource` that was used to compute the `results` array.",
      "results": "Represents an array of `XRHitTestResult` objects containing the hit test results for the input source, ordered by the distance along the ray used to perform the hit test, with the closest result at position 0."
    }
  },
  "XRSystem": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe WebXR Device API interface **`XRSystem`** provides methods which let you get access to an `XRSession` object representing a WebXR session. With that `XRSession` in hand, you can use it to interact with the Augmented Reality (AR) or Virtual Reality (VR) device.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XRSystem."
  },
  "XRRay": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`XRRay`** interface of the WebXR Device API is a geometric ray described by an origin point and a direction vector.\n\n`XRRay` objects can be passed to `XRSession.requestHitTestSource()` or `XRSession.requestHitTestSourceForTransientInput()` to perform hit testing.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XRRay.",
    "properties": {
      "direction": "A `DOMPointReadOnly` representing the ray's 3-dimensional directional vector.",
      "matrix": "A transform that can be used to position objects along the `XRRay`. This is a 4 by 4 matrix given as a 16 element `Float32Array` in column major order.",
      "origin": "A `DOMPointReadOnly` representing the 3-dimensional point in space that the ray originates from, in meters."
    }
  },
  "XRView": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe WebXR Device API's **`XRView`** interface describes a single view into the XR scene for a specific frame, providing orientation and position information for the viewpoint. You can think of it as a description of a specific eye or camera and how it views the world. A 3D frame will involve two views, one for each eye, separated by an appropriate distance which approximates the distance between the viewer's eyes. This allows the two views, when projected in isolation into the appropriate eyes, to simulate a 3D world.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XRView."
  },
  "XRViewerPose": {
    "docs": "The WebXR Device API interface **`XRViewerPose`** represents the pose (the position and orientation) of a viewer's point of view on the scene. Each `XRViewerPose` can have multiple views to represent, for example, the slight separation between the left and right eye.\n\nThis view can represent anything from the point-of-view of a user's XR headset to the viewpoint represented by a player's movement of an avatar using mouse and keyboard, presented on the screen, to a virtual camera capturing the scene for a spectator.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XRViewerPose."
  },
  "XRViewport": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe WebXR Device API's **`XRViewport`** interface provides properties used to describe the size and position of the current viewport within the `XRWebGLLayer` being used to render the 3D scene.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XRViewport."
  },
  "XRRenderState": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`XRRenderState`** interface of the WebXR Device API contains configurable values which affect how the imagery generated by an `XRSession` gets composited. These properties include the range of distances from the viewer within which content should be rendered, the vertical field of view (for inline presentations), and a reference to the `XRWebGLLayer` being used as the target for rendering the scene prior to it being presented on the XR device's display or displays.\n\nWhen you apply changes using the `XRSession` method `updateRenderState()`, the specified changes take effect after the current animation frame has completed, but before the next one begins.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XRRenderState.",
    "properties": {
      "baselayer": "The `XRWebGLLayer` from which the browser's compositing system obtains the image for the XR session.",
      "depthfar": "The distance, in meters, of the **far clip plane** from the viewer. The far clip plane is the plane which is parallel to the display beyond which rendering of the scene no longer takes place. This, essentially, specifies the maximum distance the user can see.",
      "depthnear": "The distance, in meters, of the **near clip plane** from the viewer. The near clip plane is the plane, parallel to the display, at which rendering of the scene begins. Any closer to the viewer than this, and no portions of the scene are drawn.",
      "inlineverticalfieldofview": "The default vertical field of view, defined in radians, to use when the session is in `inline` mode. `null` for all immersive sessions.",
      "layers": "An ordered array containing `XRLayer` objects that are displayed by the XR compositor."
    }
  },
  "XRSessionEvent": {
    "docs": "The WebXR Device API's **`XRSessionEvent`** interface describes an event which indicates the change of the state of an `XRSession`. These events occur, for example, when the session ends or the visibility of its context changes.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XRSessionEvent."
  },
  "XRWebGLDepthInformation": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`XRWebGLDepthInformation`** interface contains depth information from the GPU/WebGL (returned by `XRWebGLBinding.getDepthInformation()`).\n\nThis interface inherits properties from its parent, `XRDepthInformation`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLDepthInformation.",
    "properties": {
      "texture": "A `WebGLTexture` containing depth buffer information as an opaque texture."
    }
  },
  "XRWebGLLayer": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`XRWebGLLayer`** interface of the WebXR Device API provides a linkage between the WebXR device (or simulated XR device, in the case of an inline session) and a WebGL context used to render the scene for display on the device. In particular, it provides access to the WebGL framebuffer and viewport to ease access to the context.\n\nAlthough `XRWebGLLayer` is currently the only type of framebuffer layer supported by WebGL, it's entirely possible that future updates to the WebXR specification may allow for other layer types and corresponding image sources.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLLayer."
  },
  "XRSpace": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe **`XRSpace`** interface of the WebXR Device API is an abstract interface providing a common basis for every class which represents a virtual coordinate system within the virtual world, in which its origin corresponds to a physical location. Spatial data in WebXR is always expressed relative to an object based upon one of the descendant interfaces of `XRSpace`, at the time at which a given `XRFrame` takes place.\n\nNumeric values such as pose positions are thus coordinates in the corresponding `XRSpace`, relative to that space's origin.\n\n**Note:** The `XRSpace` interface is never used directly; instead, all spaces are created using one of the interfaces based on `XRSpace`. At this time, those are `XRReferenceSpace`, `XRBoundedReferenceSpace`, and `XRJointSpace`.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XRSpace."
  },
  "XRWebGLSubImage": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`XRWebGLSubImage`** interface is used during rendering of WebGL layers.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLSubImage.",
    "properties": {
      "colortexture": "A color `WebGLTexture` object for the `XRCompositionLayer` to render.",
      "colortextureheight": "A number representing the height in pixels of the GL attachment.",
      "colortexturewidth": "A number representing the width in pixels of the GL attachment.",
      "depthstenciltexture": "A depth/stencil `WebGLTexture` object for the `XRCompositionLayer` to render.",
      "imageindex": "A number representing the offset into the texture array if the layer was requested with `texture-array`; `null` otherwise."
    }
  },
  "console": {
    "docs": "The **`console`** object provides access to the debugging console (e.g., the [Web console](https://firefox-source-docs.mozilla.org/devtools-user/web_console/index.html) in Firefox). The specifics of how it works vary from browser to browser or server runtimes (Node.js, for example), but there is a de facto set of features that are typically provided.\n\nThe `console` object can be accessed from any global object. `Window` on browsing scopes and `WorkerGlobalScope` as specific variants in workers via the property console. It's exposed as `Window.console`, and can be referenced as `console`. For example:\n\n```\nconsole.log(\"Failed to open the specified link\");\n```\n\nThis page documents the Methods available on the `console` object and gives a few Usage examples.\n\n**Note:** This feature is available in Web Workers\n\n**Note:** Certain online IDEs and editors may implement the console API differently than the browsers. As a result, certain functionality of the console API, such as the timer methods, may not be outputted in the console of online IDEs or editors. Always open your browser's DevTools console to see the logs as shown in this documentation.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/console.",
    "properties": {
      "assert": "Log a message and stack trace to console if the first argument is `false`.",
      "clear": "Clear the console.",
      "count": "Log the number of times this line has been called with the given label.",
      "countreset": "Resets the value of the counter with the given label.",
      "debug": "Outputs a message to the console with the log level `debug`.",
      "dir": "Displays an interactive listing of the properties of a specified JavaScript object. This listing lets you use disclosure triangles to examine the contents of child objects.",
      "dirxml": "Displays an XML/HTML Element representation of the specified object if possible or the JavaScript Object view if it is not possible.",
      "error": "Outputs an error message. You may use string substitution and additional arguments with this method.",
      "exception": "An alias for `console.error()`.",
      "group": "Creates a new inline group, indenting all following output by another level. To move back out a level, call `console.groupEnd()`.",
      "groupcollapsed": "Creates a new inline group, indenting all following output by another level. However, unlike `console.group()` this starts with the inline group collapsed requiring the use of a disclosure button to expand it. To move back out a level, call `console.groupEnd()`.",
      "groupend": "Exits the current inline group.",
      "info": "Informative logging of information. You may use string substitution and additional arguments with this method.",
      "log": "For general output of logging information. You may use string substitution and additional arguments with this method.",
      "profile": "Starts the browser's built-in profiler (for example, the [Firefox performance tool](https://firefox-source-docs.mozilla.org/devtools-user/performance/index.html)). You can specify an optional name for the profile.",
      "profileend": "Stops the profiler. You can see the resulting profile in the browser's performance tool (for example, the [Firefox performance tool](https://firefox-source-docs.mozilla.org/devtools-user/performance/index.html)).",
      "table": "Displays tabular data as a table.",
      "time": "Starts a timer with a name specified as an input parameter. Up to 10,000 simultaneous timers can run on a given page.",
      "timeend": "Stops the specified timer and logs the elapsed time in milliseconds since it started.",
      "timelog": "Logs the value of the specified timer to the console.",
      "timestamp": "Adds a marker to the browser performance tool's timeline ([Chrome](https://developer.chrome.com/docs/devtools/evaluate-performance/reference/) or [Firefox](https://profiler.firefox.com/docs/#/./guide-ui-tour-timeline)).",
      "trace": "Outputs a stack trace.",
      "warn": "Outputs a warning message. You may use string substitution and additional arguments with this method."
    }
  },
  "XRTransientInputHitTestSource": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`XRTransientInputHitTestSource`** interface of the WebXR Device API handles transient input hit test subscriptions. You can get an `XRTransientInputHitTestSource` object by calling the `XRSession.requestHitTestSourceForTransientInput()`.\n\nThis object doesn't itself contain transient input hit test results, but it is used to compute hit tests for each `XRFrame` by calling `XRFrame.getHitTestResultsForTransientInput()`, which returns `XRTransientInputHitTestResult` objects.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XRTransientInputHitTestSource.",
    "properties": {
      "cancel": "Unsubscribes from the transient input hit test."
    }
  },
  "XRWebGLBinding": {
    "docs": "**Secure context:** This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n**Experimental:** **This is an experimental technology**\n\nCheck the Browser compatibility table carefully before using this in production.\n\nThe **`XRWebGLBinding`** interface is used to create layers that have a GPU backend.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLBinding.",
    "properties": {
      "createcubelayer": "Returns an `XRCubeLayer` object, which is a layer that renders directly from a [cubemap](https://en.wikipedia.org/wiki/Cube_mapping), and projects it onto the inside faces of a cube.",
      "createcylinderlayer": "Returns an `XRCylinderLayer` object which is a layer that takes up a curved rectangular space in the virtual environment.",
      "createequirectlayer": "Returns an `XREquirectLayer` object which is a layer that maps [equirectangular](https://en.wikipedia.org/wiki/Equirectangular_projection) coded data onto the inside of a sphere.",
      "createprojectionlayer": "Returns an `XRProjectionLayer` object which is a layer that fills the entire view of the observer and is refreshed close to the device's native frame rate.",
      "createquadlayer": "Returns an `XRQuadLayer` object which is a two-dimensional object positioned and oriented in 3D space.",
      "getdepthinformation": "Returns an `XRWebGLDepthInformation` object containing WebGL depth information.",
      "getreflectioncubemap": "Returns a `WebGLTexture` object containing a reflection cube map texture.",
      "getsubimage": "Returns an `XRWebGLSubImage` object representing the WebGL texture to render.",
      "getviewsubimage": "Returns an `XRWebGLSubImage` object representing the WebGL texture to render for an `XRView`.",
      "nativeprojectionscalefactor": "The `scaleFactor` that was passed in during the construction of the projection layer. The native buffer size is scaled by this number."
    }
  },
  "XSLTProcessor": {
    "docs": "An **`XSLTProcessor`** applies an XSLT stylesheet transformation to an XML document to\n  produce a new XML document as output. It has methods to load the XSLT stylesheet, to\n  manipulate `<xsl:param>` parameter values, and to apply the\n  transformation to documents.\n\nSee also https://developer.mozilla.org/en-US/docs/Web/API/XSLTProcessor.",
    "properties": {
      "clearparameters": "Removes all set parameters from the `XSLTProcessor`.\n      The `XSLTProcessor` will then use the default values specified in the XSLT stylesheet.",
      "getparameter": "Gets the value of a parameter from the XSLT stylesheet.",
      "importstylesheet": "Imports the XSLT stylesheet.\n      If the given node is a document node, you can pass in a full XSL Transform or a [literal result element transform](https://www.w3.org/TR/xslt/#result-element-stylesheet);\n      otherwise, it must be an `<xsl:stylesheet>` or `<xsl:transform>` element.",
      "removeparameter": "Removes the parameter if it was previously set.\n      This will make the `XSLTProcessor` use the default value for the parameter as specified in the XSLT stylesheet.",
      "reset": "Removes all parameters and stylesheets from the `XSLTProcessor`.",
      "setparameter": "Sets a parameter (`<xsl:param>`) value in the XSLT stylesheet that was imported.",
      "transformtodocument": "Transforms the node source applying the XSLT stylesheet given importing using the `XSLTProcessor.importStylesheet()` function.",
      "transformtofragment": "Transforms the node source by applying the XSLT stylesheet imported using the `XSLTProcessor.importStylesheet()` function.\n      The owner document of the resulting document fragment is the owner node."
    }
  }
}
